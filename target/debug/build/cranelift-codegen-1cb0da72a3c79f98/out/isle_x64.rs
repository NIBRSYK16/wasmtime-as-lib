// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/x64/inst.isle
// - src/isa/x64/lower.isle
// - /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-22.0.0/target/debug/build/cranelift-codegen-1cb0da72a3c79f98/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn operand_size_of_type_32_64(&mut self, arg0: Type) -> OperandSize;
    fn raw_operand_size_of_type(&mut self, arg0: Type) -> OperandSize;
    fn put_in_reg_mem_imm(&mut self, arg0: Value) -> RegMemImm;
    fn put_in_reg_mem(&mut self, arg0: Value) -> RegMem;
    fn synthetic_amode_to_reg_mem(&mut self, arg0: &SyntheticAmode) -> RegMem;
    fn amode_to_synthetic_amode(&mut self, arg0: &Amode) -> SyntheticAmode;
    fn sum_extend_fits_in_32_bits(
        &mut self,
        arg0: Type,
        arg1: Imm64,
        arg2: Offset32,
    ) -> Option<u32>;
    fn amode_offset(&mut self, arg0: &Amode, arg1: i32) -> Amode;
    fn zero_offset(&mut self) -> Offset32;
    fn intcc_to_cc(&mut self, arg0: &IntCC) -> CC;
    fn cc_invert(&mut self, arg0: &CC) -> CC;
    fn cc_nz_or_z(&mut self, arg0: &CC) -> Option<CC>;
    fn encode_fcmp_imm(&mut self, arg0: &FcmpImm) -> u8;
    fn encode_round_imm(&mut self, arg0: &RoundImm) -> u8;
    fn imm8_reg_to_imm8_gpr(&mut self, arg0: &Imm8Reg) -> Imm8Gpr;
    fn gpr_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<Gpr>;
    fn imm8_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<u8>;
    fn writable_gpr_to_reg(&mut self, arg0: WritableGpr) -> WritableReg;
    fn writable_xmm_to_reg(&mut self, arg0: WritableXmm) -> WritableReg;
    fn writable_reg_to_xmm(&mut self, arg0: WritableReg) -> WritableXmm;
    fn writable_xmm_to_xmm(&mut self, arg0: WritableXmm) -> Xmm;
    fn writable_gpr_to_gpr(&mut self, arg0: WritableGpr) -> Gpr;
    fn gpr_to_reg(&mut self, arg0: Gpr) -> Reg;
    fn gpr_to_gpr_mem(&mut self, arg0: Gpr) -> GprMem;
    fn gpr_to_gpr_mem_imm(&mut self, arg0: Gpr) -> GprMemImm;
    fn xmm_to_reg(&mut self, arg0: Xmm) -> Reg;
    fn xmm_to_xmm_mem_imm(&mut self, arg0: Xmm) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_imm(&mut self, arg0: &XmmMem) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_aligned(&mut self, arg0: &XmmMem) -> XmmMemAligned;
    fn xmm_mem_imm_to_xmm_mem_aligned_imm(&mut self, arg0: &XmmMemImm) -> XmmMemAlignedImm;
    fn temp_writable_gpr(&mut self) -> WritableGpr;
    fn temp_writable_xmm(&mut self) -> WritableXmm;
    fn reg_mem_to_xmm_mem(&mut self, arg0: &RegMem) -> XmmMem;
    fn reg_to_reg_mem_imm(&mut self, arg0: Reg) -> RegMemImm;
    fn gpr_mem_imm_new(&mut self, arg0: &RegMemImm) -> GprMemImm;
    fn xmm_mem_imm_new(&mut self, arg0: &RegMemImm) -> XmmMemImm;
    fn xmm_to_xmm_mem(&mut self, arg0: Xmm) -> XmmMem;
    fn xmm_mem_to_reg_mem(&mut self, arg0: &XmmMem) -> RegMem;
    fn gpr_mem_to_reg_mem(&mut self, arg0: &GprMem) -> RegMem;
    fn xmm_new(&mut self, arg0: Reg) -> Xmm;
    fn gpr_new(&mut self, arg0: Reg) -> Gpr;
    fn reg_mem_to_gpr_mem(&mut self, arg0: &RegMem) -> GprMem;
    fn reg_to_gpr_mem(&mut self, arg0: Reg) -> GprMem;
    fn put_in_xmm_mem(&mut self, arg0: Value) -> XmmMem;
    fn put_in_xmm_mem_imm(&mut self, arg0: Value) -> XmmMemImm;
    fn gpr_to_imm8_gpr(&mut self, arg0: Gpr) -> Imm8Gpr;
    fn imm8_to_imm8_gpr(&mut self, arg0: u8) -> Imm8Gpr;
    fn xmi_imm(&mut self, arg0: u32) -> XmmMemImm;
    fn type_register_class(&mut self, arg0: Type) -> Option<RegisterClass>;
    fn use_avx512vl(&mut self) -> bool;
    fn use_avx512dq(&mut self) -> bool;
    fn use_avx512f(&mut self) -> bool;
    fn use_avx512bitalg(&mut self) -> bool;
    fn use_avx512vbmi(&mut self) -> bool;
    fn use_lzcnt(&mut self) -> bool;
    fn use_bmi1(&mut self) -> bool;
    fn use_bmi2(&mut self) -> bool;
    fn use_popcnt(&mut self) -> bool;
    fn use_fma(&mut self) -> bool;
    fn use_ssse3(&mut self) -> bool;
    fn use_sse41(&mut self) -> bool;
    fn use_sse42(&mut self) -> bool;
    fn use_avx(&mut self) -> bool;
    fn use_avx2(&mut self) -> bool;
    fn imm8_from_value(&mut self, arg0: Value) -> Option<Imm8Reg>;
    fn const_to_type_masked_imm8(&mut self, arg0: u64, arg1: Type) -> Imm8Gpr;
    fn shift_mask(&mut self, arg0: Type) -> u8;
    fn shift_amount_masked(&mut self, arg0: Type, arg1: Imm64) -> u8;
    fn simm32_from_value(&mut self, arg0: Value) -> Option<GprMemImm>;
    fn sinkable_load(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sinkable_load_exact(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sink_load(&mut self, arg0: &SinkableLoad) -> SyntheticAmode;
    fn ext_mode(&mut self, arg0: u16, arg1: u16) -> ExtMode;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn nonzero_u64_fits_in_u32(&mut self, arg0: u64) -> Option<u64>;
    fn ty_int_bool_or_ref(&mut self, arg0: Type) -> Option<()>;
    fn atomic_rmw_op_to_mach_atomic_rmw_op(&mut self, arg0: &AtomicRmwOp) -> MachAtomicRmwOp;
    fn shuffle_0_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_0_15_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_16_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask_with_zeros(
        &mut self,
        arg0: &VecMask,
    ) -> Option<(VCodeConstant, VCodeConstant)>;
    fn const_to_synthetic_amode(&mut self, arg0: VCodeConstant) -> SyntheticAmode;
    fn preg_rbp(&mut self) -> PReg;
    fn preg_rsp(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn libcall_1(&mut self, arg0: &LibCall, arg1: Reg) -> Reg;
    fn libcall_2(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg) -> Reg;
    fn libcall_3(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg, arg3: Reg) -> Reg;
    fn ishl_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ishl_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn ushr_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ushr_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn vconst_all_ones_or_all_zeros(&mut self, arg0: Constant) -> Option<()>;
    fn insert_i8x16_lane_hole(&mut self, arg0: u8) -> VCodeConstant;
    fn sse_insertps_lane_imm(&mut self, arg0: u8) -> u8;
    fn pblendw_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn palignr_imm_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_rev_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 357.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 399.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 418.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 426.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/x64/inst.isle line 8.
#[derive(Clone)]
pub enum MInst {
    Nop {
        len: u8,
    },
    AluRmiR {
        size: OperandSize,
        op: AluRmiROpcode,
        src1: Gpr,
        src2: GprMemImm,
        dst: WritableGpr,
    },
    AluRM {
        size: OperandSize,
        op: AluRmiROpcode,
        src1_dst: SyntheticAmode,
        src2: Gpr,
    },
    AluRmRVex {
        size: OperandSize,
        op: AluRmROpcode,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    AluConstOp {
        op: AluRmiROpcode,
        size: OperandSize,
        dst: WritableGpr,
    },
    UnaryRmR {
        size: OperandSize,
        op: UnaryRmROpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRVex {
        size: OperandSize,
        op: UnaryRmRVexOpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRImmVex {
        size: OperandSize,
        op: UnaryRmRImmVexOpcode,
        src: GprMem,
        dst: WritableGpr,
        imm: u8,
    },
    Not {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Neg {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Div {
        size: OperandSize,
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    Div8 {
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend: Gpr,
        dst: WritableGpr,
    },
    Mul {
        size: OperandSize,
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    Mul8 {
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMul {
        size: OperandSize,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMulImm {
        size: OperandSize,
        src1: GprMem,
        src2: i32,
        dst: WritableGpr,
    },
    CheckedSRemSeq {
        size: OperandSize,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        divisor: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    CheckedSRemSeq8 {
        dividend: Gpr,
        divisor: Gpr,
        dst: WritableGpr,
    },
    SignExtendData {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Imm {
        dst_size: OperandSize,
        simm64: u64,
        dst: WritableGpr,
    },
    MovRR {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    MovFromPReg {
        src: PReg,
        dst: WritableGpr,
    },
    MovToPReg {
        src: Gpr,
        dst: PReg,
    },
    MovzxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    Mov64MR {
        src: SyntheticAmode,
        dst: WritableGpr,
    },
    LoadEffectiveAddress {
        addr: SyntheticAmode,
        dst: WritableGpr,
        size: OperandSize,
    },
    MovsxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    MovImmM {
        size: OperandSize,
        simm32: i32,
        dst: SyntheticAmode,
    },
    MovRM {
        size: OperandSize,
        src: Gpr,
        dst: SyntheticAmode,
    },
    ShiftR {
        size: OperandSize,
        kind: ShiftKind,
        src: Gpr,
        num_bits: Imm8Gpr,
        dst: WritableGpr,
    },
    XmmRmiReg {
        opcode: SseOpcode,
        src1: Xmm,
        src2: XmmMemAlignedImm,
        dst: WritableXmm,
    },
    CmpRmiR {
        size: OperandSize,
        opcode: CmpOpcode,
        src1: Gpr,
        src2: GprMemImm,
    },
    Setcc {
        cc: CC,
        dst: WritableGpr,
    },
    Bswap {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Cmove {
        size: OperandSize,
        cc: CC,
        consequent: GprMem,
        alternative: Gpr,
        dst: WritableGpr,
    },
    XmmCmove {
        ty: Type,
        cc: CC,
        consequent: Xmm,
        alternative: Xmm,
        dst: WritableXmm,
    },
    Push64 {
        src: GprMemImm,
    },
    Pop64 {
        dst: WritableGpr,
    },
    StackProbeLoop {
        tmp: WritableReg,
        frame_size: u32,
        guard_size: u32,
    },
    XmmRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmRmRUnaligned {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlend {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmRmiRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMemImm,
        dst: WritableXmm,
    },
    XmmRmRImmVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmVexPinsr {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmRVex3 {
        op: AvxOpcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlendVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmRVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmMovRMVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGprImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmmVex {
        op: AvxOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    XmmToGprVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmCmpRmRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
    },
    XmmRmREvex {
        op: Avx512Opcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmEvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmREvex3 {
        op: Avx512Opcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmUnaryRmRUnaligned {
        op: SseOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImm {
        op: SseOpcode,
        src: XmmMemAligned,
        imm: u8,
        dst: WritableXmm,
    },
    XmmUnaryRmREvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmMovRM {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImm {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGpr {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmToGprImm {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmm {
        op: SseOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    CvtIntToFloat {
        op: SseOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtIntToFloatVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtUint64ToFloatSeq {
        dst_size: OperandSize,
        src: Gpr,
        dst: WritableXmm,
        tmp_gpr1: WritableGpr,
        tmp_gpr2: WritableGpr,
    },
    CvtFloatToSintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
    },
    CvtFloatToUintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
        tmp_xmm2: WritableXmm,
    },
    XmmMinMaxSeq {
        size: OperandSize,
        is_min: bool,
        lhs: Xmm,
        rhs: Xmm,
        dst: WritableXmm,
    },
    XmmCmpRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
    },
    XmmRmRImm {
        op: SseOpcode,
        src1: Reg,
        src2: RegMem,
        dst: WritableReg,
        imm: u8,
        size: OperandSize,
    },
    CallKnown {
        dest: ExternalName,
        opcode: Opcode,
        info: BoxCallInfo,
    },
    CallUnknown {
        dest: RegMem,
        opcode: Opcode,
        info: BoxCallInfo,
    },
    ReturnCallKnown {
        callee: ExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallUnknown {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret {
        stack_bytes_to_pop: u32,
    },
    JmpKnown {
        dst: MachLabel,
    },
    JmpIf {
        cc: CC,
        taken: MachLabel,
    },
    JmpCond {
        cc: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpTableSeq {
        idx: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        default_target: MachLabel,
        targets: BoxVecMachLabel,
    },
    JmpUnknown {
        target: RegMem,
    },
    TrapIf {
        cc: CC,
        trap_code: TrapCode,
    },
    TrapIfAnd {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    TrapIfOr {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    Hlt,
    Ud2 {
        trap_code: TrapCode,
    },
    LoadExtName {
        dst: WritableReg,
        name: BoxExternalName,
        offset: i64,
        distance: RelocDistance,
    },
    LockCmpxchg {
        ty: Type,
        replacement: Reg,
        expected: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    AtomicRmwSeq {
        ty: Type,
        op: MachAtomicRmwOp,
        mem: SyntheticAmode,
        operand: Reg,
        temp: WritableReg,
        dst_old: WritableReg,
    },
    Fence {
        kind: FenceKind,
    },
    XmmUninitializedValue {
        dst: WritableXmm,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    CoffTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
        tmp: WritableGpr,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
}

/// Internal type DivSignedness: defined at src/isa/x64/inst.isle line 737.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum DivSignedness {
    Signed,
    Unsigned,
}

/// Internal type AluRmROpcode: defined at src/isa/x64/inst.isle line 773.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluRmROpcode {
    Andn,
    Sarx,
    Shrx,
    Shlx,
    Bzhi,
}

/// Internal type UnaryRmRVexOpcode: defined at src/isa/x64/inst.isle line 787.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRVexOpcode {
    Blsi,
    Blsmsk,
    Blsr,
}

/// Internal type UnaryRmRImmVexOpcode: defined at src/isa/x64/inst.isle line 792.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRImmVexOpcode {
    Rorx,
}

/// Internal type Amode: defined at src/isa/x64/inst.isle line 1039.
#[derive(Clone, Debug)]
pub enum Amode {
    ImmReg {
        simm32: i32,
        base: Reg,
        flags: MemFlags,
    },
    ImmRegRegShift {
        simm32: i32,
        base: Gpr,
        index: Gpr,
        shift: u8,
        flags: MemFlags,
    },
    RipRelative {
        target: MachLabel,
    },
}

/// Internal type AvxOpcode: defined at src/isa/x64/inst.isle line 1225.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AvxOpcode {
    Vfmadd213ss,
    Vfmadd213sd,
    Vfmadd213ps,
    Vfmadd213pd,
    Vfmadd132ss,
    Vfmadd132sd,
    Vfmadd132ps,
    Vfmadd132pd,
    Vfnmadd213ss,
    Vfnmadd213sd,
    Vfnmadd213ps,
    Vfnmadd213pd,
    Vfnmadd132ss,
    Vfnmadd132sd,
    Vfnmadd132ps,
    Vfnmadd132pd,
    Vcmpps,
    Vcmppd,
    Vpsrlw,
    Vpsrld,
    Vpsrlq,
    Vpaddb,
    Vpaddw,
    Vpaddd,
    Vpaddq,
    Vpaddsb,
    Vpaddsw,
    Vpaddusb,
    Vpaddusw,
    Vpsubb,
    Vpsubw,
    Vpsubd,
    Vpsubq,
    Vpsubsb,
    Vpsubsw,
    Vpsubusb,
    Vpsubusw,
    Vpavgb,
    Vpavgw,
    Vpand,
    Vandps,
    Vandpd,
    Vpor,
    Vorps,
    Vorpd,
    Vpxor,
    Vxorps,
    Vxorpd,
    Vpmullw,
    Vpmulld,
    Vpmulhw,
    Vpmulhd,
    Vpmulhrsw,
    Vpmulhuw,
    Vpmuldq,
    Vpmuludq,
    Vpunpckhwd,
    Vpunpcklwd,
    Vunpcklps,
    Vunpcklpd,
    Vunpckhps,
    Vandnps,
    Vandnpd,
    Vpandn,
    Vaddps,
    Vaddpd,
    Vsubps,
    Vsubpd,
    Vmulps,
    Vmulpd,
    Vdivps,
    Vdivpd,
    Vpcmpeqb,
    Vpcmpeqw,
    Vpcmpeqd,
    Vpcmpeqq,
    Vpcmpgtb,
    Vpcmpgtw,
    Vpcmpgtd,
    Vpcmpgtq,
    Vminps,
    Vminpd,
    Vmaxps,
    Vmaxpd,
    Vblendvpd,
    Vblendvps,
    Vpblendvb,
    Vmovlhps,
    Vpmaxsb,
    Vpmaxsw,
    Vpmaxsd,
    Vpminsb,
    Vpminsw,
    Vpminsd,
    Vpmaxub,
    Vpmaxuw,
    Vpmaxud,
    Vpminub,
    Vpminuw,
    Vpminud,
    Vpunpcklbw,
    Vpunpckhbw,
    Vpacksswb,
    Vpackssdw,
    Vpackuswb,
    Vpackusdw,
    Vpalignr,
    Vpinsrb,
    Vpinsrw,
    Vpinsrd,
    Vpinsrq,
    Vpmaddwd,
    Vpmaddubsw,
    Vinsertps,
    Vpshufb,
    Vshufps,
    Vpsllw,
    Vpslld,
    Vpsllq,
    Vpsraw,
    Vpsrad,
    Vpmovsxbw,
    Vpmovzxbw,
    Vpmovsxwd,
    Vpmovzxwd,
    Vpmovsxdq,
    Vpmovzxdq,
    Vaddss,
    Vaddsd,
    Vmulss,
    Vmulsd,
    Vsubss,
    Vsubsd,
    Vdivss,
    Vdivsd,
    Vpabsb,
    Vpabsw,
    Vpabsd,
    Vminss,
    Vminsd,
    Vmaxss,
    Vmaxsd,
    Vsqrtps,
    Vsqrtpd,
    Vroundps,
    Vroundpd,
    Vcvtdq2pd,
    Vcvtdq2ps,
    Vcvtpd2ps,
    Vcvtps2pd,
    Vcvttpd2dq,
    Vcvttps2dq,
    Vphaddw,
    Vphaddd,
    Vpunpckhdq,
    Vpunpckldq,
    Vpunpckhqdq,
    Vpunpcklqdq,
    Vpshuflw,
    Vpshufhw,
    Vpshufd,
    Vmovss,
    Vmovsd,
    Vmovups,
    Vmovupd,
    Vmovdqu,
    Vpextrb,
    Vpextrw,
    Vpextrd,
    Vpextrq,
    Vpblendw,
    Vmovddup,
    Vpbroadcastb,
    Vpbroadcastw,
    Vpbroadcastd,
    Vbroadcastss,
    Vmovd,
    Vmovq,
    Vmovmskps,
    Vmovmskpd,
    Vpmovmskb,
    Vcvtsi2ss,
    Vcvtsi2sd,
    Vcvtss2sd,
    Vcvtsd2ss,
    Vsqrtss,
    Vsqrtsd,
    Vroundss,
    Vroundsd,
    Vucomiss,
    Vucomisd,
    Vptest,
}

/// Internal type Avx512Opcode: defined at src/isa/x64/inst.isle line 1420.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Avx512Opcode {
    Vcvtudq2ps,
    Vpabsq,
    Vpermi2b,
    Vpmullq,
    Vpopcntb,
    Vpsraq,
    VpsraqImm,
}

/// Internal type RegisterClass: defined at src/isa/x64/inst.isle line 1696.
#[derive(Clone, Debug)]
pub enum RegisterClass {
    Gpr { single_register: bool },
    Xmm,
}

/// Internal type ExtendKind: defined at src/isa/x64/inst.isle line 2146.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendKind {
    Sign,
    Zero,
}

/// Internal type IcmpCondResult: defined at src/isa/x64/inst.isle line 4738.
#[derive(Clone, Debug)]
pub enum IcmpCondResult {
    Condition { producer: ProducesFlags, cc: CC },
}

/// Internal type FcmpCondResult: defined at src/isa/x64/inst.isle line 4830.
#[derive(Clone, Debug)]
pub enum FcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
    AndCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
    OrCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 341.
    return v5;
}

// Generated as internal constructor for term is_ref_type.
pub fn constructor_is_ref_type<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        R32 => {
            // Rule at src/prelude.isle line 348.
            return true;
        }
        R64 => {
            // Rule at src/prelude.isle line 349.
            return true;
        }
        _ => {}
    }
    // Rule at src/prelude.isle line 350.
    return false;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 367.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 369.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 372.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 366"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 380.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 385.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 387.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 389.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 384"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 414.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 413"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 444.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 445.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 443"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 450.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 452.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 449"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 465.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 459.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 458"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 496.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 502.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 514.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 530.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 537.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 550.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 490.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 482.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 480"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 568.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 575.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 586.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 591.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 596.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 601.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 606.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 584"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 615.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 623.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 632.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 640.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 649.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 709.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 717.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 726.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 734.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 743.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 662.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 670.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 679.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 687.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 696.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 756.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 764.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 773.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 781.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 790.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 802.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 810.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 827.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 819.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 835.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 844.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 612"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1044.
    return v2;
}

// Generated as internal constructor for term operand_size_bits.
pub fn constructor_operand_size_bits<C: Context>(ctx: &mut C, arg0: &OperandSize) -> u16 {
    match arg0 {
        &OperandSize::Size8 => {
            // Rule at src/isa/x64/inst.isle line 759.
            return 0x8;
        }
        &OperandSize::Size16 => {
            // Rule at src/isa/x64/inst.isle line 760.
            return 0x10;
        }
        &OperandSize::Size32 => {
            // Rule at src/isa/x64/inst.isle line 761.
            return 0x20;
        }
        &OperandSize::Size64 => {
            // Rule at src/isa/x64/inst.isle line 762.
            return 0x40;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size_bits", "src/isa/x64/inst.isle line 758"
    )
}

// Generated as internal constructor for term reg_mem_to_reg_mem_imm.
pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(ctx: &mut C, arg0: &RegMem) -> RegMemImm {
    match arg0 {
        &RegMem::Reg { reg: v1 } => {
            let v2 = RegMemImm::Reg { reg: v1 };
            // Rule at src/isa/x64/inst.isle line 1013.
            return v2;
        }
        &RegMem::Mem { addr: ref v3 } => {
            let v4 = RegMemImm::Mem { addr: v3.clone() };
            // Rule at src/isa/x64/inst.isle line 1015.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "reg_mem_to_reg_mem_imm", "src/isa/x64/inst.isle line 1012"
    )
}

// Generated as internal constructor for term to_amode.
pub fn constructor_to_amode<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v12 = &constructor_to_amode_add(ctx, arg0, v9.0, v9.1, arg2);
                // Rule at src/isa/x64/inst.isle line 1101.
                return v12.clone();
            }
        }
    }
    let v3 = &constructor_amode_imm_reg(ctx, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1099.
    return v3.clone();
}

// Generated as internal constructor for term to_amode_add.
pub fn constructor_to_amode_add<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v5 = C::def_inst(ctx, arg2);
    if let Some(v6) = v5 {
        let v7 = &C::inst_data(ctx, v6);
        if let &InstructionData::Binary {
            opcode: ref v55,
            args: ref v56,
        } = v7
        {
            if let &Opcode::Iadd = v55 {
                let v57 = C::unpack_value_array_2(ctx, v56);
                let v71 = C::def_inst(ctx, v57.0);
                if let Some(v72) = v71 {
                    let v73 = &C::inst_data(ctx, v72);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v74,
                        imm: v75,
                    } = v73
                    {
                        if let &Opcode::Iconst = v74 {
                            let v76 = C::simm32(ctx, v75);
                            if let Some(v77) = v76 {
                                let v12 = C::offset32_to_i32(ctx, arg3);
                                let v78 = C::s32_add_fallible(ctx, v12, v77);
                                if let Some(v79) = v78 {
                                    let v80 = C::i32_to_offset32(ctx, v79);
                                    let v81 = &constructor_amode_imm_reg_reg_shift(
                                        ctx, arg0, arg1, v57.1, v80,
                                    );
                                    // Rule at src/isa/x64/inst.isle line 1134.
                                    return v81.clone();
                                }
                            }
                        }
                    }
                }
                let v60 = C::def_inst(ctx, v57.1);
                if let Some(v61) = v60 {
                    let v62 = &C::inst_data(ctx, v61);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v63,
                        imm: v64,
                    } = v62
                    {
                        if let &Opcode::Iconst = v63 {
                            let v65 = C::simm32(ctx, v64);
                            if let Some(v66) = v65 {
                                let v12 = C::offset32_to_i32(ctx, arg3);
                                let v67 = C::s32_add_fallible(ctx, v12, v66);
                                if let Some(v68) = v67 {
                                    let v69 = C::i32_to_offset32(ctx, v68);
                                    let v70 = &constructor_amode_imm_reg_reg_shift(
                                        ctx, arg0, arg1, v57.0, v69,
                                    );
                                    // Rule at src/isa/x64/inst.isle line 1131.
                                    return v70.clone();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v17 = C::def_inst(ctx, arg1);
    if let Some(v18) = v17 {
        let v19 = &C::inst_data(ctx, v18);
        match v19 {
            &InstructionData::Binary {
                opcode: ref v28,
                args: ref v29,
            } => {
                if let &Opcode::Iadd = v28 {
                    let v30 = C::unpack_value_array_2(ctx, v29);
                    let v44 = C::def_inst(ctx, v30.0);
                    if let Some(v45) = v44 {
                        let v46 = &C::inst_data(ctx, v45);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v47,
                            imm: v48,
                        } = v46
                        {
                            if let &Opcode::Iconst = v47 {
                                let v49 = C::simm32(ctx, v48);
                                if let Some(v50) = v49 {
                                    let v12 = C::offset32_to_i32(ctx, arg3);
                                    let v51 = C::s32_add_fallible(ctx, v12, v50);
                                    if let Some(v52) = v51 {
                                        let v53 = C::i32_to_offset32(ctx, v52);
                                        let v54 = &constructor_amode_imm_reg_reg_shift(
                                            ctx, arg0, v30.1, arg2, v53,
                                        );
                                        // Rule at src/isa/x64/inst.isle line 1128.
                                        return v54.clone();
                                    }
                                }
                            }
                        }
                    }
                    let v33 = C::def_inst(ctx, v30.1);
                    if let Some(v34) = v33 {
                        let v35 = &C::inst_data(ctx, v34);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v36,
                            imm: v37,
                        } = v35
                        {
                            if let &Opcode::Iconst = v36 {
                                let v38 = C::simm32(ctx, v37);
                                if let Some(v39) = v38 {
                                    let v12 = C::offset32_to_i32(ctx, arg3);
                                    let v40 = C::s32_add_fallible(ctx, v12, v39);
                                    if let Some(v41) = v40 {
                                        let v42 = C::i32_to_offset32(ctx, v41);
                                        let v43 = &constructor_amode_imm_reg_reg_shift(
                                            ctx, arg0, v30.0, arg2, v42,
                                        );
                                        // Rule at src/isa/x64/inst.isle line 1125.
                                        return v43.clone();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v20,
                imm: v21,
            } => {
                if let &Opcode::Iconst = v20 {
                    let v22 = C::simm32(ctx, v21);
                    if let Some(v23) = v22 {
                        let v12 = C::offset32_to_i32(ctx, arg3);
                        let v24 = C::s32_add_fallible(ctx, v12, v23);
                        if let Some(v25) = v24 {
                            let v26 = C::i32_to_offset32(ctx, v25);
                            let v27 = &constructor_amode_imm_reg(ctx, arg0, arg2, v26);
                            // Rule at src/isa/x64/inst.isle line 1122.
                            return v27.clone();
                        }
                    }
                }
            }
            _ => {}
        }
    }
    if let Some(v6) = v5 {
        let v7 = &C::inst_data(ctx, v6);
        if let &InstructionData::UnaryImm {
            opcode: ref v8,
            imm: v9,
        } = v7
        {
            if let &Opcode::Iconst = v8 {
                let v10 = C::simm32(ctx, v9);
                if let Some(v11) = v10 {
                    let v12 = C::offset32_to_i32(ctx, arg3);
                    let v13 = C::s32_add_fallible(ctx, v12, v11);
                    if let Some(v14) = v13 {
                        let v15 = C::i32_to_offset32(ctx, v14);
                        let v16 = &constructor_amode_imm_reg(ctx, arg0, arg1, v15);
                        // Rule at src/isa/x64/inst.isle line 1119.
                        return v16.clone();
                    }
                }
            }
        }
    }
    let v4 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/x64/inst.isle line 1117.
    return v4.clone();
}

// Generated as internal constructor for term amode_imm_reg.
pub fn constructor_amode_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v6 = C::def_inst(ctx, arg1);
    if let Some(v7) = v6 {
        let v8 = &C::inst_data(ctx, v7);
        if let &InstructionData::Binary {
            opcode: ref v9,
            args: ref v10,
        } = v8
        {
            if let &Opcode::Iadd = v9 {
                let v11 = C::unpack_value_array_2(ctx, v10);
                let v14 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v11.0, v11.1, arg2);
                // Rule at src/isa/x64/inst.isle line 1144.
                return v14.clone();
            }
        }
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v3 = C::offset32_to_i32(ctx, arg2);
    let v5 = Amode::ImmReg {
        simm32: v3,
        base: v4,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 1142.
    return v5;
}

// Generated as internal constructor for term amode_imm_reg_reg_shift.
pub fn constructor_amode_imm_reg_reg_shift<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v30 = C::def_inst(ctx, arg1);
    if let Some(v31) = v30 {
        let v32 = &C::inst_data(ctx, v31);
        if let &InstructionData::Binary {
            opcode: ref v33,
            args: ref v34,
        } = v32
        {
            if let &Opcode::Ishl = v33 {
                let v35 = C::unpack_value_array_2(ctx, v34);
                let v38 = C::def_inst(ctx, v35.1);
                if let Some(v39) = v38 {
                    let v40 = &C::inst_data(ctx, v39);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v41,
                        imm: v42,
                    } = v40
                    {
                        if let &Opcode::Iconst = v41 {
                            let v43 = C::uimm8(ctx, v42);
                            if let Some(v44) = v43 {
                                let v45 = C::u8_as_u32(ctx, v44);
                                let v46 = C::u32_lteq(ctx, v45, 0x3);
                                if let Some(v47) = v46 {
                                    let v48 = constructor_put_in_gpr(ctx, arg2);
                                    let v49 = constructor_put_in_gpr(ctx, v35.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v50 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v48,
                                        index: v49,
                                        shift: v44,
                                        flags: arg0,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1153.
                                    return v50;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v9 = C::def_inst(ctx, arg2);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Binary {
            opcode: ref v12,
            args: ref v13,
        } = v11
        {
            if let &Opcode::Ishl = v12 {
                let v14 = C::unpack_value_array_2(ctx, v13);
                let v17 = C::def_inst(ctx, v14.1);
                if let Some(v18) = v17 {
                    let v19 = &C::inst_data(ctx, v18);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v20,
                        imm: v21,
                    } = v19
                    {
                        if let &Opcode::Iconst = v20 {
                            let v22 = C::uimm8(ctx, v21);
                            if let Some(v23) = v22 {
                                let v24 = C::u8_as_u32(ctx, v23);
                                let v26 = C::u32_lteq(ctx, v24, 0x3);
                                if let Some(v27) = v26 {
                                    let v5 = constructor_put_in_gpr(ctx, arg1);
                                    let v28 = constructor_put_in_gpr(ctx, v14.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v29 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v5,
                                        index: v28,
                                        shift: v23,
                                        flags: arg0,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1150.
                                    return v29;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = constructor_put_in_gpr(ctx, arg2);
    let v4 = C::offset32_to_i32(ctx, arg3);
    let v8 = Amode::ImmRegRegShift {
        simm32: v4,
        base: v5,
        index: v6,
        shift: 0x0,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 1148.
    return v8;
}

// Generated as internal constructor for term put_masked_in_imm8_gpr.
pub fn constructor_put_masked_in_imm8_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> Imm8Gpr {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3
        {
            if let &Opcode::Iconst = v4 {
                let v6 = C::u64_from_imm64(ctx, v5);
                let v8 = &C::const_to_type_masked_imm8(ctx, v6, arg1);
                // Rule at src/isa/x64/inst.isle line 1189.
                return v8.clone();
            }
        }
    }
    let v9 = C::fits_in_16(ctx, arg1);
    if let Some(v10) = v9 {
        let v12 = C::put_in_regs(ctx, arg0);
        let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
        let v15 = C::shift_mask(ctx, v10);
        let v16 = C::u8_as_u32(ctx, v15);
        let v17 = RegMemImm::Imm { simm32: v16 };
        let v18 = &C::gpr_mem_imm_new(ctx, &v17);
        let v19 = constructor_x64_and(ctx, I64, v14, v18);
        let v20 = &C::gpr_to_imm8_gpr(ctx, v19);
        // Rule at src/isa/x64/inst.isle line 1191.
        return v20.clone();
    }
    let v12 = C::put_in_regs(ctx, arg0);
    let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
    let v21 = &C::gpr_to_imm8_gpr(ctx, v14);
    // Rule at src/isa/x64/inst.isle line 1193.
    return v21.clone();
}

// Generated as internal constructor for term reg_to_gpr_mem_imm.
pub fn constructor_reg_to_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Reg) -> GprMemImm {
    let v1 = C::gpr_new(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1613.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr.
pub fn constructor_put_in_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1620.
    return v2;
}

// Generated as internal constructor for term put_in_gpr_mem.
pub fn constructor_put_in_gpr_mem<C: Context>(ctx: &mut C, arg0: Value) -> GprMem {
    let v1 = &C::put_in_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1627.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr_mem_imm.
pub fn constructor_put_in_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Value) -> GprMemImm {
    let v1 = &C::put_in_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1634.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm.
pub fn constructor_put_in_xmm<C: Context>(ctx: &mut C, arg0: Value) -> Xmm {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xmm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1641.
    return v2;
}

// Generated as internal constructor for term output_gpr.
pub fn constructor_output_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> InstOutput {
    let v1 = C::gpr_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1658.
    return v2;
}

// Generated as internal constructor for term value_gprs.
pub fn constructor_value_gprs<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> ValueRegs {
    let v2 = C::gpr_to_reg(ctx, arg0);
    let v3 = C::gpr_to_reg(ctx, arg1);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/x64/inst.isle line 1663.
    return v4;
}

// Generated as internal constructor for term output_xmm.
pub fn constructor_output_xmm<C: Context>(ctx: &mut C, arg0: Xmm) -> InstOutput {
    let v1 = C::xmm_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1668.
    return v2;
}

// Generated as internal constructor for term value_regs_get_gpr.
pub fn constructor_value_regs_get_gpr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: usize,
) -> Gpr {
    let v2 = C::value_regs_get(ctx, arg0, arg1);
    let v3 = C::gpr_new(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1675.
    return v3;
}

// Generated as internal constructor for term lo_gpr.
pub fn constructor_lo_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = constructor_lo_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1688.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem_imm.
pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMemImm {
    let v1 = &constructor_sink_load_to_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1819.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_xmm_mem.
pub fn constructor_sink_load_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> XmmMem {
    let v1 = &constructor_sink_load_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1823.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem.
pub fn constructor_sink_load_to_reg_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> RegMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    // Rule at src/isa/x64/inst.isle line 1827.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem.
pub fn constructor_sink_load_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> GprMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    let v3 = &C::reg_mem_to_gpr_mem(ctx, &v2);
    // Rule at src/isa/x64/inst.isle line 1830.
    return v3.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem_imm.
pub fn constructor_sink_load_to_reg_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> RegMemImm {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMemImm::Mem { addr: v1.clone() };
    // Rule at src/isa/x64/inst.isle line 1833.
    return v2;
}

// Generated as internal constructor for term xmm_uninit_value.
pub fn constructor_xmm_uninit_value<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = MInst::XmmUninitializedValue { dst: v0 };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 1845.
    return v3;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
    arg1: i64,
    arg2: RelocDistance,
) -> Reg {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::writable_gpr_to_reg(ctx, v3);
    let v5 = C::box_external_name(ctx, arg0);
    let v6 = MInst::LoadExtName {
        dst: v4,
        name: v5,
        offset: arg1,
        distance: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1852.
    return v8;
}

// Generated as internal constructor for term mov64_mr.
pub fn constructor_mov64_mr<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::Mov64MR {
        src: arg0.clone(),
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1859.
    return v4;
}

// Generated as internal constructor for term alu_rmi_r.
pub fn constructor_alu_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1866.
    return v8;
}

// Generated as internal constructor for term alu_rm_r_vex.
pub fn constructor_alu_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmROpcode,
    arg2: Gpr,
    arg3: &GprMem,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmRVex {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1874.
    return v8;
}

// Generated as internal constructor for term xmm_rm_r.
pub fn constructor_xmm_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1882.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_unaligned.
pub fn constructor_xmm_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmRUnaligned {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1889.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_blend.
pub fn constructor_xmm_rm_r_blend<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlend {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1896.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_blend_vex.
pub fn constructor_xmm_rmr_blend_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlendVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1903.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_vex.
pub fn constructor_xmm_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1910.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_vex.
pub fn constructor_xmm_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1917.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_imm.
pub fn constructor_xmm_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Reg,
    arg2: &RegMem,
    arg3: u8,
    arg4: &OperandSize,
) -> Xmm {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::writable_xmm_to_reg(ctx, v5);
    let v7 = MInst::XmmRmRImm {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v6,
        imm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xmm_to_xmm(ctx, v5);
    // Rule at src/isa/x64/inst.isle line 1924.
    return v9;
}

// Generated as internal constructor for term xmm_vex_pinsr.
pub fn constructor_xmm_vex_pinsr<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmVexPinsr {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1936.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm.
pub fn constructor_xmm_unary_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImm {
        op: arg0.clone(),
        src: arg1.clone(),
        imm: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1943.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r.
pub fn constructor_xmm_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1950.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_unaligned.
pub fn constructor_xmm_unary_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRUnaligned {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1957.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_evex.
pub fn constructor_xmm_unary_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmREvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1964.
    return v5;
}

// Generated as internal constructor for term xmm_rm_r_evex.
pub fn constructor_xmm_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmREvex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1971.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_evex.
pub fn constructor_xmm_unary_rm_r_imm_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmEvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1981.
    return v6;
}

// Generated as internal constructor for term xmm_rmi_xmm.
pub fn constructor_xmm_rmi_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAlignedImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiReg {
        opcode: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1988.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm.
pub fn constructor_xmm_to_gpr_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImm {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1998.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm_vex.
pub fn constructor_xmm_to_gpr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImmVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2005.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm.
pub fn constructor_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmm {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2012.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm_vex.
pub fn constructor_gpr_to_xmm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2019.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr.
pub fn constructor_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGpr {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2026.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_vex.
pub fn constructor_xmm_to_gpr_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2033.
    return v6;
}

// Generated as internal constructor for term xmm_min_max_seq.
pub fn constructor_xmm_min_max_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Xmm,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::XmmMinMaxSeq {
        size: v5.clone(),
        is_min: arg1,
        lhs: arg2,
        rhs: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2040.
    return v8;
}

// Generated as internal constructor for term xmm_rmir_vex.
pub fn constructor_xmm_rmir_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMemImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2048.
    return v6;
}

// Generated as internal constructor for term xmm_rmr_imm_vex.
pub fn constructor_xmm_rmr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRImmVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2055.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_vex3.
pub fn constructor_xmm_rmr_vex3<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRVex3 {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2,
        src3: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2062.
    return v7;
}

// Generated as internal constructor for term unary_rm_r.
pub fn constructor_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmROpcode,
    arg1: Gpr,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v5 = MInst::UnaryRmR {
        size: arg2.clone(),
        op: arg0.clone(),
        src: v4.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2069.
    return v7;
}

// Generated as internal constructor for term unary_rm_r_vex.
pub fn constructor_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::UnaryRmRVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2076.
    return v6;
}

// Generated as internal constructor for term unary_rm_r_imm_vex.
pub fn constructor_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRImmVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
    arg3: u8,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::UnaryRmRImmVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2083.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float.
pub fn constructor_cvt_int_to_float<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloat {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2089.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float_vex.
pub fn constructor_cvt_int_to_float_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloatVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2095.
    return v7;
}

// Generated as internal constructor for term cvt_u64_to_float_seq.
pub fn constructor_cvt_u64_to_float_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    let v2 = &C::raw_operand_size_of_type(ctx, arg0);
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CvtUint64ToFloatSeq {
        dst_size: v2.clone(),
        src: arg1,
        dst: v3,
        tmp_gpr1: v4,
        tmp_gpr2: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2101.
    return v8;
}

// Generated as internal constructor for term cvt_float_to_uint_seq.
pub fn constructor_cvt_float_to_uint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_xmm(ctx);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = constructor_put_in_xmm(ctx, arg1);
    let v11 = MInst::CvtFloatToUintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v10,
        dst: v6,
        tmp_gpr: v9,
        tmp_xmm: v7,
        tmp_xmm2: v8,
    };
    let v12 = C::emit(ctx, &v11);
    let v13 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 2110.
    return v13;
}

// Generated as internal constructor for term cvt_float_to_sint_seq.
pub fn constructor_cvt_float_to_sint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_gpr(ctx);
    let v9 = constructor_put_in_xmm(ctx, arg1);
    let v10 = MInst::CvtFloatToSintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v9,
        dst: v6,
        tmp_gpr: v8,
        tmp_xmm: v7,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 2122.
    return v12;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MovFromPReg { src: arg0, dst: v1 };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2134.
    return v4;
}

// Generated as internal constructor for term extend_to_gpr.
pub fn constructor_extend_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: &ExtendKind,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    if v1 == arg1 {
        let v4 = constructor_put_in_gpr(ctx, arg0);
        // Rule at src/isa/x64/inst.isle line 2158.
        return v4;
    }
    if v1 == I32 {
        if arg1 == I64 {
            if let &ExtendKind::Zero = arg2 {
                let v5 = constructor_value32_zeros_upper32(ctx, arg0);
                if v5 == true {
                    let v6 = C::put_in_reg(ctx, arg0);
                    let v10 = C::add_range_fact(ctx, v6, 0x40, 0x0, 0xFFFFFFFF);
                    let v11 = C::gpr_new(ctx, v10);
                    // Rule at src/isa/x64/inst.isle line 2166.
                    return v11;
                }
            }
        }
    }
    let v13 = &C::operand_size_of_type_32_64(ctx, arg1);
    let v14 = constructor_operand_size_bits(ctx, v13);
    let v12 = C::ty_bits_u16(ctx, v1);
    let v15 = &C::ext_mode(ctx, v12, v14);
    let v16 = &constructor_put_in_gpr_mem(ctx, arg0);
    let v17 = constructor_extend(ctx, arg2, arg1, v15, v16);
    // Rule at src/isa/x64/inst.isle line 2170.
    return v17;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: &ExtendKind,
    arg1: Type,
    arg2: &ExtMode,
    arg3: &GprMem,
) -> Gpr {
    match arg0 {
        &ExtendKind::Sign => {
            let v5 = constructor_x64_movsx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2190.
            return v5;
        }
        &ExtendKind::Zero => {
            let v4 = constructor_x64_movzx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2186.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/x64/inst.isle line 2183"
    )
}

// Generated as internal constructor for term value32_zeros_upper32.
pub fn constructor_value32_zeros_upper32<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Binary {
                opcode: ref v4,
                args: ref v5,
            } => {
                match v4 {
                    &Opcode::Iadd => {
                        // Rule at src/isa/x64/inst.isle line 2197.
                        return true;
                    }
                    &Opcode::Isub => {
                        // Rule at src/isa/x64/inst.isle line 2198.
                        return true;
                    }
                    &Opcode::Imul => {
                        // Rule at src/isa/x64/inst.isle line 2199.
                        return true;
                    }
                    &Opcode::Band => {
                        // Rule at src/isa/x64/inst.isle line 2200.
                        return true;
                    }
                    &Opcode::Bor => {
                        // Rule at src/isa/x64/inst.isle line 2201.
                        return true;
                    }
                    &Opcode::Bxor => {
                        // Rule at src/isa/x64/inst.isle line 2202.
                        return true;
                    }
                    &Opcode::Ishl => {
                        // Rule at src/isa/x64/inst.isle line 2203.
                        return true;
                    }
                    &Opcode::Ushr => {
                        // Rule at src/isa/x64/inst.isle line 2204.
                        return true;
                    }
                    _ => {}
                }
            }
            &InstructionData::Load {
                opcode: ref v10,
                arg: v11,
                flags: v12,
                offset: v13,
            } => {
                if let &Opcode::Uload32 = v10 {
                    // Rule at src/isa/x64/inst.isle line 2205.
                    return true;
                }
            }
            _ => {}
        }
    }
    // Rule at src/isa/x64/inst.isle line 2206.
    return false;
}

// Generated as internal constructor for term vec_int_type.
pub fn constructor_vec_int_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/x64/inst.isle line 2212.
                    return I8X16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/x64/inst.isle line 2213.
                    return I16X8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/x64/inst.isle line 2214.
                    return I32X4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/x64/inst.isle line 2215.
                    return I64X2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_int_type", "src/isa/x64/inst.isle line 2211"
    )
}

// Generated as internal constructor for term x64_xor_vector.
pub fn constructor_x64_xor_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2219.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2220.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2221.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2222.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pxor(ctx, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 2223.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_xor_vector", "src/isa/x64/inst.isle line 2218"
    )
}

// Generated as internal constructor for term vector_all_ones.
pub fn constructor_vector_all_ones<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = constructor_xmm_uninit_value(ctx);
    let v1 = &C::xmm_to_xmm_mem(ctx, v0);
    let v2 = constructor_x64_pcmpeqd(ctx, v0, v1);
    // Rule at src/isa/x64/inst.isle line 2235.
    return v2;
}

// Generated as internal constructor for term mov_rmi_to_xmm.
pub fn constructor_mov_rmi_to_xmm<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> XmmMemImm {
    match arg0 {
        &RegMemImm::Reg { reg: v4 } => {
            let v5 = &C::reg_to_gpr_mem(ctx, v4);
            let v6 = constructor_x64_movd_to_xmm(ctx, v5);
            let v7 = &C::xmm_to_xmm_mem_imm(ctx, v6);
            // Rule at src/isa/x64/inst.isle line 2243.
            return v7.clone();
        }
        &RegMemImm::Mem { addr: ref v1 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 2241.
            return v2.clone();
        }
        &RegMemImm::Imm { simm32: v3 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 2242.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mov_rmi_to_xmm", "src/isa/x64/inst.isle line 2240"
    )
}

// Generated as internal constructor for term x64_load.
pub fn constructor_x64_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: &ExtKind,
) -> Reg {
    match arg0 {
        I64 => {
            let v11 = constructor_mov64_mr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 2262.
            return v11;
        }
        F32 => {
            let v12 = constructor_x64_movss_load(ctx, arg1);
            let v13 = C::xmm_to_reg(ctx, v12);
            // Rule at src/isa/x64/inst.isle line 2265.
            return v13;
        }
        F64 => {
            let v14 = constructor_x64_movsd_load(ctx, arg1);
            let v15 = C::xmm_to_reg(ctx, v14);
            // Rule at src/isa/x64/inst.isle line 2268.
            return v15;
        }
        F32X4 => {
            let v16 = constructor_x64_movups_load(ctx, arg1);
            let v17 = C::xmm_to_reg(ctx, v16);
            // Rule at src/isa/x64/inst.isle line 2271.
            return v17;
        }
        F64X2 => {
            let v18 = constructor_x64_movupd_load(ctx, arg1);
            let v19 = C::xmm_to_reg(ctx, v18);
            // Rule at src/isa/x64/inst.isle line 2274.
            return v19;
        }
        _ => {}
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ExtKind::SignExtend = arg2 {
            let v5 = C::ty_bytes(ctx, v2);
            let v7 = &C::ext_mode(ctx, v5, 0x8);
            let v8 = &constructor_synthetic_amode_to_gpr_mem(ctx, arg1);
            let v9 = constructor_x64_movsx(ctx, v7, v8);
            let v10 = C::gpr_to_reg(ctx, v9);
            // Rule at src/isa/x64/inst.isle line 2258.
            return v10;
        }
    }
    let v20 = C::multi_lane(ctx, arg0);
    if let Some(v21) = v20 {
        let v24 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
        let v25 = constructor_x64_movdqu_load(ctx, v24);
        let v26 = C::xmm_to_reg(ctx, v25);
        // Rule at src/isa/x64/inst.isle line 2277.
        return v26;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_load", "src/isa/x64/inst.isle line 2256"
    )
}

// Generated as internal constructor for term x64_mov.
pub fn constructor_x64_mov<C: Context>(ctx: &mut C, arg0: &Amode) -> Reg {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = constructor_mov64_mr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2281.
    return v2;
}

// Generated as internal constructor for term x64_movzx.
pub fn constructor_x64_movzx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovzxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2285.
    return v5;
}

// Generated as internal constructor for term x64_movsx.
pub fn constructor_x64_movsx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovsxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2291.
    return v5;
}

// Generated as internal constructor for term x64_movss_load.
pub fn constructor_x64_movss_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovss, v2);
        // Rule at src/isa/x64/inst.isle line 2299.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movss, v2);
    // Rule at src/isa/x64/inst.isle line 2297.
    return v3;
}

// Generated as internal constructor for term x64_movss_store.
pub fn constructor_x64_movss_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovss, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2306.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2304.
    return v3.clone();
}

// Generated as internal constructor for term x64_movsd_load.
pub fn constructor_x64_movsd_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovsd, v2);
        // Rule at src/isa/x64/inst.isle line 2313.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movsd, v2);
    // Rule at src/isa/x64/inst.isle line 2311.
    return v3;
}

// Generated as internal constructor for term x64_movsd_store.
pub fn constructor_x64_movsd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovsd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2320.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2318.
    return v3.clone();
}

// Generated as internal constructor for term x64_movups_load.
pub fn constructor_x64_movups_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovups, v2);
        // Rule at src/isa/x64/inst.isle line 2327.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movups, v2);
    // Rule at src/isa/x64/inst.isle line 2325.
    return v3;
}

// Generated as internal constructor for term x64_movups_store.
pub fn constructor_x64_movups_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovups, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2334.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movups, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2332.
    return v3.clone();
}

// Generated as internal constructor for term x64_movupd_load.
pub fn constructor_x64_movupd_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovupd, v2);
        // Rule at src/isa/x64/inst.isle line 2341.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movupd, v2);
    // Rule at src/isa/x64/inst.isle line 2339.
    return v3;
}

// Generated as internal constructor for term x64_movupd_store.
pub fn constructor_x64_movupd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovupd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2348.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movupd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2346.
    return v3.clone();
}

// Generated as internal constructor for term x64_movd_to_gpr.
pub fn constructor_x64_movd_to_gpr<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src/isa/x64/inst.isle line 2356.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2354.
    return v3;
}

// Generated as internal constructor for term x64_movd_to_xmm.
pub fn constructor_x64_movd_to_xmm<C: Context>(ctx: &mut C, arg0: &GprMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src/isa/x64/inst.isle line 2364.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2362.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_xmm.
pub fn constructor_x64_movq_to_xmm<C: Context>(ctx: &mut C, arg0: &GprMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src/isa/x64/inst.isle line 2372.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 2370.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_gpr.
pub fn constructor_x64_movq_to_gpr<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src/isa/x64/inst.isle line 2380.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 2378.
    return v3;
}

// Generated as internal constructor for term x64_movdqu_load.
pub fn constructor_x64_movdqu_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovdqu, arg0);
        // Rule at src/isa/x64/inst.isle line 2387.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movdqu, arg0);
    // Rule at src/isa/x64/inst.isle line 2385.
    return v2;
}

// Generated as internal constructor for term x64_movdqu_store.
pub fn constructor_x64_movdqu_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovdqu, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2394.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movdqu, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2392.
    return v3.clone();
}

// Generated as internal constructor for term x64_pmovsxbw.
pub fn constructor_x64_pmovsxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 2401.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 2399.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxbw.
pub fn constructor_x64_pmovzxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 2408.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 2406.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxwd.
pub fn constructor_x64_pmovsxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 2415.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 2413.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxwd.
pub fn constructor_x64_pmovzxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 2422.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 2420.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxdq.
pub fn constructor_x64_pmovsxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 2429.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 2427.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxdq.
pub fn constructor_x64_pmovzxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 2436.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 2434.
    return v2;
}

// Generated as internal constructor for term x64_movrm.
pub fn constructor_x64_movrm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovRM {
        size: v3.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2441.
    return v5;
}

// Generated as internal constructor for term x64_movimm_m.
pub fn constructor_x64_movimm_m<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: i32,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovImmM {
        size: v3.clone(),
        simm32: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2446.
    return v5;
}

// Generated as internal constructor for term xmm_movrm.
pub fn constructor_xmm_movrm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRM {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2451.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm.
pub fn constructor_xmm_movrm_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImm {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2455.
    return v5;
}

// Generated as internal constructor for term xmm_movrm_vex.
pub fn constructor_xmm_movrm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRMVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2459.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm_vex.
pub fn constructor_xmm_movrm_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImmVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2463.
    return v5;
}

// Generated as internal constructor for term x64_xmm_load_const.
pub fn constructor_x64_xmm_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> Xmm {
    let v2 = &C::const_to_synthetic_amode(ctx, arg1);
    let v4 = constructor_x64_load(ctx, arg0, v2, &ExtKind::None);
    let v5 = C::xmm_new(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2468.
    return v5;
}

// Generated as internal constructor for term x64_add.
pub fn constructor_x64_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2479.
    return v4;
}

// Generated as internal constructor for term x64_add_with_flags_paired.
pub fn constructor_x64_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Add,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2487.
    return v8;
}

// Generated as internal constructor for term x64_alurmi_with_flags_paired.
pub fn constructor_x64_alurmi_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: v8,
            result: v9,
        };
        // Rule at src/isa/x64/inst.isle line 2498.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_with_flags_paired", "src/isa/x64/inst.isle line 2497"
    )
}

// Generated as internal constructor for term x64_alurmi_flags_side_effect.
pub fn constructor_x64_alurmi_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = &C::raw_operand_size_of_type(ctx, v3);
        let v7 = C::temp_writable_gpr(ctx);
        let v8 = MInst::AluRmiR {
            size: v6.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v7,
        };
        let v9 = ProducesFlags::ProducesFlagsSideEffect { inst: v8 };
        // Rule at src/isa/x64/inst.isle line 2509.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_flags_side_effect", "src/isa/x64/inst.isle line 2508"
    )
}

// Generated as internal constructor for term x64_alurmi_with_flags_chained.
pub fn constructor_x64_alurmi_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ConsumesAndProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ConsumesAndProducesFlags::ReturnsReg {
            inst: v8,
            result: v9,
        };
        // Rule at src/isa/x64/inst.isle line 2519.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_with_flags_chained", "src/isa/x64/inst.isle line 2518"
    )
}

// Generated as internal constructor for term x64_adc_paired.
pub fn constructor_x64_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Adc,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2531.
    return v8;
}

// Generated as internal constructor for term x64_sub.
pub fn constructor_x64_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2543.
    return v4;
}

// Generated as internal constructor for term x64_sub_with_flags_paired.
pub fn constructor_x64_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sub,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2551.
    return v8;
}

// Generated as internal constructor for term x64_sbb_paired.
pub fn constructor_x64_sbb_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sbb,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2563.
    return v8;
}

// Generated as internal constructor for term x64_mul.
pub fn constructor_x64_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_gpr_to_gpr(ctx, v4);
    let v10 = C::writable_gpr_to_gpr(ctx, v5);
    let v11 = constructor_value_gprs(ctx, v9, v10);
    // Rule at src/isa/x64/inst.isle line 2576.
    return v11;
}

// Generated as internal constructor for term x64_mul8.
pub fn constructor_x64_mul8<C: Context>(ctx: &mut C, arg0: bool, arg1: Gpr, arg2: &GprMem) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2586.
    return v6;
}

// Generated as internal constructor for term x64_imul.
pub fn constructor_x64_imul<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMem) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMul {
        size: v4.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2593.
    return v7;
}

// Generated as internal constructor for term x64_imul_imm.
pub fn constructor_x64_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: i32,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMulImm {
        size: v4.clone(),
        src1: arg1.clone(),
        src2: arg2,
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2601.
    return v7;
}

// Generated as internal constructor for term x64_mul8_with_flags_paired.
pub fn constructor_x64_mul8_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Gpr,
    arg2: &GprMem,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src/isa/x64/inst.isle line 2608.
    return v6;
}

// Generated as internal constructor for term x64_mul_lo_with_flags_paired.
pub fn constructor_x64_mul_lo_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ProducesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/x64/inst.isle line 2615.
    return v9;
}

// Generated as internal constructor for term x64_and.
pub fn constructor_x64_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2625.
    return v4;
}

// Generated as internal constructor for term x64_and_with_flags_paired.
pub fn constructor_x64_and_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::And,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 2632.
    return v7;
}

// Generated as internal constructor for term x64_or.
pub fn constructor_x64_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2643.
    return v4;
}

// Generated as internal constructor for term x64_xor.
pub fn constructor_x64_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2651.
    return v4;
}

// Generated as internal constructor for term x64_andn.
pub fn constructor_x64_andn<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMem) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Andn, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2658.
    return v4;
}

// Generated as internal constructor for term imm_i64.
pub fn constructor_imm_i64<C: Context>(ctx: &mut C, arg0: Type, arg1: i64) -> Reg {
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = constructor_imm(ctx, arg0, v2);
    // Rule at src/isa/x64/inst.isle line 2665.
    return v3;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        I64 => {
            let v20 = C::nonzero_u64_fits_in_u32(ctx, arg1);
            if let Some(v21) = v20 {
                let v5 = C::temp_writable_gpr(ctx);
                let v23 = MInst::Imm {
                    dst_size: OperandSize::Size32,
                    simm64: v21,
                    dst: v5,
                };
                let v24 = C::emit(ctx, &v23);
                let v25 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 2696.
                return v25;
            }
        }
        F32 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v35 = constructor_xmm_zero(ctx, arg0);
                    let v36 = C::xmm_to_reg(ctx, v35);
                    // Rule at src/isa/x64/inst.isle line 2714.
                    return v36;
                }
                false => {
                    let v11 = constructor_imm(ctx, I32, arg1);
                    let v12 = &C::reg_to_gpr_mem(ctx, v11);
                    let v13 = constructor_x64_movd_to_xmm(ctx, v12);
                    let v14 = C::xmm_to_reg(ctx, v13);
                    // Rule at src/isa/x64/inst.isle line 2687.
                    return v14;
                }
                _ => {}
            }
        }
        F64 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v35 = constructor_xmm_zero(ctx, arg0);
                    let v36 = C::xmm_to_reg(ctx, v35);
                    // Rule at src/isa/x64/inst.isle line 2719.
                    return v36;
                }
                false => {
                    let v16 = constructor_imm(ctx, I64, arg1);
                    let v17 = &C::reg_to_gpr_mem(ctx, v16);
                    let v18 = constructor_x64_movq_to_xmm(ctx, v17);
                    let v19 = C::xmm_to_reg(ctx, v18);
                    // Rule at src/isa/x64/inst.isle line 2691.
                    return v19;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::u64_is_zero(ctx, arg1);
        match v4 {
            true => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v27 = MInst::AluConstOp {
                    op: AluRmiROpcode::Xor,
                    size: v6.clone(),
                    dst: v5,
                };
                let v28 = C::emit(ctx, &v27);
                let v29 = C::writable_gpr_to_gpr(ctx, v5);
                let v30 = C::gpr_to_reg(ctx, v29);
                // Rule at src/isa/x64/inst.isle line 2702.
                return v30;
            }
            false => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v7 = MInst::Imm {
                    dst_size: v6.clone(),
                    simm64: arg1,
                    dst: v5,
                };
                let v8 = C::emit(ctx, &v7);
                let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 2680.
                return v9;
            }
            _ => {}
        }
    }
    if arg1 == 0x0 {
        let v31 = C::multi_lane(ctx, arg0);
        if let Some(v32) = v31 {
            let v35 = constructor_xmm_zero(ctx, arg0);
            let v36 = C::xmm_to_reg(ctx, v35);
            // Rule at src/isa/x64/inst.isle line 2710.
            return v36;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/x64/inst.isle line 2677"
    )
}

// Generated as internal constructor for term xmm_zero.
pub fn constructor_xmm_zero<C: Context>(ctx: &mut C, arg0: Type) -> Xmm {
    let v1 = constructor_xmm_uninit_value(ctx);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    let v3 = constructor_x64_xor_vector(ctx, arg0, v1, v2);
    // Rule at src/isa/x64/inst.isle line 2724.
    return v3;
}

// Generated as internal constructor for term shift_r.
pub fn constructor_shift_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftKind,
    arg2: Gpr,
    arg3: &Imm8Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = MInst::ShiftR {
        size: v5.clone(),
        kind: arg1.clone(),
        src: arg2,
        num_bits: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2730.
    return v8;
}

// Generated as internal constructor for term x64_rotl.
pub fn constructor_x64_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = C::ty_bits(ctx, v6);
                let v12 = C::u8_sub(ctx, v11, v8);
                let v13 = constructor_x64_rorx(ctx, v6, v10, v12);
                // Rule at src/isa/x64/inst.isle line 2742.
                return v13;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2740.
    return v4;
}

// Generated as internal constructor for term x64_rotr.
pub fn constructor_x64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_rorx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 2750.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateRight, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2748.
    return v4;
}

// Generated as internal constructor for term x64_shl.
pub fn constructor_x64_shl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shlx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 2762.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2756.
    return v4;
}

// Generated as internal constructor for term x64_shr.
pub fn constructor_x64_shr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shrx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 2771.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightLogical, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2768.
    return v4;
}

// Generated as internal constructor for term x64_sar.
pub fn constructor_x64_sar<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_sarx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 2780.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightArithmetic, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2777.
    return v4;
}

// Generated as internal constructor for term x64_bzhi.
pub fn constructor_x64_bzhi<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Bzhi, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 2789.
    return v4;
}

// Generated as internal constructor for term x64_bswap.
pub fn constructor_x64_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Bswap {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2796.
    return v6;
}

// Generated as internal constructor for term cmp_rmi_r.
pub fn constructor_cmp_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &CmpOpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v4 = MInst::CmpRmiR {
        size: arg0.clone(),
        opcode: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2804.
    return v5;
}

// Generated as internal constructor for term x64_cmp.
pub fn constructor_x64_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2813.
    return v4.clone();
}

// Generated as internal constructor for term x64_cmp_imm.
pub fn constructor_x64_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: u32,
) -> ProducesFlags {
    let v3 = RegMemImm::Imm { simm32: arg2 };
    let v4 = &C::gpr_mem_imm_new(ctx, &v3);
    let v5 = &constructor_x64_cmp(ctx, arg0, arg1, v4);
    // Rule at src/isa/x64/inst.isle line 2818.
    return v5.clone();
}

// Generated as internal constructor for term xmm_cmp_rm_r.
pub fn constructor_xmm_cmp_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg2);
    let v4 = MInst::XmmCmpRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: v3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2823.
    return v5;
}

// Generated as internal constructor for term xmm_cmp_rm_r_vex.
pub fn constructor_xmm_cmp_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = MInst::XmmCmpRmRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2829.
    return v4;
}

// Generated as internal constructor for term x64_ucomis.
pub fn constructor_x64_ucomis<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v9 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomiss, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 2839.
                return v9.clone();
            }
            let v4 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomiss, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2835.
            return v4.clone();
        }
        F64 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v11 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomisd, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 2842.
                return v11.clone();
            }
            let v6 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomisd, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2837.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_ucomis", "src/isa/x64/inst.isle line 2834"
    )
}

// Generated as internal constructor for term x64_test.
pub fn constructor_x64_test<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Test, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2848.
    return v4.clone();
}

// Generated as internal constructor for term x64_ptest.
pub fn constructor_x64_ptest<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> ProducesFlags {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vptest, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2855.
        return v6.clone();
    }
    let v3 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ptest, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2853.
    return v3.clone();
}

// Generated as internal constructor for term cmove.
pub fn constructor_cmove<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &GprMem,
    arg3: Gpr,
) -> ConsumesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v6 = MInst::Cmove {
        size: v5.clone(),
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2863.
    return v8;
}

// Generated as internal constructor for term cmove_xmm.
pub fn constructor_cmove_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Xmm,
    arg3: Xmm,
) -> ConsumesFlags {
    let v4 = C::temp_writable_xmm(ctx);
    let v6 = constructor_writable_xmm_to_r_reg(ctx, v4);
    let v5 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg2,
        alternative: arg3,
        dst: v4,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/x64/inst.isle line 2871.
    return v7;
}

// Generated as internal constructor for term cmove_from_values.
pub fn constructor_cmove_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v26 = &constructor_put_in_gpr_mem(ctx, arg2);
                        let v27 = constructor_put_in_gpr(ctx, arg3);
                        let v28 = &constructor_cmove(ctx, arg0, arg1, v26, v27);
                        // Rule at src/isa/x64/inst.isle line 2902.
                        return v28.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v7 = C::put_in_regs(ctx, arg2);
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::temp_writable_gpr(ctx);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v13 = constructor_value_regs_get_gpr(ctx, v7, 0x0);
                            let v14 = &C::gpr_to_gpr_mem(ctx, v13);
                            let v15 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v18 = constructor_value_regs_get_gpr(ctx, v7, 0x1);
                            let v19 = &C::gpr_to_gpr_mem(ctx, v18);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v22 = constructor_writable_gpr_to_r_reg(ctx, v9);
                            let v23 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v24 = C::value_regs(ctx, v22, v23);
                            let v16 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v14.clone(),
                                alternative: v15,
                                dst: v9,
                            };
                            let v21 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v19.clone(),
                                alternative: v20,
                                dst: v10,
                            };
                            let v25 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                                inst1: v16,
                                inst2: v21,
                                result: v24,
                            };
                            // Rule at src/isa/x64/inst.isle line 2881.
                            return v25;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v29 = constructor_put_in_xmm(ctx, arg2);
                let v30 = constructor_put_in_xmm(ctx, arg3);
                let v31 = &constructor_cmove_xmm(ctx, arg0, arg1, v29, v30);
                // Rule at src/isa/x64/inst.isle line 2905.
                return v31.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_from_values", "src/isa/x64/inst.isle line 2880"
    )
}

// Generated as internal constructor for term cmove_or.
pub fn constructor_cmove_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &GprMem,
    arg4: Gpr,
) -> ConsumesFlags {
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v9 = C::writable_gpr_to_gpr(ctx, v6);
    let v11 = constructor_writable_gpr_to_value_regs(ctx, v5);
    let v8 = MInst::Cmove {
        size: v7.clone(),
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v10 = MInst::Cmove {
        size: v7.clone(),
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v9,
        dst: v5,
    };
    let v12 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v8,
        inst2: v10,
        result: v11,
    };
    // Rule at src/isa/x64/inst.isle line 2912.
    return v12;
}

// Generated as internal constructor for term cmove_or_xmm.
pub fn constructor_cmove_or_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Xmm,
    arg4: Xmm,
) -> ConsumesFlags {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::temp_writable_xmm(ctx);
    let v8 = C::writable_xmm_to_xmm(ctx, v6);
    let v10 = constructor_writable_xmm_to_value_regs(ctx, v5);
    let v7 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg3,
        alternative: arg4,
        dst: v6,
    };
    let v9 = MInst::XmmCmove {
        ty: arg0,
        cc: arg2.clone(),
        consequent: arg3,
        alternative: v8,
        dst: v5,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v9,
        result: v10,
    };
    // Rule at src/isa/x64/inst.isle line 2924.
    return v11;
}

// Generated as internal constructor for term cmove_or_from_values.
pub fn constructor_cmove_or_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Value,
    arg4: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v37 = &constructor_put_in_gpr_mem(ctx, arg3);
                        let v38 = constructor_put_in_gpr(ctx, arg4);
                        let v39 = &constructor_cmove_or(ctx, arg0, arg1, arg2, v37, v38);
                        // Rule at src/isa/x64/inst.isle line 2957.
                        return v39.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::put_in_regs(ctx, arg4);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v11 = C::temp_writable_gpr(ctx);
                            let v12 = C::temp_writable_gpr(ctx);
                            let v13 = C::temp_writable_gpr(ctx);
                            let v16 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v17 = &C::gpr_to_gpr_mem(ctx, v16);
                            let v18 = constructor_value_regs_get_gpr(ctx, v9, 0x0);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                            let v22 = C::writable_gpr_to_gpr(ctx, v12);
                            let v25 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v26 = &C::gpr_to_gpr_mem(ctx, v25);
                            let v27 = constructor_value_regs_get_gpr(ctx, v9, 0x1);
                            let v29 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v30 = &C::gpr_to_gpr_mem(ctx, v29);
                            let v31 = C::writable_gpr_to_gpr(ctx, v13);
                            let v33 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v34 = constructor_writable_gpr_to_r_reg(ctx, v11);
                            let v35 = C::value_regs(ctx, v33, v34);
                            let v19 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v17.clone(),
                                alternative: v18,
                                dst: v12,
                            };
                            let v23 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v21.clone(),
                                alternative: v22,
                                dst: v10,
                            };
                            let v28 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v26.clone(),
                                alternative: v27,
                                dst: v13,
                            };
                            let v32 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v30.clone(),
                                alternative: v31,
                                dst: v11,
                            };
                            let v36 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                                inst1: v19,
                                inst2: v23,
                                inst3: v28,
                                inst4: v32,
                                result: v35,
                            };
                            // Rule at src/isa/x64/inst.isle line 2938.
                            return v36;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v40 = constructor_put_in_xmm(ctx, arg3);
                let v41 = constructor_put_in_xmm(ctx, arg4);
                let v42 = &constructor_cmove_or_xmm(ctx, arg0, arg1, arg2, v40, v41);
                // Rule at src/isa/x64/inst.isle line 2960.
                return v42.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_or_from_values", "src/isa/x64/inst.isle line 2937"
    )
}

// Generated as internal constructor for term x64_setcc.
pub fn constructor_x64_setcc<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2965.
    return v4;
}

// Generated as internal constructor for term x64_setcc_paired.
pub fn constructor_x64_setcc_paired<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2974.
    return v4;
}

// Generated as internal constructor for term x64_paddb.
pub fn constructor_x64_paddb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2984.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2982.
    return v4;
}

// Generated as internal constructor for term x64_paddw.
pub fn constructor_x64_paddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2992.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2990.
    return v4;
}

// Generated as internal constructor for term x64_paddd.
pub fn constructor_x64_paddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3000.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2998.
    return v4;
}

// Generated as internal constructor for term x64_paddq.
pub fn constructor_x64_paddq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3008.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3006.
    return v4;
}

// Generated as internal constructor for term x64_paddsb.
pub fn constructor_x64_paddsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3016.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3014.
    return v4;
}

// Generated as internal constructor for term x64_paddsw.
pub fn constructor_x64_paddsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3024.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3022.
    return v4;
}

// Generated as internal constructor for term x64_phaddw.
pub fn constructor_x64_phaddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3032.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3030.
    return v4;
}

// Generated as internal constructor for term x64_phaddd.
pub fn constructor_x64_phaddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3040.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3038.
    return v4;
}

// Generated as internal constructor for term x64_paddusb.
pub fn constructor_x64_paddusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3048.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3046.
    return v4;
}

// Generated as internal constructor for term x64_paddusw.
pub fn constructor_x64_paddusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3056.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3054.
    return v4;
}

// Generated as internal constructor for term x64_psubb.
pub fn constructor_x64_psubb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3064.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3062.
    return v4;
}

// Generated as internal constructor for term x64_psubw.
pub fn constructor_x64_psubw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3072.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3070.
    return v4;
}

// Generated as internal constructor for term x64_psubd.
pub fn constructor_x64_psubd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3080.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3078.
    return v4;
}

// Generated as internal constructor for term x64_psubq.
pub fn constructor_x64_psubq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3088.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3086.
    return v4;
}

// Generated as internal constructor for term x64_psubsb.
pub fn constructor_x64_psubsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3096.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3094.
    return v4;
}

// Generated as internal constructor for term x64_psubsw.
pub fn constructor_x64_psubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3104.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3102.
    return v4;
}

// Generated as internal constructor for term x64_psubusb.
pub fn constructor_x64_psubusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3112.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3110.
    return v4;
}

// Generated as internal constructor for term x64_psubusw.
pub fn constructor_x64_psubusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3120.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3118.
    return v4;
}

// Generated as internal constructor for term x64_pavgb.
pub fn constructor_x64_pavgb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3128.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3126.
    return v4;
}

// Generated as internal constructor for term x64_pavgw.
pub fn constructor_x64_pavgw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3136.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3134.
    return v4;
}

// Generated as internal constructor for term x64_pand.
pub fn constructor_x64_pand<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpand, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3144.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pand, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3142.
    return v4;
}

// Generated as internal constructor for term x64_andps.
pub fn constructor_x64_andps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3152.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3150.
    return v4;
}

// Generated as internal constructor for term x64_andpd.
pub fn constructor_x64_andpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3160.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3158.
    return v4;
}

// Generated as internal constructor for term x64_por.
pub fn constructor_x64_por<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3168.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Por, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3166.
    return v4;
}

// Generated as internal constructor for term x64_orps.
pub fn constructor_x64_orps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3176.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3174.
    return v4;
}

// Generated as internal constructor for term x64_orpd.
pub fn constructor_x64_orpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3184.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3182.
    return v4;
}

// Generated as internal constructor for term x64_pxor.
pub fn constructor_x64_pxor<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpxor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3192.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pxor, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3190.
    return v4;
}

// Generated as internal constructor for term x64_xorps.
pub fn constructor_x64_xorps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3200.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3198.
    return v4;
}

// Generated as internal constructor for term x64_xorpd.
pub fn constructor_x64_xorpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3208.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3206.
    return v4;
}

// Generated as internal constructor for term x64_pmullw.
pub fn constructor_x64_pmullw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmullw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3216.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmullw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3214.
    return v4;
}

// Generated as internal constructor for term x64_pmulld.
pub fn constructor_x64_pmulld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulld, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3224.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3222.
    return v4;
}

// Generated as internal constructor for term x64_pmulhw.
pub fn constructor_x64_pmulhw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3232.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3230.
    return v4;
}

// Generated as internal constructor for term x64_pmulhrsw.
pub fn constructor_x64_pmulhrsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhrsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3240.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhrsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3238.
    return v4;
}

// Generated as internal constructor for term x64_pmulhuw.
pub fn constructor_x64_pmulhuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3248.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3246.
    return v4;
}

// Generated as internal constructor for term x64_pmuldq.
pub fn constructor_x64_pmuldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuldq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3256.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuldq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3254.
    return v4;
}

// Generated as internal constructor for term x64_pmuludq.
pub fn constructor_x64_pmuludq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuludq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3264.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuludq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3262.
    return v4;
}

// Generated as internal constructor for term x64_punpckhwd.
pub fn constructor_x64_punpckhwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3272.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3270.
    return v4;
}

// Generated as internal constructor for term x64_punpcklwd.
pub fn constructor_x64_punpcklwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3280.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3278.
    return v4;
}

// Generated as internal constructor for term x64_punpckldq.
pub fn constructor_x64_punpckldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckldq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3288.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckldq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3286.
    return v4;
}

// Generated as internal constructor for term x64_punpckhdq.
pub fn constructor_x64_punpckhdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3296.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3294.
    return v4;
}

// Generated as internal constructor for term x64_punpcklqdq.
pub fn constructor_x64_punpcklqdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklqdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3304.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklqdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3302.
    return v4;
}

// Generated as internal constructor for term x64_punpckhqdq.
pub fn constructor_x64_punpckhqdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhqdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3312.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhqdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3310.
    return v4;
}

// Generated as internal constructor for term x64_unpcklps.
pub fn constructor_x64_unpcklps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3320.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3318.
    return v4;
}

// Generated as internal constructor for term x64_unpcklpd.
pub fn constructor_x64_unpcklpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3328.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3326.
    return v4;
}

// Generated as internal constructor for term x64_unpckhps.
pub fn constructor_x64_unpckhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpckhps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3336.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpckhps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3334.
    return v4;
}

// Generated as internal constructor for term x64_andnps.
pub fn constructor_x64_andnps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3344.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3342.
    return v4;
}

// Generated as internal constructor for term x64_andnpd.
pub fn constructor_x64_andnpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3352.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3350.
    return v4;
}

// Generated as internal constructor for term x64_pandn.
pub fn constructor_x64_pandn<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpandn, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3360.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pandn, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3358.
    return v4;
}

// Generated as internal constructor for term x64_addss.
pub fn constructor_x64_addss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3368.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3366.
    return v3;
}

// Generated as internal constructor for term x64_addsd.
pub fn constructor_x64_addsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3376.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3374.
    return v3;
}

// Generated as internal constructor for term x64_addps.
pub fn constructor_x64_addps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3384.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3382.
    return v4;
}

// Generated as internal constructor for term x64_addpd.
pub fn constructor_x64_addpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3392.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3390.
    return v4;
}

// Generated as internal constructor for term x64_subss.
pub fn constructor_x64_subss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3400.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3398.
    return v3;
}

// Generated as internal constructor for term x64_subsd.
pub fn constructor_x64_subsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3408.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3406.
    return v3;
}

// Generated as internal constructor for term x64_subps.
pub fn constructor_x64_subps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3416.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3414.
    return v4;
}

// Generated as internal constructor for term x64_subpd.
pub fn constructor_x64_subpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3424.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3422.
    return v4;
}

// Generated as internal constructor for term x64_mulss.
pub fn constructor_x64_mulss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3432.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3430.
    return v3;
}

// Generated as internal constructor for term x64_mulsd.
pub fn constructor_x64_mulsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3440.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3438.
    return v3;
}

// Generated as internal constructor for term x64_mulps.
pub fn constructor_x64_mulps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3448.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3446.
    return v4;
}

// Generated as internal constructor for term x64_mulpd.
pub fn constructor_x64_mulpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3456.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3454.
    return v4;
}

// Generated as internal constructor for term x64_divss.
pub fn constructor_x64_divss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3464.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3462.
    return v3;
}

// Generated as internal constructor for term x64_divsd.
pub fn constructor_x64_divsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3472.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3470.
    return v3;
}

// Generated as internal constructor for term x64_divps.
pub fn constructor_x64_divps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3480.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3478.
    return v4;
}

// Generated as internal constructor for term x64_divpd.
pub fn constructor_x64_divpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3488.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3486.
    return v4;
}

// Generated as internal constructor for term x64_blendvpd.
pub fn constructor_x64_blendvpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvpd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3496.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvpd, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3494.
    return v5;
}

// Generated as internal constructor for term x64_blendvps.
pub fn constructor_x64_blendvps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3504.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvps, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3502.
    return v5;
}

// Generated as internal constructor for term x64_pblendvb.
pub fn constructor_x64_pblendvb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vpblendvb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3512.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Pblendvb, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3510.
    return v5;
}

// Generated as internal constructor for term x64_pblendw.
pub fn constructor_x64_pblendw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpblendw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3520.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pblendw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3518.
    return v7;
}

// Generated as internal constructor for term x64_movsd_regmove.
pub fn constructor_x64_movsd_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3535.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3533.
    return v4;
}

// Generated as internal constructor for term x64_movss_regmove.
pub fn constructor_x64_movss_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovss, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3542.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movss, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3540.
    return v4;
}

// Generated as internal constructor for term x64_movlhps.
pub fn constructor_x64_movlhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovlhps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3550.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Movlhps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3548.
    return v4;
}

// Generated as internal constructor for term x64_pmaxs.
pub fn constructor_x64_pmaxs<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3556.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3557.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3558.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxs", "src/isa/x64/inst.isle line 3555"
    )
}

// Generated as internal constructor for term x64_pmaxsb.
pub fn constructor_x64_pmaxsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3562.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3561.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsw.
pub fn constructor_x64_pmaxsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3567.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3566.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsd.
pub fn constructor_x64_pmaxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3572.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3571.
    return v4;
}

// Generated as internal constructor for term x64_pmins.
pub fn constructor_x64_pmins<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3578.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3579.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3580.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmins", "src/isa/x64/inst.isle line 3577"
    )
}

// Generated as internal constructor for term x64_pminsb.
pub fn constructor_x64_pminsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3584.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3583.
    return v4;
}

// Generated as internal constructor for term x64_pminsw.
pub fn constructor_x64_pminsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3589.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3588.
    return v4;
}

// Generated as internal constructor for term x64_pminsd.
pub fn constructor_x64_pminsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3594.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3593.
    return v4;
}

// Generated as internal constructor for term x64_pmaxu.
pub fn constructor_x64_pmaxu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3600.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3601.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3602.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxu", "src/isa/x64/inst.isle line 3599"
    )
}

// Generated as internal constructor for term x64_pmaxub.
pub fn constructor_x64_pmaxub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3606.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3605.
    return v4;
}

// Generated as internal constructor for term x64_pmaxuw.
pub fn constructor_x64_pmaxuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3611.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3610.
    return v4;
}

// Generated as internal constructor for term x64_pmaxud.
pub fn constructor_x64_pmaxud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3616.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3615.
    return v4;
}

// Generated as internal constructor for term x64_pminu.
pub fn constructor_x64_pminu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3622.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3623.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3624.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pminu", "src/isa/x64/inst.isle line 3621"
    )
}

// Generated as internal constructor for term x64_pminub.
pub fn constructor_x64_pminub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3628.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3627.
    return v4;
}

// Generated as internal constructor for term x64_pminuw.
pub fn constructor_x64_pminuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3633.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3632.
    return v4;
}

// Generated as internal constructor for term x64_pminud.
pub fn constructor_x64_pminud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3638.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3637.
    return v4;
}

// Generated as internal constructor for term x64_punpcklbw.
pub fn constructor_x64_punpcklbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3646.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3644.
    return v4;
}

// Generated as internal constructor for term x64_punpckhbw.
pub fn constructor_x64_punpckhbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3654.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3652.
    return v4;
}

// Generated as internal constructor for term x64_packsswb.
pub fn constructor_x64_packsswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpacksswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3662.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packsswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3660.
    return v4;
}

// Generated as internal constructor for term x64_packssdw.
pub fn constructor_x64_packssdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackssdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3670.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packssdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3668.
    return v4;
}

// Generated as internal constructor for term x64_packuswb.
pub fn constructor_x64_packuswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackuswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3678.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packuswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3676.
    return v4;
}

// Generated as internal constructor for term x64_packusdw.
pub fn constructor_x64_packusdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackusdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3686.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packusdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3684.
    return v4;
}

// Generated as internal constructor for term x64_palignr.
pub fn constructor_x64_palignr<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpalignr, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3698.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Palignr, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3692.
    return v7;
}

// Generated as internal constructor for term x64_cmpp.
pub fn constructor_x64_cmpp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: &FcmpImm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_cmpps(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3704.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_cmppd(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3705.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_cmpp", "src/isa/x64/inst.isle line 3703"
    )
}

// Generated as internal constructor for term x64_cmpps.
pub fn constructor_x64_cmpps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmpps, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 3714.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmpps, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3708.
    return v8;
}

// Generated as internal constructor for term x64_cmppd.
pub fn constructor_x64_cmppd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmppd, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 3731.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmppd, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3725.
    return v8;
}

// Generated as internal constructor for term x64_pinsrb.
pub fn constructor_x64_pinsrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3746.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrb, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3740.
    return v7;
}

// Generated as internal constructor for term x64_pinsrw.
pub fn constructor_x64_pinsrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3758.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3752.
    return v7;
}

// Generated as internal constructor for term x64_pinsrd.
pub fn constructor_x64_pinsrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3770.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3764.
    return v7;
}

// Generated as internal constructor for term x64_pinsrq.
pub fn constructor_x64_pinsrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrq, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3782.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 3776.
    return v7;
}

// Generated as internal constructor for term x64_roundss.
pub fn constructor_x64_roundss<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundss, arg0, v10);
        // Rule at src/isa/x64/inst.isle line 3807.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F32, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundss, v5, v6);
    // Rule at src/isa/x64/inst.isle line 3805.
    return v7;
}

// Generated as internal constructor for term x64_roundsd.
pub fn constructor_x64_roundsd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundsd, arg0, v10);
        // Rule at src/isa/x64/inst.isle line 3817.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F64, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundsd, v5, v6);
    // Rule at src/isa/x64/inst.isle line 3815.
    return v7;
}

// Generated as internal constructor for term put_xmm_mem_in_xmm.
pub fn constructor_put_xmm_mem_in_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: &XmmMem) -> Xmm {
    let v2 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    match v2 {
        &RegMem::Reg { reg: v3 } => {
            let v4 = C::xmm_new(ctx, v3);
            // Rule at src/isa/x64/inst.isle line 3826.
            return v4;
        }
        &RegMem::Mem { addr: ref v5 } => {
            let v7 = constructor_x64_load(ctx, arg0, v5, &ExtKind::None);
            let v8 = C::xmm_new(ctx, v7);
            // Rule at src/isa/x64/inst.isle line 3829.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_xmm_mem_in_xmm", "src/isa/x64/inst.isle line 3825"
    )
}

// Generated as internal constructor for term x64_roundps.
pub fn constructor_x64_roundps<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundps, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3837.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundps, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3835.
    return v5;
}

// Generated as internal constructor for term x64_roundpd.
pub fn constructor_x64_roundpd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundpd, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3845.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundpd, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3843.
    return v5;
}

// Generated as internal constructor for term x64_pmaddwd.
pub fn constructor_x64_pmaddwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3853.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3851.
    return v4;
}

// Generated as internal constructor for term x64_pmaddubsw.
pub fn constructor_x64_pmaddubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3860.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3858.
    return v4;
}

// Generated as internal constructor for term x64_insertps.
pub fn constructor_x64_insertps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vinsertps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3872.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(
        ctx,
        &SseOpcode::Insertps,
        v4,
        v5,
        arg2,
        &OperandSize::Size32,
    );
    // Rule at src/isa/x64/inst.isle line 3866.
    return v7;
}

// Generated as internal constructor for term x64_pshufd.
pub fn constructor_x64_pshufd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3880.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufd, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 3878.
    return v4;
}

// Generated as internal constructor for term x64_pshufb.
pub fn constructor_x64_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpshufb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3888.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pshufb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3886.
    return v4;
}

// Generated as internal constructor for term x64_pshuflw.
pub fn constructor_x64_pshuflw<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshuflw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3896.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshuflw, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 3894.
    return v4;
}

// Generated as internal constructor for term x64_pshufhw.
pub fn constructor_x64_pshufhw<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufhw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3904.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufhw, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 3902.
    return v4;
}

// Generated as internal constructor for term x64_shufps.
pub fn constructor_x64_shufps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vshufps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3916.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Shufps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3910.
    return v7;
}

// Generated as internal constructor for term x64_pabsb.
pub fn constructor_x64_pabsb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsb, arg0);
        // Rule at src/isa/x64/inst.isle line 3924.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsb, v2);
    // Rule at src/isa/x64/inst.isle line 3922.
    return v3;
}

// Generated as internal constructor for term x64_pabsw.
pub fn constructor_x64_pabsw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsw, arg0);
        // Rule at src/isa/x64/inst.isle line 3932.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsw, v2);
    // Rule at src/isa/x64/inst.isle line 3930.
    return v3;
}

// Generated as internal constructor for term x64_pabsd.
pub fn constructor_x64_pabsd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsd, arg0);
        // Rule at src/isa/x64/inst.isle line 3940.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsd, v2);
    // Rule at src/isa/x64/inst.isle line 3938.
    return v3;
}

// Generated as internal constructor for term x64_vcvtudq2ps.
pub fn constructor_x64_vcvtudq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vcvtudq2ps, arg0);
    // Rule at src/isa/x64/inst.isle line 3946.
    return v2;
}

// Generated as internal constructor for term x64_vpabsq.
pub fn constructor_x64_vpabsq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpabsq, arg0);
    // Rule at src/isa/x64/inst.isle line 3951.
    return v2;
}

// Generated as internal constructor for term x64_vpopcntb.
pub fn constructor_x64_vpopcntb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpopcntb, arg0);
    // Rule at src/isa/x64/inst.isle line 3956.
    return v2;
}

// Generated as internal constructor for term x64_vpmullq.
pub fn constructor_x64_vpmullq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpmullq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3963.
    return v3;
}

// Generated as internal constructor for term x64_vpermi2b.
pub fn constructor_x64_vpermi2b<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmREvex3 {
        op: Avx512Opcode::Vpermi2b,
        src1: arg0,
        src2: arg1,
        src3: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3972.
    return v7;
}

// Generated as internal constructor for term x64_psllw.
pub fn constructor_x64_psllw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3985.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3983.
    return v4;
}

// Generated as internal constructor for term x64_pslld.
pub fn constructor_x64_pslld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpslld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3993.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Pslld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3991.
    return v4;
}

// Generated as internal constructor for term x64_psllq.
pub fn constructor_x64_psllq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4001.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3999.
    return v4;
}

// Generated as internal constructor for term x64_psrlw.
pub fn constructor_x64_psrlw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4009.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4007.
    return v4;
}

// Generated as internal constructor for term x64_psrld.
pub fn constructor_x64_psrld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4017.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4015.
    return v4;
}

// Generated as internal constructor for term x64_psrlq.
pub fn constructor_x64_psrlq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4025.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4023.
    return v4;
}

// Generated as internal constructor for term x64_psraw.
pub fn constructor_x64_psraw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsraw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4033.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psraw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4031.
    return v4;
}

// Generated as internal constructor for term x64_psrad.
pub fn constructor_x64_psrad<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrad, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4041.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrad, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4039.
    return v4;
}

// Generated as internal constructor for term x64_vpsraq.
pub fn constructor_x64_vpsraq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpsraq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4047.
    return v3;
}

// Generated as internal constructor for term x64_vpsraq_imm.
pub fn constructor_x64_vpsraq_imm<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v3 = constructor_xmm_unary_rm_r_imm_evex(ctx, &Avx512Opcode::VpsraqImm, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4052.
    return v3;
}

// Generated as internal constructor for term x64_pextrb.
pub fn constructor_x64_pextrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4059.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4057.
    return v3;
}

// Generated as internal constructor for term x64_pextrb_store.
pub fn constructor_x64_pextrb_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4066.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrb, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4064.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrw.
pub fn constructor_x64_pextrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4074.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4072.
    return v3;
}

// Generated as internal constructor for term x64_pextrw_store.
pub fn constructor_x64_pextrw_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4081.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrw, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4079.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrd.
pub fn constructor_x64_pextrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4089.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4087.
    return v3;
}

// Generated as internal constructor for term x64_pextrd_store.
pub fn constructor_x64_pextrd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4096.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrd, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4094.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrq.
pub fn constructor_x64_pextrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4104.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4102.
    return v3;
}

// Generated as internal constructor for term x64_pextrq_store.
pub fn constructor_x64_pextrq_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4111.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrq, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4109.
    return v4.clone();
}

// Generated as internal constructor for term x64_pmovmskb.
pub fn constructor_x64_pmovmskb<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vpmovmskb, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 4119.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Pmovmskb, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 4117.
    return v3;
}

// Generated as internal constructor for term x64_movmskps.
pub fn constructor_x64_movmskps<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskps, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 4127.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskps, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 4125.
    return v3;
}

// Generated as internal constructor for term x64_movmskpd.
pub fn constructor_x64_movmskpd<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskpd, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 4135.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskpd, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 4133.
    return v3;
}

// Generated as internal constructor for term x64_not.
pub fn constructor_x64_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Not {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4141.
    return v6;
}

// Generated as internal constructor for term x64_neg.
pub fn constructor_x64_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4149.
    return v6;
}

// Generated as internal constructor for term x64_neg_paired.
pub fn constructor_x64_neg_paired<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src/isa/x64/inst.isle line 4157.
    return v6;
}

// Generated as internal constructor for term x64_lea.
pub fn constructor_x64_lea<C: Context>(ctx: &mut C, arg0: Type, arg1: &SyntheticAmode) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::LoadEffectiveAddress {
        addr: arg1.clone(),
        dst: v2,
        size: v3.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4164.
    return v6;
}

// Generated as internal constructor for term x64_ud2.
pub fn constructor_x64_ud2<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Ud2 {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4171.
    return v2;
}

// Generated as internal constructor for term x64_hlt.
pub fn constructor_x64_hlt<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Hlt };
    // Rule at src/isa/x64/inst.isle line 4176.
    return v1;
}

// Generated as internal constructor for term x64_lzcnt.
pub fn constructor_x64_lzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Lzcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4181.
    return v4;
}

// Generated as internal constructor for term x64_tzcnt.
pub fn constructor_x64_tzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Tzcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4186.
    return v4;
}

// Generated as internal constructor for term x64_bsr.
pub fn constructor_x64_bsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsr,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 4191.
    return v8;
}

// Generated as internal constructor for term bsr_or_else.
pub fn constructor_bsr_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsr(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 4200.
    return v11;
}

// Generated as internal constructor for term x64_bsf.
pub fn constructor_x64_bsf<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsf,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 4211.
    return v8;
}

// Generated as internal constructor for term bsf_or_else.
pub fn constructor_bsf_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsf(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 4220.
    return v11;
}

// Generated as internal constructor for term x64_blsi.
pub fn constructor_x64_blsi<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsi, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4231.
    return v4;
}

// Generated as internal constructor for term x64_blsmsk.
pub fn constructor_x64_blsmsk<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsmsk, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4236.
    return v4;
}

// Generated as internal constructor for term x64_blsr.
pub fn constructor_x64_blsr<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsr, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4241.
    return v4;
}

// Generated as internal constructor for term x64_sarx.
pub fn constructor_x64_sarx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Sarx, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 4246.
    return v4;
}

// Generated as internal constructor for term x64_shrx.
pub fn constructor_x64_shrx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shrx, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 4251.
    return v4;
}

// Generated as internal constructor for term x64_shlx.
pub fn constructor_x64_shlx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shlx, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 4256.
    return v4;
}

// Generated as internal constructor for term x64_rorx.
pub fn constructor_x64_rorx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: u8) -> Gpr {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = constructor_unary_rm_r_imm_vex(ctx, &UnaryRmRImmVexOpcode::Rorx, arg1, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 4261.
    return v5;
}

// Generated as internal constructor for term x64_popcnt.
pub fn constructor_x64_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Popcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4269.
    return v4;
}

// Generated as internal constructor for term x64_minss.
pub fn constructor_x64_minss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4276.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4274.
    return v3;
}

// Generated as internal constructor for term x64_minsd.
pub fn constructor_x64_minsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4284.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4282.
    return v3;
}

// Generated as internal constructor for term x64_minps.
pub fn constructor_x64_minps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4292.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4290.
    return v4;
}

// Generated as internal constructor for term x64_minpd.
pub fn constructor_x64_minpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4300.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4298.
    return v4;
}

// Generated as internal constructor for term x64_maxss.
pub fn constructor_x64_maxss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4308.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4306.
    return v3;
}

// Generated as internal constructor for term x64_maxsd.
pub fn constructor_x64_maxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4316.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4314.
    return v3;
}

// Generated as internal constructor for term x64_maxps.
pub fn constructor_x64_maxps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4324.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4322.
    return v4;
}

// Generated as internal constructor for term x64_maxpd.
pub fn constructor_x64_maxpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4332.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4330.
    return v4;
}

// Generated as internal constructor for term x64_vfmadd213.
pub fn constructor_x64_vfmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4338.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4339.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4340.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4341.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd213", "src/isa/x64/inst.isle line 4337"
    )
}

// Generated as internal constructor for term x64_vfmadd132.
pub fn constructor_x64_vfmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4345.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4346.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4347.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4348.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd132", "src/isa/x64/inst.isle line 4344"
    )
}

// Generated as internal constructor for term x64_vfnmadd213.
pub fn constructor_x64_vfnmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4352.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4353.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4354.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4355.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd213", "src/isa/x64/inst.isle line 4351"
    )
}

// Generated as internal constructor for term x64_vfnmadd132.
pub fn constructor_x64_vfnmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4359.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4360.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4361.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4362.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd132", "src/isa/x64/inst.isle line 4358"
    )
}

// Generated as internal constructor for term x64_sqrtss.
pub fn constructor_x64_sqrtss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4374.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4373.
    return v3;
}

// Generated as internal constructor for term x64_sqrtsd.
pub fn constructor_x64_sqrtsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4383.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4382.
    return v3;
}

// Generated as internal constructor for term x64_sqrtps.
pub fn constructor_x64_sqrtps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtps, arg0);
        // Rule at src/isa/x64/inst.isle line 4390.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtps, v2);
    // Rule at src/isa/x64/inst.isle line 4389.
    return v3;
}

// Generated as internal constructor for term x64_sqrtpd.
pub fn constructor_x64_sqrtpd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtpd, arg0);
        // Rule at src/isa/x64/inst.isle line 4397.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtpd, v2);
    // Rule at src/isa/x64/inst.isle line 4396.
    return v3;
}

// Generated as internal constructor for term x64_cvtss2sd.
pub fn constructor_x64_cvtss2sd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtss2sd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4406.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtss2sd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4405.
    return v3;
}

// Generated as internal constructor for term x64_cvtsd2ss.
pub fn constructor_x64_cvtsd2ss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtsd2ss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4415.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtsd2ss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4414.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2ps.
pub fn constructor_x64_cvtdq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 4422.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2ps, v2);
    // Rule at src/isa/x64/inst.isle line 4421.
    return v3;
}

// Generated as internal constructor for term x64_cvtps2pd.
pub fn constructor_x64_cvtps2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtps2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 4429.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtps2pd, v2);
    // Rule at src/isa/x64/inst.isle line 4428.
    return v3;
}

// Generated as internal constructor for term x64_cvtpd2ps.
pub fn constructor_x64_cvtpd2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtpd2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 4436.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtpd2ps, v2);
    // Rule at src/isa/x64/inst.isle line 4435.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2pd.
pub fn constructor_x64_cvtdq2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 4443.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2pd, v2);
    // Rule at src/isa/x64/inst.isle line 4442.
    return v3;
}

// Generated as internal constructor for term x64_cvtsi2ss.
pub fn constructor_x64_cvtsi2ss<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2ss, arg1, arg2, v4);
        // Rule at src/isa/x64/inst.isle line 4451.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2ss, arg1, arg2, v4);
    // Rule at src/isa/x64/inst.isle line 4449.
    return v5;
}

// Generated as internal constructor for term x64_cvtsi2sd.
pub fn constructor_x64_cvtsi2sd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2sd, arg1, arg2, v4);
        // Rule at src/isa/x64/inst.isle line 4459.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2sd, arg1, arg2, v4);
    // Rule at src/isa/x64/inst.isle line 4457.
    return v5;
}

// Generated as internal constructor for term x64_cvttps2dq.
pub fn constructor_x64_cvttps2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttps2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 4467.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttps2dq, v2);
    // Rule at src/isa/x64/inst.isle line 4465.
    return v3;
}

// Generated as internal constructor for term x64_cvttpd2dq.
pub fn constructor_x64_cvttpd2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttpd2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 4475.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttpd2dq, v2);
    // Rule at src/isa/x64/inst.isle line 4473.
    return v3;
}

// Generated as internal constructor for term x64_pcmpeq.
pub fn constructor_x64_pcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpeqb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4481.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpeqw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4482.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4483.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse41(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpeqq(ctx, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 4484.
                return v7;
            }
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            let v8 = &C::xmm_to_xmm_mem(ctx, v5);
            let v10 = constructor_x64_pshufd(ctx, v8, 0xB1);
            let v11 = &C::xmm_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_pand(ctx, v5, v11);
            // Rule at src/isa/x64/inst.isle line 4493.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpeq", "src/isa/x64/inst.isle line 4480"
    )
}

// Generated as internal constructor for term x64_pcmpeqb.
pub fn constructor_x64_pcmpeqb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4500.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4499.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqw.
pub fn constructor_x64_pcmpeqw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4505.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4504.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqd.
pub fn constructor_x64_pcmpeqd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4510.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4509.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqq.
pub fn constructor_x64_pcmpeqq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4515.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4514.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgt.
pub fn constructor_x64_pcmpgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpgtb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4521.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpgtw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4522.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpgtd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4523.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse42(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpgtq(ctx, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 4527.
                return v7;
            }
            let v9 = C::emit_u128_le_const(ctx, 0x800000000000000080000000);
            let v10 = &constructor_const_to_xmm_mem(ctx, v9);
            let v11 = constructor_x64_movdqu_load(ctx, v10);
            let v12 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v13 = constructor_x64_pxor(ctx, v11, v12);
            let v14 = constructor_x64_pxor(ctx, v11, arg2);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_pcmpgtd(ctx, v13, v15);
            let v17 = &C::xmm_to_xmm_mem(ctx, v16);
            let v19 = constructor_x64_pshufd(ctx, v17, 0xA0);
            let v20 = &C::xmm_to_xmm_mem(ctx, v16);
            let v22 = constructor_x64_pshufd(ctx, v20, 0xF5);
            let v23 = &C::xmm_to_xmm_mem(ctx, v14);
            let v24 = constructor_x64_pcmpeqd(ctx, v13, v23);
            let v25 = &C::xmm_to_xmm_mem(ctx, v24);
            let v26 = constructor_x64_pshufd(ctx, v25, 0xF5);
            let v27 = &C::xmm_to_xmm_mem(ctx, v26);
            let v28 = constructor_x64_pand(ctx, v19, v27);
            let v29 = &C::xmm_to_xmm_mem(ctx, v22);
            let v30 = constructor_x64_por(ctx, v28, v29);
            // Rule at src/isa/x64/inst.isle line 4556.
            return v30;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpgt", "src/isa/x64/inst.isle line 4520"
    )
}

// Generated as internal constructor for term x64_pcmpgtb.
pub fn constructor_x64_pcmpgtb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4572.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4571.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtw.
pub fn constructor_x64_pcmpgtw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4577.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4576.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtd.
pub fn constructor_x64_pcmpgtd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4582.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4581.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtq.
pub fn constructor_x64_pcmpgtq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4587.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4586.
    return v4;
}

// Generated as internal constructor for term alu_rm.
pub fn constructor_alu_rm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: &Amode,
    arg3: Gpr,
) -> SideEffectNoResult {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::amode_to_synthetic_amode(ctx, arg2);
    let v6 = MInst::AluRM {
        size: v4.clone(),
        op: arg1.clone(),
        src1_dst: v5.clone(),
        src2: arg3,
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 4593.
    return v7;
}

// Generated as internal constructor for term x64_add_mem.
pub fn constructor_x64_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4598.
    return v4.clone();
}

// Generated as internal constructor for term x64_sub_mem.
pub fn constructor_x64_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4602.
    return v4.clone();
}

// Generated as internal constructor for term x64_and_mem.
pub fn constructor_x64_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4606.
    return v4.clone();
}

// Generated as internal constructor for term x64_or_mem.
pub fn constructor_x64_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4610.
    return v4.clone();
}

// Generated as internal constructor for term x64_xor_mem.
pub fn constructor_x64_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4614.
    return v4.clone();
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: &TrapCode) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cc: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 4619.
    return v3;
}

// Generated as internal constructor for term trap_if_and.
pub fn constructor_trap_if_and<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfAnd {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 4624.
    return v4;
}

// Generated as internal constructor for term trap_if_or.
pub fn constructor_trap_if_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 4629.
    return v4;
}

// Generated as internal constructor for term trap_if_icmp.
pub fn constructor_trap_if_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/x64/inst.isle line 4633.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_icmp", "src/isa/x64/inst.isle line 4632"
    )
}

// Generated as internal constructor for term trap_if_fcmp.
pub fn constructor_trap_if_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v4 = &constructor_trap_if(ctx, v2, arg1);
            let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
            // Rule at src/isa/x64/inst.isle line 4637.
            return v5.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v6,
            cc1: ref v7,
            cc2: ref v8,
        } => {
            let v9 = &constructor_trap_if_and(ctx, v7, v8, arg1);
            let v10 = &constructor_with_flags_side_effect(ctx, v6, v9);
            // Rule at src/isa/x64/inst.isle line 4639.
            return v10.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v11,
            cc1: ref v12,
            cc2: ref v13,
        } => {
            let v14 = &constructor_trap_if_or(ctx, v12, v13, arg1);
            let v15 = &constructor_with_flags_side_effect(ctx, v11, v14);
            // Rule at src/isa/x64/inst.isle line 4641.
            return v15.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_fcmp", "src/isa/x64/inst.isle line 4636"
    )
}

// Generated as internal constructor for term x64_movddup.
pub fn constructor_x64_movddup<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovddup, arg0);
        // Rule at src/isa/x64/inst.isle line 4648.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movddup, arg0);
    // Rule at src/isa/x64/inst.isle line 4646.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastb.
pub fn constructor_x64_vpbroadcastb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastb, arg0);
    // Rule at src/isa/x64/inst.isle line 4654.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastw.
pub fn constructor_x64_vpbroadcastw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastw, arg0);
    // Rule at src/isa/x64/inst.isle line 4659.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastd.
pub fn constructor_x64_vpbroadcastd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastd, arg0);
    // Rule at src/isa/x64/inst.isle line 4664.
    return v2;
}

// Generated as internal constructor for term x64_vbroadcastss.
pub fn constructor_x64_vbroadcastss<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vbroadcastss, arg0);
    // Rule at src/isa/x64/inst.isle line 4669.
    return v2;
}

// Generated as internal constructor for term jmp_known.
pub fn constructor_jmp_known<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::JmpKnown { dst: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4676.
    return v2;
}

// Generated as internal constructor for term jmp_if.
pub fn constructor_jmp_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: MachLabel) -> ConsumesFlags {
    let v2 = MInst::JmpIf {
        cc: arg0.clone(),
        taken: arg1,
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 4680.
    return v3;
}

// Generated as internal constructor for term jmp_cond.
pub fn constructor_jmp_cond<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: MachLabel,
    arg2: MachLabel,
) -> ConsumesFlags {
    let v3 = MInst::JmpCond {
        cc: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 4685.
    return v4;
}

// Generated as internal constructor for term jmp_cond_icmp.
pub fn constructor_jmp_cond_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/x64/inst.isle line 4690.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_icmp", "src/isa/x64/inst.isle line 4689"
    )
}

// Generated as internal constructor for term jmp_cond_fcmp.
pub fn constructor_jmp_cond_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
            let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
            // Rule at src/isa/x64/inst.isle line 4695.
            return v6.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v7,
            cc1: ref v8,
            cc2: ref v9,
        } => {
            let v10 = &C::cc_invert(ctx, v8);
            let v11 = &constructor_jmp_if(ctx, v10, arg2);
            let v12 = &C::cc_invert(ctx, v9);
            let v13 = &constructor_jmp_cond(ctx, v12, arg2, arg1);
            let v14 = &constructor_consumes_flags_concat(ctx, v11, v13);
            let v15 = &constructor_with_flags_side_effect(ctx, v7, v14);
            // Rule at src/isa/x64/inst.isle line 4697.
            return v15.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v16,
            cc1: ref v17,
            cc2: ref v18,
        } => {
            let v19 = &constructor_jmp_if(ctx, v17, arg1);
            let v20 = &constructor_jmp_cond(ctx, v18, arg1, arg2);
            let v21 = &constructor_consumes_flags_concat(ctx, v19, v20);
            let v22 = &constructor_with_flags_side_effect(ctx, v16, v21);
            // Rule at src/isa/x64/inst.isle line 4702.
            return v22.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_fcmp", "src/isa/x64/inst.isle line 4694"
    )
}

// Generated as internal constructor for term jmp_table_seq.
pub fn constructor_jmp_table_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = C::writable_gpr_to_reg(ctx, v5);
    let v9 = MInst::JmpTableSeq {
        idx: v6,
        tmp1: v7,
        tmp2: v8,
        default_target: arg2,
        targets: arg3.clone(),
    };
    let v10 = SideEffectNoResult::Inst { inst: v9 };
    // Rule at src/isa/x64/inst.isle line 4722.
    return v10;
}

// Generated as internal constructor for term icmp_cond_result.
pub fn constructor_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &CC,
) -> IcmpCondResult {
    let v2 = IcmpCondResult::Condition {
        producer: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 4741.
    return v2;
}

// Generated as internal constructor for term invert_icmp_cond_result.
pub fn constructor_invert_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> IcmpCondResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cc_invert(ctx, v2);
        let v4 = &constructor_icmp_cond_result(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 4744.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_icmp_cond_result", "src/isa/x64/inst.isle line 4743"
    )
}

// Generated as internal constructor for term lower_icmp_bool.
pub fn constructor_lower_icmp_bool<C: Context>(ctx: &mut C, arg0: &IcmpCondResult) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &constructor_x64_setcc(ctx, v2);
        let v4 = constructor_with_flags(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 4749.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_bool", "src/isa/x64/inst.isle line 4748"
    )
}

// Generated as internal constructor for term select_icmp.
pub fn constructor_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: Value,
    arg2: Value,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = C::value_type(ctx, arg1);
        let v5 = &C::type_register_class(ctx, v4);
        if let Some(v6) = v5 {
            if let &RegisterClass::Gpr {
                single_register: v7,
            } = v6
            {
                if v7 == true {
                    let v9 = constructor_put_in_gpr(ctx, arg1);
                    let v10 = &C::gpr_to_gpr_mem(ctx, v9);
                    let v11 = constructor_put_in_gpr(ctx, arg2);
                    let v12 = &constructor_cmove(ctx, v4, v2, v10, v11);
                    let v13 = constructor_with_flags(ctx, v1, v12);
                    // Rule at src/isa/x64/inst.isle line 4758.
                    return v13;
                }
            }
        }
        let v14 = &constructor_cmove_from_values(ctx, v4, v2, arg1, arg2);
        let v15 = constructor_with_flags(ctx, v1, v14);
        // Rule at src/isa/x64/inst.isle line 4762.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_icmp", "src/isa/x64/inst.isle line 4753"
    )
}

// Generated as internal constructor for term emit_cmp.
pub fn constructor_emit_cmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IcmpCondResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        let v44 = C::put_in_regs(ctx, arg1);
        let v46 = constructor_value_regs_get_gpr(ctx, v44, 0x0);
        let v47 = C::put_in_regs(ctx, arg1);
        let v49 = constructor_value_regs_get_gpr(ctx, v47, 0x1);
        let v50 = C::put_in_regs(ctx, arg2);
        let v51 = constructor_value_regs_get_gpr(ctx, v50, 0x0);
        let v52 = C::put_in_regs(ctx, arg2);
        let v53 = constructor_value_regs_get_gpr(ctx, v52, 0x1);
        let v54 = &C::intcc_to_cc(ctx, arg0);
        let v55 = &constructor_emit_cmp_i128(ctx, v54, v49, v46, v53, v51);
        // Rule at src/isa/x64/inst.isle line 4793.
        return v55.clone();
    }
    let v29 = C::def_inst(ctx, arg1);
    if let Some(v30) = v29 {
        let v31 = &C::inst_data(ctx, v30);
        if let &InstructionData::UnaryImm {
            opcode: ref v32,
            imm: v33,
        } = v31
        {
            if let &Opcode::Iconst = v32 {
                let v34 = C::u64_from_imm64(ctx, v33);
                if v34 == 0x0 {
                    let v35 = C::value_type(ctx, arg2);
                    let v36 = &C::raw_operand_size_of_type(ctx, v35);
                    let v37 = C::put_in_reg(ctx, arg2);
                    let v38 = C::gpr_new(ctx, v37);
                    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
                    let v40 = &constructor_x64_test(ctx, v36, v38, v39);
                    let v41 = &C::intcc_swap_args(ctx, arg0);
                    let v42 = &C::intcc_to_cc(ctx, v41);
                    let v43 = &constructor_icmp_cond_result(ctx, v40, v42);
                    // Rule at src/isa/x64/inst.isle line 4786.
                    return v43.clone();
                }
            }
        }
    }
    let v17 = C::def_inst(ctx, arg2);
    if let Some(v18) = v17 {
        let v19 = &C::inst_data(ctx, v18);
        if let &InstructionData::UnaryImm {
            opcode: ref v20,
            imm: v21,
        } = v19
        {
            if let &Opcode::Iconst = v20 {
                let v22 = C::u64_from_imm64(ctx, v21);
                if v22 == 0x0 {
                    let v4 = &C::raw_operand_size_of_type(ctx, v2);
                    let v23 = C::put_in_reg(ctx, arg1);
                    let v24 = C::gpr_new(ctx, v23);
                    let v25 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                    let v26 = &constructor_x64_test(ctx, v4, v24, v25);
                    let v27 = &C::intcc_to_cc(ctx, arg0);
                    let v28 = &constructor_icmp_cond_result(ctx, v26, v27);
                    // Rule at src/isa/x64/inst.isle line 4781.
                    return v28.clone();
                }
            }
        }
    }
    let v10 = &C::simm32_from_value(ctx, arg1);
    if let Some(v11) = v10 {
        let v4 = &C::raw_operand_size_of_type(ctx, v2);
        let v12 = constructor_put_in_gpr(ctx, arg2);
        let v13 = &constructor_x64_cmp(ctx, v4, v12, v11);
        let v14 = &C::intcc_swap_args(ctx, arg0);
        let v15 = &C::intcc_to_cc(ctx, v14);
        let v16 = &constructor_icmp_cond_result(ctx, v13, v15);
        // Rule at src/isa/x64/inst.isle line 4776.
        return v16.clone();
    }
    let v4 = &C::raw_operand_size_of_type(ctx, v2);
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = &constructor_put_in_gpr_mem_imm(ctx, arg2);
    let v7 = &constructor_x64_cmp(ctx, v4, v5, v6);
    let v8 = &C::intcc_to_cc(ctx, arg0);
    let v9 = &constructor_icmp_cond_result(ctx, v7, v8);
    // Rule at src/isa/x64/inst.isle line 4769.
    return v9.clone();
}

// Generated as internal constructor for term emit_cmp_i128.
pub fn constructor_emit_cmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
    arg4: Gpr,
) -> IcmpCondResult {
    match arg0 {
        &CC::BE => {
            let v12 = &constructor_emit_cmp_i128(ctx, &CC::NB, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4808.
            return v12.clone();
        }
        &CC::NBE => {
            let v10 = &constructor_emit_cmp_i128(ctx, &CC::B, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4806.
            return v10.clone();
        }
        &CC::LE => {
            let v8 = &constructor_emit_cmp_i128(ctx, &CC::NL, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4804.
            return v8.clone();
        }
        &CC::NLE => {
            let v6 = &constructor_emit_cmp_i128(ctx, &CC::L, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4802.
            return v6.clone();
        }
        _ => {}
    }
    let v13 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v14) = v13 {
        let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
        let v17 = constructor_x64_xor(ctx, I64, arg2, v16);
        let v18 = C::gpr_to_reg(ctx, v17);
        let v19 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
        let v20 = constructor_x64_xor(ctx, I64, arg1, v19);
        let v21 = C::gpr_to_reg(ctx, v20);
        let v23 = C::gpr_new(ctx, v18);
        let v24 = &constructor_reg_to_gpr_mem_imm(ctx, v21);
        let v25 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Or, I64, v23, v24);
        let v26 = &constructor_icmp_cond_result(ctx, v25, v14);
        // Rule at src/isa/x64/inst.isle line 4813.
        return v26.clone();
    }
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
    let v28 = &constructor_x64_cmp(ctx, &OperandSize::Size64, arg2, v16);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
    let v31 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Sbb, I64, arg1, v30);
    let v32 = &constructor_produces_flags_concat(ctx, v28, v31);
    let v33 = &constructor_icmp_cond_result(ctx, v32, arg0);
    // Rule at src/isa/x64/inst.isle line 4823.
    return v33.clone();
}

// Generated as internal constructor for term lower_fcmp_bool.
pub fn constructor_lower_fcmp_bool<C: Context>(ctx: &mut C, arg0: &FcmpCondResult) -> ValueRegs {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v3 = &constructor_x64_setcc(ctx, v2);
            let v4 = constructor_with_flags(ctx, v1, v3);
            // Rule at src/isa/x64/inst.isle line 4844.
            return v4;
        }
        &FcmpCondResult::AndCondition {
            producer: ref v5,
            cc1: ref v6,
            cc2: ref v7,
        } => {
            let v8 = &constructor_x64_setcc(ctx, v6);
            let v9 = &constructor_x64_setcc(ctx, v7);
            let v10 = &constructor_consumes_flags_concat(ctx, v8, v9);
            let v11 = constructor_with_flags(ctx, v5, v10);
            let v13 = constructor_value_regs_get_gpr(ctx, v11, 0x0);
            let v15 = constructor_value_regs_get_gpr(ctx, v11, 0x1);
            let v17 = &C::gpr_to_gpr_mem_imm(ctx, v15);
            let v18 = constructor_x64_and(ctx, I8, v13, v17);
            let v19 = C::gpr_to_reg(ctx, v18);
            let v20 = C::value_reg(ctx, v19);
            // Rule at src/isa/x64/inst.isle line 4847.
            return v20;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v21,
            cc1: ref v22,
            cc2: ref v23,
        } => {
            let v24 = &constructor_x64_setcc(ctx, v22);
            let v25 = &constructor_x64_setcc(ctx, v23);
            let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
            let v27 = constructor_with_flags(ctx, v21, v26);
            let v28 = constructor_value_regs_get_gpr(ctx, v27, 0x0);
            let v29 = constructor_value_regs_get_gpr(ctx, v27, 0x1);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
            let v31 = constructor_x64_or(ctx, I8, v28, v30);
            let v32 = C::gpr_to_reg(ctx, v31);
            let v33 = C::value_reg(ctx, v32);
            // Rule at src/isa/x64/inst.isle line 4856.
            return v33;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcmp_bool", "src/isa/x64/inst.isle line 4842"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> FcmpCondResult {
    match arg0 {
        &FloatCC::Equal => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v11 = FcmpCondResult::AndCondition {
                    producer: v8.clone(),
                    cc1: CC::NP,
                    cc2: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 4883.
                return v11;
            }
        }
        &FloatCC::GreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v20 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 4899.
                return v20;
            }
        }
        &FloatCC::GreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v22 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 4901.
                return v22;
            }
        }
        &FloatCC::LessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v30 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 4911.
                return v30;
            }
        }
        &FloatCC::LessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v31 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 4914.
                return v31;
            }
        }
        &FloatCC::NotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v14 = FcmpCondResult::OrCondition {
                    producer: v8.clone(),
                    cc1: CC::P,
                    cc2: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 4886.
                return v14;
            }
        }
        &FloatCC::Ordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v15 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NP,
                };
                // Rule at src/isa/x64/inst.isle line 4891.
                return v15;
            }
        }
        &FloatCC::OrderedNotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v17 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 4895.
                return v17;
            }
        }
        &FloatCC::Unordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v16 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::P,
                };
                // Rule at src/isa/x64/inst.isle line 4893.
                return v16;
            }
        }
        &FloatCC::UnorderedOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v18 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 4897.
                return v18;
            }
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v32 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 4917.
                return v32;
            }
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v33 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 4920.
                return v33;
            }
        }
        &FloatCC::UnorderedOrLessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v24 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 4903.
                return v24;
            }
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v26 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 4905.
                return v26;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/x64/inst.isle line 4881"
    )
}

// Generated as internal constructor for term x64_mfence.
pub fn constructor_x64_mfence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = MInst::Fence {
        kind: FenceKind::MFence,
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4933.
    return v2;
}

// Generated as internal constructor for term x64_cmpxchg.
pub fn constructor_x64_cmpxchg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: &SyntheticAmode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::gpr_to_reg(ctx, arg2);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = MInst::LockCmpxchg {
        ty: arg0,
        replacement: v5,
        expected: v6,
        mem: arg3.clone(),
        dst_old: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4937.
    return v10;
}

// Generated as internal constructor for term x64_atomic_rmw_seq.
pub fn constructor_x64_atomic_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MachAtomicRmwOp,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg3);
    let v7 = C::writable_gpr_to_reg(ctx, v5);
    let v8 = C::writable_gpr_to_reg(ctx, v4);
    let v9 = MInst::AtomicRmwSeq {
        ty: arg0,
        op: arg1.clone(),
        mem: arg2.clone(),
        operand: v6,
        temp: v7,
        dst_old: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4943.
    return v11;
}

// Generated as internal constructor for term bitcast_xmm_to_gpr.
pub fn constructor_bitcast_xmm_to_gpr<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Gpr {
    match arg0 {
        F32 => {
            let v2 = constructor_x64_movd_to_gpr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 4958.
            return v2;
        }
        F64 => {
            let v3 = constructor_x64_movq_to_gpr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 4960.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_xmm_to_gpr", "src/isa/x64/inst.isle line 4957"
    )
}

// Generated as internal constructor for term bitcast_gpr_to_xmm.
pub fn constructor_bitcast_gpr_to_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    match arg0 {
        I32 => {
            let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v3 = constructor_x64_movd_to_xmm(ctx, v2);
            // Rule at src/isa/x64/inst.isle line 4964.
            return v3;
        }
        I64 => {
            let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v4 = constructor_x64_movq_to_xmm(ctx, v2);
            // Rule at src/isa/x64/inst.isle line 4966.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_gpr_to_xmm", "src/isa/x64/inst.isle line 4963"
    )
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4972.
    return v6;
}

// Generated as internal constructor for term x64_checked_srem_seq.
pub fn constructor_x64_checked_srem_seq<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CheckedSRemSeq {
        size: arg0.clone(),
        dividend_lo: arg1,
        dividend_hi: arg2,
        divisor: arg3,
        dst_quotient: v4,
        dst_remainder: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
    let v10 = C::value_regs(ctx, v8, v9);
    // Rule at src/isa/x64/inst.isle line 4981.
    return v10;
}

// Generated as internal constructor for term x64_checked_srem_seq8.
pub fn constructor_x64_checked_srem_seq8<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CheckedSRemSeq8 {
        dividend: arg0,
        divisor: arg1,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4988.
    return v5;
}

// Generated as internal constructor for term x64_div8.
pub fn constructor_x64_div8<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
    arg2: &DivSignedness,
    arg3: &TrapCode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::Div8 {
        sign: arg2.clone(),
        trap: arg3.clone(),
        divisor: arg1.clone(),
        dividend: arg0,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4995.
    return v7;
}

// Generated as internal constructor for term x64_div.
pub fn constructor_x64_div<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_gpr(ctx);
    let v8 = MInst::Div {
        size: arg3.clone(),
        sign: arg4.clone(),
        trap: arg5.clone(),
        divisor: arg2.clone(),
        dividend_lo: arg0,
        dividend_hi: arg1,
        dst_quotient: v6,
        dst_remainder: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = constructor_writable_gpr_to_r_reg(ctx, v6);
    let v11 = constructor_writable_gpr_to_r_reg(ctx, v7);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src/isa/x64/inst.isle line 5005.
    return v12;
}

// Generated as internal constructor for term x64_div_quotient.
pub fn constructor_x64_div_quotient<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x0);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src/isa/x64/inst.isle line 5013.
    return v9;
}

// Generated as internal constructor for term x64_div_remainder.
pub fn constructor_x64_div_remainder<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x1);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src/isa/x64/inst.isle line 5018.
    return v9;
}

// Generated as internal constructor for term x64_sign_extend_data.
pub fn constructor_x64_sign_extend_data<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &OperandSize,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::SignExtendData {
        size: arg1.clone(),
        src: arg0,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 5023.
    return v5;
}

// Generated as internal constructor for term read_pinned_gpr.
pub fn constructor_read_pinned_gpr<C: Context>(ctx: &mut C) -> Gpr {
    let v0 = C::preg_pinned(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5031.
    return v2;
}

// Generated as internal constructor for term write_pinned_gpr.
pub fn constructor_write_pinned_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/x64/inst.isle line 5035.
    return v2.clone();
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5077.
    return v4;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5084.
    return v4;
}

// Generated as internal constructor for term coff_tls_get_addr.
pub fn constructor_coff_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CoffTlsGetAddr {
        symbol: arg0,
        dst: v1,
        tmp: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5091.
    return v5;
}

// Generated as internal constructor for term reg_to_xmm_mem.
pub fn constructor_reg_to_xmm_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5178.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_reg_mem.
pub fn constructor_xmm_to_reg_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = C::xmm_to_reg(ctx, v1);
    let v3 = RegMem::Reg { reg: v2 };
    let v4 = &C::reg_mem_to_xmm_mem(ctx, &v3);
    // Rule at src/isa/x64/inst.isle line 5181.
    return v4.clone();
}

// Generated as internal constructor for term writable_gpr_to_r_reg.
pub fn constructor_writable_gpr_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableGpr) -> Reg {
    let v1 = C::writable_gpr_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5185.
    return v2;
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem.
pub fn constructor_writable_gpr_to_gpr_mem<C: Context>(ctx: &mut C, arg0: WritableGpr) -> GprMem {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5188.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_value_regs.
pub fn constructor_writable_gpr_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> ValueRegs {
    let v1 = constructor_writable_gpr_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5191.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_r_reg.
pub fn constructor_writable_xmm_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableXmm) -> Reg {
    let v1 = C::writable_xmm_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5194.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_xmm_mem.
pub fn constructor_writable_xmm_to_xmm_mem<C: Context>(ctx: &mut C, arg0: WritableXmm) -> XmmMem {
    let v1 = C::writable_xmm_to_xmm(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5197.
    return v2.clone();
}

// Generated as internal constructor for term writable_xmm_to_value_regs.
pub fn constructor_writable_xmm_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> ValueRegs {
    let v1 = constructor_writable_xmm_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5200.
    return v2;
}

// Generated as internal constructor for term synthetic_amode_to_gpr_mem.
pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> GprMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5207.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_gpr_mem.
pub fn constructor_amode_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> GprMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5205.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem.
pub fn constructor_amode_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> XmmMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5210.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem.
pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5213.
    return v2.clone();
}

// Generated as internal constructor for term const_to_xmm_mem.
pub fn constructor_const_to_xmm_mem<C: Context>(ctx: &mut C, arg0: VCodeConstant) -> XmmMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5218.
    return v2.clone();
}

// Generated as internal constructor for term const_to_reg_mem.
pub fn constructor_const_to_reg_mem<C: Context>(ctx: &mut C, arg0: VCodeConstant) -> RegMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    // Rule at src/isa/x64/inst.isle line 5220.
    return v2;
}

// Generated as internal constructor for term xmm_to_xmm_mem_aligned.
pub fn constructor_xmm_to_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Xmm) -> XmmMemAligned {
    let v1 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5223.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem_aligned.
pub fn constructor_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMemAligned {
    let v1 = &constructor_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5225.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem_aligned.
pub fn constructor_synthetic_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMemAligned {
    let v1 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5227.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm_mem_aligned.
pub fn constructor_put_in_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Value) -> XmmMemAligned {
    let v1 = &C::put_in_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5229.
    return v2.clone();
}

// Generated as internal constructor for term copy_gpr.
pub fn constructor_copy_gpr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::MovRR {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 5238.
    return v6;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        src: arg1,
        dst: arg0,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 5246.
    return v3;
}

// Generated as internal constructor for term x64_rbp.
pub fn constructor_x64_rbp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rbp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 5259.
    return v1;
}

// Generated as internal constructor for term x64_rsp.
pub fn constructor_x64_rsp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rsp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 5263.
    return v1;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v6 = &C::inst_data(ctx, arg0);
    match v6 {
        &InstructionData::AtomicCas {
            opcode: ref v1841,
            args: ref v1842,
            flags: v1843,
        } => {
            if let &Opcode::AtomicCas = v1841 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1816 = C::ty_int(ctx, v3);
                        if let Some(v1817) = v1816 {
                            let v1844 = C::unpack_value_array_3(ctx, v1842);
                            let v1848 = constructor_put_in_gpr(ctx, v1844.1);
                            let v1849 = constructor_put_in_gpr(ctx, v1844.2);
                            let v1850 = C::zero_offset(ctx);
                            let v1851 = &constructor_to_amode(ctx, v1843, v1844.0, v1850);
                            let v1852 = &C::amode_to_synthetic_amode(ctx, v1851);
                            let v1853 = constructor_x64_cmpxchg(ctx, v5, v1848, v1849, v1852);
                            let v1854 = constructor_output_gpr(ctx, v1853);
                            // Rule at src/isa/x64/lower.isle line 3254.
                            return Some(v1854);
                        }
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1855,
            args: ref v1856,
            flags: v1857,
            op: ref v1858,
        } => {
            if let &Opcode::AtomicRmw = v1855 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1816 = C::ty_int(ctx, v3);
                        if let Some(v1817) = v1816 {
                            let v1862 = &C::atomic_rmw_op_to_mach_atomic_rmw_op(ctx, v1858);
                            let v1818 = C::zero_offset(ctx);
                            let v1859 = C::unpack_value_array_2(ctx, v1856);
                            let v1863 = &constructor_to_amode(ctx, v1857, v1859.0, v1818);
                            let v1864 = &C::amode_to_synthetic_amode(ctx, v1863);
                            let v1865 = constructor_put_in_gpr(ctx, v1859.1);
                            let v1866 =
                                constructor_x64_atomic_rmw_seq(ctx, v5, v1862, v1864, v1865);
                            let v1867 = constructor_output_gpr(ctx, v1866);
                            // Rule at src/isa/x64/lower.isle line 3270.
                            return Some(v1867);
                        }
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v36,
            args: ref v37,
        } => {
            match v36 {
                &Opcode::Swizzle => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                    let v2503 = C::emit_u128_le_const(ctx, 0x70707070707070707070707070707070);
                    let v2504 = &constructor_const_to_xmm_mem(ctx, v2503);
                    let v2505 = constructor_x64_paddusb(ctx, v1374, v2504);
                    let v343 = constructor_put_in_xmm(ctx, v38.0);
                    let v2506 = C::xmm_to_reg(ctx, v2505);
                    let v2507 = &constructor_xmm_to_reg_mem(ctx, v2506);
                    let v2508 = &C::xmm_mem_to_reg_mem(ctx, v2507);
                    let v2509 = constructor_lower_pshufb(ctx, v343, v2508);
                    let v2510 = constructor_output_xmm(ctx, v2509);
                    // Rule at src/isa/x64/lower.isle line 4431.
                    return Some(v2510);
                }
                &Opcode::X86Pshufb => {
                    let v540 = C::use_ssse3(ctx);
                    if v540 == true {
                        let v38 = C::unpack_value_array_2(ctx, v37);
                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                        let v2511 = constructor_x64_pshufb(ctx, v68, v69);
                        let v2512 = constructor_output_xmm(ctx, v2511);
                        // Rule at src/isa/x64/lower.isle line 4437.
                        return Some(v2512);
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v867 = C::ty_vec128(ctx, v3);
                        if let Some(v868) = v867 {
                            let v871 = constructor_has_pmins(ctx, v868);
                            if v871 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v872 = constructor_x64_pmins(ctx, v868, v68, v69);
                                let v873 = constructor_output_xmm(ctx, v872);
                                // Rule at src/isa/x64/lower.isle line 1721.
                                return Some(v873);
                            }
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v459 = constructor_put_in_xmm(ctx, v38.1);
                            let v316 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v874 = constructor_x64_pcmpgt(ctx, v868, v459, v316);
                            let v318 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v875 = constructor_x64_pand(ctx, v874, v318);
                            let v464 = &C::xmm_to_xmm_mem(ctx, v459);
                            let v876 = constructor_x64_pandn(ctx, v874, v464);
                            let v877 = &C::xmm_to_xmm_mem(ctx, v876);
                            let v878 = constructor_x64_por(ctx, v875, v877);
                            let v879 = constructor_output_xmm(ctx, v878);
                            // Rule at src/isa/x64/lower.isle line 1725.
                            return Some(v879);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v862 = constructor_cmp_and_choose(ctx, v5, &CC::L, v38.0, v38.1);
                            let v863 = C::output(ctx, v862);
                            // Rule at src/isa/x64/lower.isle line 1671.
                            return Some(v863);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v867 = C::ty_vec128(ctx, v3);
                        if let Some(v868) = v867 {
                            let v901 = constructor_has_pminu(ctx, v868);
                            if v901 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v902 = constructor_x64_pminu(ctx, v868, v68, v69);
                                let v903 = constructor_output_xmm(ctx, v902);
                                // Rule at src/isa/x64/lower.isle line 1773.
                                return Some(v903);
                            }
                        }
                        if v3 == I16X8 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v150 = constructor_x64_psubusw(ctx, v68, v69);
                            let v904 = &C::xmm_to_xmm_mem(ctx, v150);
                            let v905 = constructor_x64_psubw(ctx, v68, v904);
                            let v906 = constructor_output_xmm(ctx, v905);
                            // Rule at src/isa/x64/lower.isle line 1779.
                            return Some(v906);
                        }
                        if let Some(v868) = v867 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v459 = constructor_put_in_xmm(ctx, v38.1);
                            let v887 = constructor_flip_high_bit_mask(ctx, v868);
                            let v888 = &C::xmm_to_xmm_mem(ctx, v887);
                            let v889 = constructor_x64_pxor(ctx, v68, v888);
                            let v890 = &C::xmm_to_xmm_mem(ctx, v887);
                            let v891 = constructor_x64_pxor(ctx, v459, v890);
                            let v907 = &C::xmm_to_xmm_mem(ctx, v889);
                            let v908 = constructor_x64_pcmpgt(ctx, v868, v891, v907);
                            let v894 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v909 = constructor_x64_pand(ctx, v908, v894);
                            let v896 = &C::xmm_to_xmm_mem(ctx, v459);
                            let v910 = constructor_x64_pandn(ctx, v908, v896);
                            let v911 = &C::xmm_to_xmm_mem(ctx, v910);
                            let v912 = constructor_x64_por(ctx, v909, v911);
                            let v913 = constructor_output_xmm(ctx, v912);
                            // Rule at src/isa/x64/lower.isle line 1784.
                            return Some(v913);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v856 = constructor_cmp_and_choose(ctx, v5, &CC::B, v38.0, v38.1);
                            let v857 = C::output(ctx, v856);
                            // Rule at src/isa/x64/lower.isle line 1665.
                            return Some(v857);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v867 = C::ty_vec128(ctx, v3);
                        if let Some(v868) = v867 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v459 = constructor_put_in_xmm(ctx, v38.1);
                            let v869 = constructor_lower_vec_smax(ctx, v868, v68, v459);
                            let v870 = constructor_output_xmm(ctx, v869);
                            // Rule at src/isa/x64/lower.isle line 1701.
                            return Some(v870);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v865 = constructor_cmp_and_choose(ctx, v5, &CC::NL, v38.0, v38.1);
                            let v866 = C::output(ctx, v865);
                            // Rule at src/isa/x64/lower.isle line 1674.
                            return Some(v866);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v867 = C::ty_vec128(ctx, v3);
                        if let Some(v868) = v867 {
                            let v880 = constructor_has_pmaxu(ctx, v868);
                            if v880 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v881 = constructor_x64_pmaxu(ctx, v868, v68, v69);
                                let v882 = constructor_output_xmm(ctx, v881);
                                // Rule at src/isa/x64/lower.isle line 1737.
                                return Some(v882);
                            }
                        }
                        if v3 == I16X8 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v459 = constructor_put_in_xmm(ctx, v38.1);
                            let v316 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v883 = constructor_x64_psubusw(ctx, v459, v316);
                            let v884 = &C::xmm_to_xmm_mem(ctx, v883);
                            let v885 = constructor_x64_paddw(ctx, v68, v884);
                            let v886 = constructor_output_xmm(ctx, v885);
                            // Rule at src/isa/x64/lower.isle line 1743.
                            return Some(v886);
                        }
                        if let Some(v868) = v867 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v459 = constructor_put_in_xmm(ctx, v38.1);
                            let v887 = constructor_flip_high_bit_mask(ctx, v868);
                            let v888 = &C::xmm_to_xmm_mem(ctx, v887);
                            let v889 = constructor_x64_pxor(ctx, v68, v888);
                            let v890 = &C::xmm_to_xmm_mem(ctx, v887);
                            let v891 = constructor_x64_pxor(ctx, v459, v890);
                            let v892 = &C::xmm_to_xmm_mem(ctx, v891);
                            let v893 = constructor_x64_pcmpgt(ctx, v868, v889, v892);
                            let v894 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v895 = constructor_x64_pand(ctx, v893, v894);
                            let v896 = &C::xmm_to_xmm_mem(ctx, v459);
                            let v897 = constructor_x64_pandn(ctx, v893, v896);
                            let v898 = &C::xmm_to_xmm_mem(ctx, v897);
                            let v899 = constructor_x64_por(ctx, v895, v898);
                            let v900 = constructor_output_xmm(ctx, v899);
                            // Rule at src/isa/x64/lower.isle line 1750.
                            return Some(v900);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v859 = constructor_cmp_and_choose(ctx, v5, &CC::NB, v38.0, v38.1);
                            let v860 = C::output(ctx, v859);
                            // Rule at src/isa/x64/lower.isle line 1668.
                            return Some(v860);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v415 = constructor_x64_pavgb(ctx, v68, v69);
                                        let v416 = constructor_output_xmm(ctx, v415);
                                        // Rule at src/isa/x64/lower.isle line 958.
                                        return Some(v416);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v417 = constructor_x64_pavgw(ctx, v68, v69);
                                        let v418 = constructor_output_xmm(ctx, v417);
                                        // Rule at src/isa/x64/lower.isle line 962.
                                        return Some(v418);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v126 = constructor_x64_paddusb(ctx, v68, v69);
                                        let v127 = constructor_output_xmm(ctx, v126);
                                        // Rule at src/isa/x64/lower.isle line 196.
                                        return Some(v127);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v128 = constructor_x64_paddusw(ctx, v68, v69);
                                        let v129 = constructor_output_xmm(ctx, v128);
                                        // Rule at src/isa/x64/lower.isle line 200.
                                        return Some(v129);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v122 = constructor_x64_paddsb(ctx, v68, v69);
                                        let v123 = constructor_output_xmm(ctx, v122);
                                        // Rule at src/isa/x64/lower.isle line 186.
                                        return Some(v123);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v124 = constructor_x64_paddsw(ctx, v68, v69);
                                        let v125 = constructor_output_xmm(ctx, v124);
                                        // Rule at src/isa/x64/lower.isle line 190.
                                        return Some(v125);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v148 = constructor_x64_psubusb(ctx, v68, v69);
                                        let v149 = constructor_output_xmm(ctx, v148);
                                        // Rule at src/isa/x64/lower.isle line 257.
                                        return Some(v149);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v150 = constructor_x64_psubusw(ctx, v68, v69);
                                        let v151 = constructor_output_xmm(ctx, v150);
                                        // Rule at src/isa/x64/lower.isle line 261.
                                        return Some(v151);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v144 = constructor_x64_psubsb(ctx, v68, v69);
                                        let v145 = constructor_output_xmm(ctx, v144);
                                        // Rule at src/isa/x64/lower.isle line 247.
                                        return Some(v145);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v146 = constructor_x64_psubsw(ctx, v68, v69);
                                        let v147 = constructor_output_xmm(ctx, v146);
                                        // Rule at src/isa/x64/lower.isle line 251.
                                        return Some(v147);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v86 = &C::gpr_to_gpr_mem_imm(ctx, v84);
                            let v87 = &constructor_x64_add_with_flags_paired(ctx, I64, v80, v86);
                            let v88 = &C::gpr_to_gpr_mem_imm(ctx, v85);
                            let v89 = &constructor_x64_adc_paired(ctx, I64, v82, v88);
                            let v90 = constructor_with_flags(ctx, v87, v89);
                            let v91 = C::output(ctx, v90);
                            // Rule at src/isa/x64/lower.isle line 88.
                            return Some(v91);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v70 = constructor_x64_paddb(ctx, v68, v69);
                                        let v71 = constructor_output_xmm(ctx, v70);
                                        // Rule at src/isa/x64/lower.isle line 71.
                                        return Some(v71);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v72 = constructor_x64_paddw(ctx, v68, v69);
                                        let v73 = constructor_output_xmm(ctx, v72);
                                        // Rule at src/isa/x64/lower.isle line 75.
                                        return Some(v73);
                                    }
                                }
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v74 = constructor_x64_paddd(ctx, v68, v69);
                                        let v75 = constructor_output_xmm(ctx, v74);
                                        // Rule at src/isa/x64/lower.isle line 79.
                                        return Some(v75);
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v76 = constructor_x64_paddq(ctx, v68, v69);
                                        let v77 = constructor_output_xmm(ctx, v76);
                                        // Rule at src/isa/x64/lower.isle line 83.
                                        return Some(v77);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v62 = constructor_x64_add(ctx, v5, v60, v61);
                                let v63 = constructor_output_gpr(ctx, v62);
                                // Rule at src/isa/x64/lower.isle line 65.
                                return Some(v63);
                            }
                            let v53 = &C::sinkable_load(ctx, v38.1);
                            if let Some(v54) = v53 {
                                let v41 = constructor_put_in_gpr(ctx, v38.0);
                                let v55 = &constructor_sink_load_to_gpr_mem_imm(ctx, v54);
                                let v56 = constructor_x64_add(ctx, v5, v41, v55);
                                let v57 = constructor_output_gpr(ctx, v56);
                                // Rule at src/isa/x64/lower.isle line 62.
                                return Some(v57);
                            }
                        }
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v48 = C::zero_offset(ctx);
                            let v47 = C::mem_flags_trusted(ctx);
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v49 = &constructor_to_amode_add(ctx, v47, v38.0, v38.1, v48);
                            let v50 = &C::amode_to_synthetic_amode(ctx, v49);
                            let v51 = constructor_x64_lea(ctx, v46, v50);
                            let v52 = constructor_output_gpr(ctx, v51);
                            // Rule at src/isa/x64/lower.isle line 56.
                            return Some(v52);
                        }
                        let v34 = C::fits_in_16(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v43 = constructor_x64_add(ctx, v35, v41, v42);
                            let v44 = constructor_output_gpr(ctx, v43);
                            // Rule at src/isa/x64/lower.isle line 45.
                            return Some(v44);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v86 = &C::gpr_to_gpr_mem_imm(ctx, v84);
                            let v140 = &constructor_x64_sub_with_flags_paired(ctx, I64, v80, v86);
                            let v88 = &C::gpr_to_gpr_mem_imm(ctx, v85);
                            let v141 = &constructor_x64_sbb_paired(ctx, I64, v82, v88);
                            let v142 = constructor_with_flags(ctx, v140, v141);
                            let v143 = C::output(ctx, v142);
                            // Rule at src/isa/x64/lower.isle line 232.
                            return Some(v143);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v132 = constructor_x64_psubb(ctx, v68, v69);
                                        let v133 = constructor_output_xmm(ctx, v132);
                                        // Rule at src/isa/x64/lower.isle line 215.
                                        return Some(v133);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v134 = constructor_x64_psubw(ctx, v68, v69);
                                        let v135 = constructor_output_xmm(ctx, v134);
                                        // Rule at src/isa/x64/lower.isle line 219.
                                        return Some(v135);
                                    }
                                }
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v136 = constructor_x64_psubd(ctx, v68, v69);
                                        let v137 = constructor_output_xmm(ctx, v136);
                                        // Rule at src/isa/x64/lower.isle line 223.
                                        return Some(v137);
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v138 = constructor_x64_psubq(ctx, v68, v69);
                                        let v139 = constructor_output_xmm(ctx, v138);
                                        // Rule at src/isa/x64/lower.isle line 227.
                                        return Some(v139);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v130 = constructor_x64_sub(ctx, v5, v41, v42);
                            let v131 = constructor_output_gpr(ctx, v130);
                            // Rule at src/isa/x64/lower.isle line 209.
                            return Some(v131);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            if v65.0 == 0x40 {
                                if v65.1 == 0x2 {
                                    let v332 = C::use_avx512vl(ctx);
                                    if v332 == true {
                                        let v476 = C::use_avx512dq(ctx);
                                        if v476 == true {
                                            let v38 = C::unpack_value_array_2(ctx, v37);
                                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                            let v477 = constructor_x64_vpmullq(ctx, v68, v69);
                                            let v478 = constructor_output_xmm(ctx, v477);
                                            // Rule at src/isa/x64/lower.isle line 1052.
                                            return Some(v478);
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v440 = &C::gpr_to_gpr_mem(ctx, v85);
                            let v441 = constructor_x64_imul(ctx, I64, v80, v440);
                            let v442 = &C::gpr_to_gpr_mem(ctx, v84);
                            let v443 = constructor_x64_imul(ctx, I64, v82, v442);
                            let v444 = &C::gpr_to_gpr_mem_imm(ctx, v443);
                            let v445 = constructor_x64_add(ctx, I64, v441, v444);
                            let v446 = &C::gpr_to_gpr_mem(ctx, v84);
                            let v447 = constructor_x64_mul(ctx, I64, false, v80, v446);
                            let v448 = constructor_value_regs_get_gpr(ctx, v447, 0x0);
                            let v449 = constructor_value_regs_get_gpr(ctx, v447, 0x1);
                            let v450 = &C::gpr_to_gpr_mem_imm(ctx, v449);
                            let v451 = constructor_x64_add(ctx, I64, v445, v450);
                            let v452 = constructor_value_gprs(ctx, v448, v451);
                            let v453 = C::output(ctx, v452);
                            // Rule at src/isa/x64/lower.isle line 1002.
                            return Some(v453);
                        }
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v454 = constructor_x64_pmullw(ctx, v68, v69);
                                        let v455 = constructor_output_xmm(ctx, v454);
                                        // Rule at src/isa/x64/lower.isle line 1029.
                                        return Some(v455);
                                    }
                                }
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v171 = C::def_inst(ctx, v38.1);
                                        if let Some(v172) = v171 {
                                            let v173 = &C::inst_data(ctx, v172);
                                            if let &InstructionData::Unary {
                                                opcode: ref v174,
                                                arg: v175,
                                            } = v173
                                            {
                                                match v174 {
                                                    &Opcode::SwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenLow = v183 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    let v497 =
                                                                        C::multi_lane(ctx, v496);
                                                                    if let Some(v498) = v497 {
                                                                        if v498.0 == 0x10 {
                                                                            if v498.1 == 0x8 {
                                                                                let v501 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v502 =
                                                                                    C::multi_lane(
                                                                                        ctx, v501,
                                                                                    );
                                                                                if let Some(v503) =
                                                                                    v502
                                                                                {
                                                                                    if v503.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v503.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v506 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v507 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v508 = constructor_x64_pmullw(ctx, v185, v507);
                                                                                            let v509 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v510 = constructor_x64_pmulhw(ctx, v185, v509);
                                                                                            let v511 = &C::xmm_to_xmm_mem(ctx, v510);
                                                                                            let v522 = constructor_x64_punpcklwd(ctx, v508, v511);
                                                                                            let v523 = constructor_output_xmm(ctx, v522);
                                                                                            // Rule at src/isa/x64/lower.isle line 1122.
                                                                                            return Some(v523);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenHigh = v183 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    let v497 =
                                                                        C::multi_lane(ctx, v496);
                                                                    if let Some(v498) = v497 {
                                                                        if v498.0 == 0x10 {
                                                                            if v498.1 == 0x8 {
                                                                                let v501 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v502 =
                                                                                    C::multi_lane(
                                                                                        ctx, v501,
                                                                                    );
                                                                                if let Some(v503) =
                                                                                    v502
                                                                                {
                                                                                    if v503.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v503.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v506 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v507 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v508 = constructor_x64_pmullw(ctx, v185, v507);
                                                                                            let v509 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v510 = constructor_x64_pmulhw(ctx, v185, v509);
                                                                                            let v511 = &C::xmm_to_xmm_mem(ctx, v510);
                                                                                            let v512 = constructor_x64_punpckhwd(ctx, v508, v511);
                                                                                            let v513 = constructor_output_xmm(ctx, v512);
                                                                                            // Rule at src/isa/x64/lower.isle line 1099.
                                                                                            return Some(v513);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenLow = v183 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    let v497 =
                                                                        C::multi_lane(ctx, v496);
                                                                    if let Some(v498) = v497 {
                                                                        if v498.0 == 0x10 {
                                                                            if v498.1 == 0x8 {
                                                                                let v501 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v502 =
                                                                                    C::multi_lane(
                                                                                        ctx, v501,
                                                                                    );
                                                                                if let Some(v503) =
                                                                                    v502
                                                                                {
                                                                                    if v503.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v503.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v506 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v507 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v508 = constructor_x64_pmullw(ctx, v185, v507);
                                                                                            let v509 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v530 = constructor_x64_pmulhuw(ctx, v185, v509);
                                                                                            let v531 = &C::xmm_to_xmm_mem(ctx, v530);
                                                                                            let v536 = constructor_x64_punpcklwd(ctx, v508, v531);
                                                                                            let v537 = constructor_output_xmm(ctx, v536);
                                                                                            // Rule at src/isa/x64/lower.isle line 1167.
                                                                                            return Some(v537);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenHigh = v183 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    let v497 =
                                                                        C::multi_lane(ctx, v496);
                                                                    if let Some(v498) = v497 {
                                                                        if v498.0 == 0x10 {
                                                                            if v498.1 == 0x8 {
                                                                                let v501 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v502 =
                                                                                    C::multi_lane(
                                                                                        ctx, v501,
                                                                                    );
                                                                                if let Some(v503) =
                                                                                    v502
                                                                                {
                                                                                    if v503.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v503.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v506 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v507 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v508 = constructor_x64_pmullw(ctx, v185, v507);
                                                                                            let v509 = &C::xmm_to_xmm_mem(ctx, v506);
                                                                                            let v530 = constructor_x64_pmulhuw(ctx, v185, v509);
                                                                                            let v531 = &C::xmm_to_xmm_mem(ctx, v530);
                                                                                            let v532 = constructor_x64_punpckhwd(ctx, v508, v531);
                                                                                            let v533 = constructor_output_xmm(ctx, v532);
                                                                                            // Rule at src/isa/x64/lower.isle line 1145.
                                                                                            return Some(v533);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v456 = C::use_sse41(ctx);
                                        if v456 == true {
                                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                            let v457 = constructor_x64_pmulld(ctx, v68, v69);
                                            let v458 = constructor_output_xmm(ctx, v457);
                                            // Rule at src/isa/x64/lower.isle line 1032.
                                            return Some(v458);
                                        }
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v459 = constructor_put_in_xmm(ctx, v38.1);
                                        let v316 = &C::xmm_to_xmm_mem(ctx, v68);
                                        let v461 = constructor_x64_pshufd(ctx, v316, 0x31);
                                        let v462 = &C::xmm_to_xmm_mem(ctx, v459);
                                        let v463 = constructor_x64_pshufd(ctx, v462, 0x31);
                                        let v464 = &C::xmm_to_xmm_mem(ctx, v459);
                                        let v465 = constructor_x64_pmuludq(ctx, v68, v464);
                                        let v466 = &C::xmm_to_xmm_mem(ctx, v465);
                                        let v468 = constructor_x64_pshufd(ctx, v466, 0x8);
                                        let v469 = &C::xmm_to_xmm_mem(ctx, v463);
                                        let v470 = constructor_x64_pmuludq(ctx, v461, v469);
                                        let v471 = &C::xmm_to_xmm_mem(ctx, v470);
                                        let v472 = constructor_x64_pshufd(ctx, v471, 0x8);
                                        let v473 = &C::xmm_to_xmm_mem(ctx, v472);
                                        let v474 = constructor_x64_punpckldq(ctx, v468, v473);
                                        let v475 = constructor_output_xmm(ctx, v474);
                                        // Rule at src/isa/x64/lower.isle line 1039.
                                        return Some(v475);
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v171 = C::def_inst(ctx, v38.1);
                                        if let Some(v172) = v171 {
                                            let v173 = &C::inst_data(ctx, v172);
                                            if let &InstructionData::Unary {
                                                opcode: ref v174,
                                                arg: v175,
                                            } = v173
                                            {
                                                match v174 {
                                                    &Opcode::SwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenLow = v183 {
                                                                    let v456 = C::use_sse41(ctx);
                                                                    if v456 == true {
                                                                        let v496 = C::value_type(
                                                                            ctx, v184,
                                                                        );
                                                                        let v497 = C::multi_lane(
                                                                            ctx, v496,
                                                                        );
                                                                        if let Some(v498) = v497 {
                                                                            if v498.0 == 0x20 {
                                                                                if v498.1 == 0x4 {
                                                                                    let v501 = C::value_type(ctx, v175);
                                                                                    let v502 = C::multi_lane(ctx, v501);
                                                                                    if let Some(
                                                                                        v503,
                                                                                    ) = v502
                                                                                    {
                                                                                        if v503.0
                                                                                            == 0x20
                                                                                        {
                                                                                            if v503.1 == 0x4 {
                                                                                                let v514 = &C::put_in_xmm_mem(ctx, v184);
                                                                                                let v525 = constructor_x64_pshufd(ctx, v514, 0x50);
                                                                                                let v517 = &C::put_in_xmm_mem(ctx, v175);
                                                                                                let v526 = constructor_x64_pshufd(ctx, v517, 0x50);
                                                                                                let v527 = &C::xmm_to_xmm_mem(ctx, v526);
                                                                                                let v528 = constructor_x64_pmuldq(ctx, v525, v527);
                                                                                                let v529 = constructor_output_xmm(ctx, v528);
                                                                                                // Rule at src/isa/x64/lower.isle line 1134.
                                                                                                return Some(v529);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenHigh = v183 {
                                                                    let v456 = C::use_sse41(ctx);
                                                                    if v456 == true {
                                                                        let v496 = C::value_type(
                                                                            ctx, v184,
                                                                        );
                                                                        let v497 = C::multi_lane(
                                                                            ctx, v496,
                                                                        );
                                                                        if let Some(v498) = v497 {
                                                                            if v498.0 == 0x20 {
                                                                                if v498.1 == 0x4 {
                                                                                    let v501 = C::value_type(ctx, v175);
                                                                                    let v502 = C::multi_lane(ctx, v501);
                                                                                    if let Some(
                                                                                        v503,
                                                                                    ) = v502
                                                                                    {
                                                                                        if v503.0
                                                                                            == 0x20
                                                                                        {
                                                                                            if v503.1 == 0x4 {
                                                                                                let v514 = &C::put_in_xmm_mem(ctx, v184);
                                                                                                let v516 = constructor_x64_pshufd(ctx, v514, 0xFA);
                                                                                                let v517 = &C::put_in_xmm_mem(ctx, v175);
                                                                                                let v518 = constructor_x64_pshufd(ctx, v517, 0xFA);
                                                                                                let v519 = &C::xmm_to_xmm_mem(ctx, v518);
                                                                                                let v520 = constructor_x64_pmuldq(ctx, v516, v519);
                                                                                                let v521 = constructor_output_xmm(ctx, v520);
                                                                                                // Rule at src/isa/x64/lower.isle line 1111.
                                                                                                return Some(v521);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenLow = v183 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    let v497 =
                                                                        C::multi_lane(ctx, v496);
                                                                    if let Some(v498) = v497 {
                                                                        if v498.0 == 0x20 {
                                                                            if v498.1 == 0x4 {
                                                                                let v501 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v502 =
                                                                                    C::multi_lane(
                                                                                        ctx, v501,
                                                                                    );
                                                                                if let Some(v503) =
                                                                                    v502
                                                                                {
                                                                                    if v503.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v503.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v514 = &C::put_in_xmm_mem(ctx, v184);
                                                                                            let v525 = constructor_x64_pshufd(ctx, v514, 0x50);
                                                                                            let v517 = &C::put_in_xmm_mem(ctx, v175);
                                                                                            let v526 = constructor_x64_pshufd(ctx, v517, 0x50);
                                                                                            let v527 = &C::xmm_to_xmm_mem(ctx, v526);
                                                                                            let v538 = constructor_x64_pmuludq(ctx, v525, v527);
                                                                                            let v539 = constructor_output_xmm(ctx, v538);
                                                                                            // Rule at src/isa/x64/lower.isle line 1179.
                                                                                            return Some(v539);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenHigh = v183 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    let v497 =
                                                                        C::multi_lane(ctx, v496);
                                                                    if let Some(v498) = v497 {
                                                                        if v498.0 == 0x20 {
                                                                            if v498.1 == 0x4 {
                                                                                let v501 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v502 =
                                                                                    C::multi_lane(
                                                                                        ctx, v501,
                                                                                    );
                                                                                if let Some(v503) =
                                                                                    v502
                                                                                {
                                                                                    if v503.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v503.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v514 = &C::put_in_xmm_mem(ctx, v184);
                                                                                            let v516 = constructor_x64_pshufd(ctx, v514, 0xFA);
                                                                                            let v517 = &C::put_in_xmm_mem(ctx, v175);
                                                                                            let v518 = constructor_x64_pshufd(ctx, v517, 0xFA);
                                                                                            let v519 = &C::xmm_to_xmm_mem(ctx, v518);
                                                                                            let v534 = constructor_x64_pmuludq(ctx, v516, v519);
                                                                                            let v535 = constructor_output_xmm(ctx, v534);
                                                                                            // Rule at src/isa/x64/lower.isle line 1157.
                                                                                            return Some(v535);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v459 = constructor_put_in_xmm(ctx, v38.1);
                                        let v480 = &C::xmi_imm(ctx, 0x20);
                                        let v481 = constructor_x64_psrlq(ctx, v68, v480);
                                        let v462 = &C::xmm_to_xmm_mem(ctx, v459);
                                        let v482 = constructor_x64_pmuludq(ctx, v481, v462);
                                        let v483 = &C::xmi_imm(ctx, 0x20);
                                        let v484 = constructor_x64_psrlq(ctx, v459, v483);
                                        let v485 = &C::xmm_to_xmm_mem(ctx, v484);
                                        let v486 = constructor_x64_pmuludq(ctx, v68, v485);
                                        let v487 = &C::xmm_to_xmm_mem(ctx, v486);
                                        let v488 = constructor_x64_paddq(ctx, v482, v487);
                                        let v489 = &C::xmi_imm(ctx, 0x20);
                                        let v490 = constructor_x64_psllq(ctx, v488, v489);
                                        let v491 = &C::xmm_to_xmm_mem(ctx, v459);
                                        let v492 = constructor_x64_pmuludq(ctx, v68, v491);
                                        let v493 = &C::xmm_to_xmm_mem(ctx, v490);
                                        let v494 = constructor_x64_paddq(ctx, v492, v493);
                                        let v495 = constructor_output_xmm(ctx, v494);
                                        // Rule at src/isa/x64/lower.isle line 1077.
                                        return Some(v495);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v424 = C::ty_int_ref_16_to_64(ctx, v3);
                        if let Some(v425) = v424 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v180 = C::def_inst(ctx, v38.0);
                            if let Some(v181) = v180 {
                                let v182 = &C::inst_data(ctx, v181);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v434,
                                    imm: v435,
                                } = v182
                                {
                                    if let &Opcode::Iconst = v434 {
                                        let v436 = C::simm32(ctx, v435);
                                        if let Some(v437) = v436 {
                                            let v203 = &constructor_put_in_gpr_mem(ctx, v38.1);
                                            let v438 =
                                                constructor_x64_imul_imm(ctx, v425, v203, v437);
                                            let v439 = constructor_output_gpr(ctx, v438);
                                            // Rule at src/isa/x64/lower.isle line 984.
                                            return Some(v439);
                                        }
                                    }
                                }
                            }
                            let v171 = C::def_inst(ctx, v38.1);
                            if let Some(v172) = v171 {
                                let v173 = &C::inst_data(ctx, v172);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v330,
                                    imm: v331,
                                } = v173
                                {
                                    if let &Opcode::Iconst = v330 {
                                        let v430 = C::simm32(ctx, v331);
                                        if let Some(v431) = v430 {
                                            let v198 = &constructor_put_in_gpr_mem(ctx, v38.0);
                                            let v432 =
                                                constructor_x64_imul_imm(ctx, v425, v198, v431);
                                            let v433 = constructor_output_gpr(ctx, v432);
                                            // Rule at src/isa/x64/lower.isle line 982.
                                            return Some(v433);
                                        }
                                    }
                                }
                            }
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v421 = &constructor_sink_load_to_gpr_mem(ctx, v59);
                                let v428 = constructor_x64_imul(ctx, v425, v60, v421);
                                let v429 = constructor_output_gpr(ctx, v428);
                                // Rule at src/isa/x64/lower.isle line 978.
                                return Some(v429);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v426 = constructor_x64_imul(ctx, v425, v41, v110);
                            let v427 = constructor_output_gpr(ctx, v426);
                            // Rule at src/isa/x64/lower.isle line 976.
                            return Some(v427);
                        }
                        if v3 == I8 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v421 = &constructor_sink_load_to_gpr_mem(ctx, v59);
                                let v422 = constructor_x64_mul8(ctx, false, v60, v421);
                                let v423 = constructor_output_gpr(ctx, v422);
                                // Rule at src/isa/x64/lower.isle line 973.
                                return Some(v423);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v419 = constructor_x64_mul8(ctx, false, v41, v110);
                            let v420 = constructor_output_gpr(ctx, v419);
                            // Rule at src/isa/x64/lower.isle line 972.
                            return Some(v420);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2223 = C::value_type(ctx, v38.0);
                    let v2370 = C::ty_int_ref_16_to_64(ctx, v2223);
                    if let Some(v2371) = v2370 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v2372 = constructor_x64_mul(ctx, v2371, false, v41, v110);
                        let v2373 = constructor_value_regs_get_gpr(ctx, v2372, 0x1);
                        let v2374 = constructor_output_gpr(ctx, v2373);
                        // Rule at src/isa/x64/lower.isle line 4244.
                        return Some(v2374);
                    }
                    if v2223 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v419 = constructor_x64_mul8(ctx, false, v41, v110);
                        let v2367 = &C::imm8_to_imm8_gpr(ctx, 0x8);
                        let v2368 = constructor_x64_shr(ctx, I16, v419, v2367);
                        let v2369 = constructor_output_gpr(ctx, v2368);
                        // Rule at src/isa/x64/lower.isle line 4241.
                        return Some(v2369);
                    }
                }
                &Opcode::Smulhi => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2223 = C::value_type(ctx, v38.0);
                    let v2370 = C::ty_int_ref_16_to_64(ctx, v2223);
                    if let Some(v2371) = v2370 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v2378 = constructor_x64_mul(ctx, v2371, true, v41, v110);
                        let v2379 = constructor_value_regs_get_gpr(ctx, v2378, 0x1);
                        let v2380 = constructor_output_gpr(ctx, v2379);
                        // Rule at src/isa/x64/lower.isle line 4252.
                        return Some(v2380);
                    }
                    if v2223 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v2375 = constructor_x64_mul8(ctx, true, v41, v110);
                        let v2367 = &C::imm8_to_imm8_gpr(ctx, 0x8);
                        let v2376 = constructor_x64_sar(ctx, I16, v2375, v2367);
                        let v2377 = constructor_output_gpr(ctx, v2376);
                        // Rule at src/isa/x64/lower.isle line 4249.
                        return Some(v2377);
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2223 = C::value_type(ctx, v38.0);
                    if v2223 == I16X8 {
                        let v540 = C::use_ssse3(ctx);
                        if v540 == true {
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v459 = constructor_put_in_xmm(ctx, v38.1);
                            let v2690 =
                                C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
                            let v2691 = &constructor_const_to_xmm_mem(ctx, v2690);
                            let v462 = &C::xmm_to_xmm_mem(ctx, v459);
                            let v2692 = constructor_x64_pmulhrsw(ctx, v68, v462);
                            let v2693 = constructor_x64_pcmpeqw(ctx, v2692, v2691);
                            let v2694 = &C::xmm_to_xmm_mem(ctx, v2693);
                            let v2695 = constructor_x64_pxor(ctx, v2692, v2694);
                            let v2696 = constructor_output_xmm(ctx, v2695);
                            // Rule at src/isa/x64/lower.isle line 4721.
                            return Some(v2696);
                        }
                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                        let v459 = constructor_put_in_xmm(ctx, v38.1);
                        let v2106 = &C::xmm_to_xmm_mem(ctx, v459);
                        let v2697 = constructor_x64_pmullw(ctx, v68, v2106);
                        let v462 = &C::xmm_to_xmm_mem(ctx, v459);
                        let v2698 = constructor_x64_pmulhw(ctx, v68, v462);
                        let v2699 = &C::xmm_to_xmm_mem(ctx, v2698);
                        let v2700 = constructor_x64_punpcklwd(ctx, v2697, v2699);
                        let v2701 = &C::xmm_to_xmm_mem(ctx, v2698);
                        let v2702 = constructor_x64_punpckhwd(ctx, v2697, v2701);
                        let v2704 = C::emit_u128_le_const(ctx, 0x4000000040000000400000004000);
                        let v2705 = &constructor_const_to_xmm_mem(ctx, v2704);
                        let v2706 = constructor_x64_movdqu_load(ctx, v2705);
                        let v2707 = &C::xmm_to_xmm_mem(ctx, v2706);
                        let v2708 = constructor_x64_paddd(ctx, v2700, v2707);
                        let v2709 = &C::xmm_to_xmm_mem(ctx, v2706);
                        let v2710 = constructor_x64_paddd(ctx, v2702, v2709);
                        let v2712 = &C::xmi_imm(ctx, 0xF);
                        let v2713 = constructor_x64_psrad(ctx, v2708, v2712);
                        let v2714 = &C::xmi_imm(ctx, 0xF);
                        let v2715 = constructor_x64_psrad(ctx, v2710, v2714);
                        let v2716 = &C::xmm_to_xmm_mem(ctx, v2715);
                        let v2717 = constructor_x64_packssdw(ctx, v2713, v2716);
                        let v2718 = constructor_output_xmm(ctx, v2717);
                        // Rule at src/isa/x64/lower.isle line 4737.
                        return Some(v2718);
                    }
                }
                &Opcode::X86Pmulhrsw => {
                    let v540 = C::use_ssse3(ctx);
                    if v540 == true {
                        let v38 = C::unpack_value_array_2(ctx, v37);
                        let v2223 = C::value_type(ctx, v38.0);
                        if v2223 == I16X8 {
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v2719 = constructor_x64_pmulhrsw(ctx, v68, v69);
                            let v2720 = constructor_output_xmm(ctx, v2719);
                            // Rule at src/isa/x64/lower.isle line 4763.
                            return Some(v2720);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2223 = C::value_type(ctx, v38.0);
                    if v2223 == I8 {
                        let v2311 = constructor_extend_to_gpr(ctx, v38.0, I32, &ExtendKind::Zero);
                        let v356 = constructor_put_in_gpr(ctx, v38.1);
                        let v2312 = &C::gpr_to_gpr_mem(ctx, v356);
                        let v2315 = constructor_x64_div8(
                            ctx,
                            v2311,
                            v2312,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2316 = constructor_output_gpr(ctx, v2315);
                        // Rule at src/isa/x64/lower.isle line 4120.
                        return Some(v2316);
                    }
                    let v2317 = C::fits_in_64(ctx, v2223);
                    if let Some(v2318) = v2317 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v2319 = C::gpr_new(ctx, v15);
                        let v2320 = constructor_put_in_gpr(ctx, v38.1);
                        let v2321 = &C::gpr_to_gpr_mem(ctx, v2320);
                        let v2322 = &C::raw_operand_size_of_type(ctx, v2318);
                        let v2323 = constructor_x64_div_quotient(
                            ctx,
                            v41,
                            v2319,
                            v2321,
                            v2322,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2324 = C::output(ctx, v2323);
                        // Rule at src/isa/x64/lower.isle line 4129.
                        return Some(v2324);
                    }
                }
                &Opcode::Sdiv => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2223 = C::value_type(ctx, v38.0);
                    if v2223 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v2326 = constructor_x64_sign_extend_data(ctx, v41, &OperandSize::Size8);
                        let v2327 = constructor_nonzero_sdiv_divisor(ctx, I8, v38.1);
                        let v2328 = &C::reg_to_gpr_mem(ctx, v2327);
                        let v2331 = constructor_x64_div8(
                            ctx,
                            v2326,
                            v2328,
                            &DivSignedness::Signed,
                            &TrapCode::IntegerOverflow,
                        );
                        let v2332 = constructor_output_gpr(ctx, v2331);
                        // Rule at src/isa/x64/lower.isle line 4139.
                        return Some(v2332);
                    }
                    let v2317 = C::fits_in_64(ctx, v2223);
                    if let Some(v2318) = v2317 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v2333 = &C::raw_operand_size_of_type(ctx, v2318);
                        let v2334 = constructor_x64_sign_extend_data(ctx, v41, v2333);
                        let v2335 = constructor_nonzero_sdiv_divisor(ctx, v2318, v38.1);
                        let v2336 = &C::reg_to_gpr_mem(ctx, v2335);
                        let v2337 = constructor_x64_div_quotient(
                            ctx,
                            v41,
                            v2334,
                            v2336,
                            v2333,
                            &DivSignedness::Signed,
                            &TrapCode::IntegerOverflow,
                        );
                        let v2338 = C::output(ctx, v2337);
                        // Rule at src/isa/x64/lower.isle line 4145.
                        return Some(v2338);
                    }
                }
                &Opcode::Urem => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2223 = C::value_type(ctx, v38.0);
                    if v2223 == I8 {
                        let v2311 = constructor_extend_to_gpr(ctx, v38.0, I32, &ExtendKind::Zero);
                        let v356 = constructor_put_in_gpr(ctx, v38.1);
                        let v2312 = &C::gpr_to_gpr_mem(ctx, v356);
                        let v2315 = constructor_x64_div8(
                            ctx,
                            v2311,
                            v2312,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v1330 = Imm8Reg::Imm8 { imm: 0x8 };
                        let v2339 = &C::imm8_reg_to_imm8_gpr(ctx, &v1330);
                        let v2340 = constructor_x64_shr(ctx, I64, v2315, v2339);
                        let v2341 = constructor_output_gpr(ctx, v2340);
                        // Rule at src/isa/x64/lower.isle line 4178.
                        return Some(v2341);
                    }
                    let v2317 = C::fits_in_64(ctx, v2223);
                    if let Some(v2318) = v2317 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v2319 = C::gpr_new(ctx, v15);
                        let v2320 = constructor_put_in_gpr(ctx, v38.1);
                        let v2321 = &C::gpr_to_gpr_mem(ctx, v2320);
                        let v2322 = &C::raw_operand_size_of_type(ctx, v2318);
                        let v2342 = constructor_x64_div_remainder(
                            ctx,
                            v41,
                            v2319,
                            v2321,
                            v2322,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2343 = C::output(ctx, v2342);
                        // Rule at src/isa/x64/lower.isle line 4187.
                        return Some(v2343);
                    }
                }
                &Opcode::Srem => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v171 = C::def_inst(ctx, v38.1);
                    if let Some(v172) = v171 {
                        let v173 = &C::inst_data(ctx, v172);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v330,
                            imm: v331,
                        } = v173
                        {
                            if let &Opcode::Iconst = v330 {
                                let v2223 = C::value_type(ctx, v38.0);
                                if v2223 == I8 {
                                    let v2344 = C::safe_divisor_from_imm64(ctx, I8, v331);
                                    if let Some(v2345) = v2344 {
                                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                                        let v2326 = constructor_x64_sign_extend_data(
                                            ctx,
                                            v41,
                                            &OperandSize::Size8,
                                        );
                                        let v2346 = constructor_imm(ctx, I8, v2345);
                                        let v2347 = &C::reg_to_gpr_mem(ctx, v2346);
                                        let v2348 = constructor_x64_div8(
                                            ctx,
                                            v2326,
                                            v2347,
                                            &DivSignedness::Signed,
                                            &TrapCode::IntegerDivisionByZero,
                                        );
                                        let v1330 = Imm8Reg::Imm8 { imm: 0x8 };
                                        let v2349 = &C::imm8_reg_to_imm8_gpr(ctx, &v1330);
                                        let v2350 = constructor_x64_shr(ctx, I64, v2348, v2349);
                                        let v2351 = constructor_output_gpr(ctx, v2350);
                                        // Rule at src/isa/x64/lower.isle line 4202.
                                        return Some(v2351);
                                    }
                                }
                                let v2352 = C::safe_divisor_from_imm64(ctx, v2223, v331);
                                if let Some(v2353) = v2352 {
                                    let v41 = constructor_put_in_gpr(ctx, v38.0);
                                    let v2354 = &C::raw_operand_size_of_type(ctx, v2223);
                                    let v2355 = constructor_x64_sign_extend_data(ctx, v41, v2354);
                                    let v2356 = constructor_imm(ctx, v2223, v2353);
                                    let v2357 = &C::reg_to_gpr_mem(ctx, v2356);
                                    let v2358 = constructor_x64_div_remainder(
                                        ctx,
                                        v41,
                                        v2355,
                                        v2357,
                                        v2354,
                                        &DivSignedness::Signed,
                                        &TrapCode::IntegerDivisionByZero,
                                    );
                                    let v2359 = C::output(ctx, v2358);
                                    // Rule at src/isa/x64/lower.isle line 4211.
                                    return Some(v2359);
                                }
                            }
                        }
                    }
                    let v2223 = C::value_type(ctx, v38.0);
                    if v2223 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v2326 = constructor_x64_sign_extend_data(ctx, v41, &OperandSize::Size8);
                        let v2360 = constructor_put_in_gpr(ctx, v38.1);
                        let v2361 = constructor_x64_checked_srem_seq8(ctx, v2326, v2360);
                        let v1330 = Imm8Reg::Imm8 { imm: 0x8 };
                        let v2339 = &C::imm8_reg_to_imm8_gpr(ctx, &v1330);
                        let v2362 = constructor_x64_shr(ctx, I64, v2361, v2339);
                        let v2363 = constructor_output_gpr(ctx, v2362);
                        // Rule at src/isa/x64/lower.isle line 4224.
                        return Some(v2363);
                    }
                    let v41 = constructor_put_in_gpr(ctx, v38.0);
                    let v2354 = &C::raw_operand_size_of_type(ctx, v2223);
                    let v2355 = constructor_x64_sign_extend_data(ctx, v41, v2354);
                    let v2320 = constructor_put_in_gpr(ctx, v38.1);
                    let v2364 = constructor_x64_checked_srem_seq(ctx, v2354, v41, v2355, v2320);
                    let v2365 = C::value_regs_get(ctx, v2364, 0x1);
                    let v2366 = constructor_output_reg(ctx, v2365);
                    // Rule at src/isa/x64/lower.isle line 4230.
                    return Some(v2366);
                }
                &Opcode::UaddOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v97 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::B,
                            &AluRmiROpcode::Add,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 137.
                        return Some(v97);
                    }
                    if v92 == I128 {
                        let v99 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::B,
                            &AluRmiROpcode::Add,
                            &AluRmiROpcode::Adc,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 141.
                        return Some(v99);
                    }
                }
                &Opcode::SaddOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v101 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::O,
                            &AluRmiROpcode::Add,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 146.
                        return Some(v101);
                    }
                    if v92 == I128 {
                        let v102 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::O,
                            &AluRmiROpcode::Add,
                            &AluRmiROpcode::Adc,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 149.
                        return Some(v102);
                    }
                }
                &Opcode::UsubOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v104 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::B,
                            &AluRmiROpcode::Sub,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 154.
                        return Some(v104);
                    }
                    if v92 == I128 {
                        let v106 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::B,
                            &AluRmiROpcode::Sub,
                            &AluRmiROpcode::Sbb,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 157.
                        return Some(v106);
                    }
                }
                &Opcode::SsubOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v107 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::O,
                            &AluRmiROpcode::Sub,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 162.
                        return Some(v107);
                    }
                    if v92 == I128 {
                        let v108 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::O,
                            &AluRmiROpcode::Sub,
                            &AluRmiROpcode::Sbb,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 165.
                        return Some(v108);
                    }
                }
                &Opcode::UmulOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v113 = C::ty_int_ref_16_to_64(ctx, v92);
                    if let Some(v114) = v113 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v115 =
                            &constructor_x64_mul_lo_with_flags_paired(ctx, v114, false, v41, v110);
                        let v116 = constructor_construct_overflow_op(ctx, &CC::O, v115);
                        // Rule at src/isa/x64/lower.isle line 173.
                        return Some(v116);
                    }
                    if v92 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v111 = &constructor_x64_mul8_with_flags_paired(ctx, false, v41, v110);
                        let v112 = constructor_construct_overflow_op(ctx, &CC::O, v111);
                        // Rule at src/isa/x64/lower.isle line 170.
                        return Some(v112);
                    }
                }
                &Opcode::SmulOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v113 = C::ty_int_ref_16_to_64(ctx, v92);
                    if let Some(v114) = v113 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v120 =
                            &constructor_x64_mul_lo_with_flags_paired(ctx, v114, true, v41, v110);
                        let v121 = constructor_construct_overflow_op(ctx, &CC::O, v120);
                        // Rule at src/isa/x64/lower.isle line 181.
                        return Some(v121);
                    }
                    if v92 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v118 = &constructor_x64_mul8_with_flags_paired(ctx, true, v41, v110);
                        let v119 = constructor_construct_overflow_op(ctx, &CC::O, v118);
                        // Rule at src/isa/x64/lower.isle line 178.
                        return Some(v119);
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v196 = constructor_val_minus_one(ctx, v38.1);
                            if let Some(v197) = v196 {
                                let v211 = C::use_bmi2(ctx);
                                if v211 == true {
                                    let v212 = C::def_inst(ctx, v197);
                                    if let Some(v213) = v212 {
                                        let v214 = &C::inst_data(ctx, v213);
                                        if let &InstructionData::Binary {
                                            opcode: ref v215,
                                            args: ref v216,
                                        } = v214
                                        {
                                            if let &Opcode::Ishl = v215 {
                                                let v217 = C::unpack_value_array_2(ctx, v216);
                                                let v220 = C::def_inst(ctx, v217.0);
                                                if let Some(v221) = v220 {
                                                    let v222 = &C::inst_data(ctx, v221);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v223,
                                                        imm: v224,
                                                    } = v222
                                                    {
                                                        if let &Opcode::Iconst = v223 {
                                                            let v225 = C::u64_from_imm64(ctx, v224);
                                                            if v225 == 0x1 {
                                                                let v198 =
                                                                    &constructor_put_in_gpr_mem(
                                                                        ctx, v38.0,
                                                                    );
                                                                let v226 = constructor_put_in_gpr(
                                                                    ctx, v217.1,
                                                                );
                                                                let v227 = C::ty_bits(ctx, v46);
                                                                let v228 = C::u8_as_u32(ctx, v227);
                                                                let v230 =
                                                                    C::u32_sub(ctx, v228, 0x1);
                                                                let v231 =
                                                                    RegMemImm::Imm { simm32: v230 };
                                                                let v232 =
                                                                    &C::gpr_mem_imm_new(ctx, &v231);
                                                                let v233 = constructor_x64_and(
                                                                    ctx, v46, v226, v232,
                                                                );
                                                                let v234 = constructor_x64_bzhi(
                                                                    ctx, v46, v198, v233,
                                                                );
                                                                let v235 = constructor_output_gpr(
                                                                    ctx, v234,
                                                                );
                                                                // Rule at src/isa/x64/lower.isle line 384.
                                                                return Some(v235);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v188 = C::use_bmi1(ctx);
                            if v188 == true {
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::Unary {
                                        opcode: ref v174,
                                        arg: v175,
                                    } = v173
                                    {
                                        if let &Opcode::Ineg = v174 {
                                            if v38.0 == v175 {
                                                let v198 = &constructor_put_in_gpr_mem(ctx, v38.0);
                                                let v209 = constructor_x64_blsi(ctx, v46, v198);
                                                let v210 = constructor_output_gpr(ctx, v209);
                                                // Rule at src/isa/x64/lower.isle line 371.
                                                return Some(v210);
                                            }
                                        }
                                    }
                                }
                                let v180 = C::def_inst(ctx, v38.0);
                                if let Some(v181) = v180 {
                                    let v182 = &C::inst_data(ctx, v181);
                                    if let &InstructionData::Unary {
                                        opcode: ref v183,
                                        arg: v184,
                                    } = v182
                                    {
                                        if let &Opcode::Ineg = v183 {
                                            if v38.1 == v184 {
                                                let v206 = &constructor_put_in_gpr_mem(ctx, v184);
                                                let v207 = constructor_x64_blsi(ctx, v46, v206);
                                                let v208 = constructor_output_gpr(ctx, v207);
                                                // Rule at src/isa/x64/lower.isle line 368.
                                                return Some(v208);
                                            }
                                        }
                                    }
                                }
                                let v201 = constructor_val_minus_one(ctx, v38.0);
                                if let Some(v202) = v201 {
                                    if v38.1 == v202 {
                                        let v203 = &constructor_put_in_gpr_mem(ctx, v38.1);
                                        let v204 = constructor_x64_blsr(ctx, v46, v203);
                                        let v205 = constructor_output_gpr(ctx, v204);
                                        // Rule at src/isa/x64/lower.isle line 361.
                                        return Some(v205);
                                    }
                                }
                                if let Some(v197) = v196 {
                                    if v38.0 == v197 {
                                        let v198 = &constructor_put_in_gpr_mem(ctx, v38.0);
                                        let v199 = constructor_x64_blsr(ctx, v46, v198);
                                        let v200 = constructor_output_gpr(ctx, v199);
                                        // Rule at src/isa/x64/lower.isle line 357.
                                        return Some(v200);
                                    }
                                }
                            }
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v188 = C::use_bmi1(ctx);
                            if v188 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v180 = C::def_inst(ctx, v38.0);
                                if let Some(v181) = v180 {
                                    let v182 = &C::inst_data(ctx, v181);
                                    if let &InstructionData::Unary {
                                        opcode: ref v183,
                                        arg: v184,
                                    } = v182
                                    {
                                        if let &Opcode::Bnot = v183 {
                                            let v193 = constructor_put_in_gpr(ctx, v184);
                                            let v110 = &constructor_put_in_gpr_mem(ctx, v38.1);
                                            let v194 = constructor_x64_andn(ctx, v3, v193, v110);
                                            let v195 = constructor_output_gpr(ctx, v194);
                                            // Rule at src/isa/x64/lower.isle line 345.
                                            return Some(v195);
                                        }
                                    }
                                }
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::Unary {
                                        opcode: ref v174,
                                        arg: v175,
                                    } = v173
                                    {
                                        if let &Opcode::Bnot = v174 {
                                            let v189 = constructor_put_in_gpr(ctx, v175);
                                            let v190 = &constructor_put_in_gpr_mem(ctx, v38.0);
                                            let v191 = constructor_x64_andn(ctx, v3, v189, v190);
                                            let v192 = constructor_output_gpr(ctx, v191);
                                            // Rule at src/isa/x64/lower.isle line 340.
                                            return Some(v192);
                                        }
                                    }
                                }
                            }
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v180 = C::def_inst(ctx, v38.0);
                            if let Some(v181) = v180 {
                                let v182 = &C::inst_data(ctx, v181);
                                if let &InstructionData::Unary {
                                    opcode: ref v183,
                                    arg: v184,
                                } = v182
                                {
                                    if let &Opcode::Bnot = v183 {
                                        let v185 = constructor_put_in_xmm(ctx, v184);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v186 = constructor_sse_and_not(ctx, v3, v185, v69);
                                        let v187 = constructor_output_xmm(ctx, v186);
                                        // Rule at src/isa/x64/lower.isle line 337.
                                        return Some(v187);
                                    }
                                }
                            }
                            let v171 = C::def_inst(ctx, v38.1);
                            if let Some(v172) = v171 {
                                let v173 = &C::inst_data(ctx, v172);
                                if let &InstructionData::Unary {
                                    opcode: ref v174,
                                    arg: v175,
                                } = v173
                                {
                                    if let &Opcode::Bnot = v174 {
                                        let v176 = constructor_put_in_xmm(ctx, v175);
                                        let v177 = &C::put_in_xmm_mem(ctx, v38.0);
                                        let v178 = constructor_sse_and_not(ctx, v3, v176, v177);
                                        let v179 = constructor_output_xmm(ctx, v178);
                                        // Rule at src/isa/x64/lower.isle line 335.
                                        return Some(v179);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v168 = C::put_in_regs(ctx, v38.1);
                            let v169 = constructor_and_i128(ctx, v78, v168);
                            let v170 = C::output(ctx, v169);
                            // Rule at src/isa/x64/lower.isle line 316.
                            return Some(v170);
                        }
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v166 = constructor_sse_and(ctx, v3, v68, v69);
                            let v167 = constructor_output_xmm(ctx, v166);
                            // Rule at src/isa/x64/lower.isle line 299.
                            return Some(v167);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v164 = constructor_sse_and(ctx, v163, v68, v69);
                            let v165 = constructor_output_xmm(ctx, v164);
                            // Rule at src/isa/x64/lower.isle line 287.
                            return Some(v165);
                        }
                        if let Some(v153) = v152 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v158 = &C::simm32_from_value(ctx, v38.0);
                            if let Some(v159) = v158 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v160 = constructor_x64_and(ctx, v3, v60, v159);
                                let v161 = constructor_output_gpr(ctx, v160);
                                // Rule at src/isa/x64/lower.isle line 281.
                                return Some(v161);
                            }
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v156 = constructor_x64_and(ctx, v3, v60, v61);
                                let v157 = constructor_output_gpr(ctx, v156);
                                // Rule at src/isa/x64/lower.isle line 277.
                                return Some(v157);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v154 = constructor_x64_and(ctx, v3, v41, v42);
                            let v155 = constructor_output_gpr(ctx, v154);
                            // Rule at src/isa/x64/lower.isle line 270.
                            return Some(v155);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v168 = C::put_in_regs(ctx, v38.1);
                            let v246 = constructor_or_i128(ctx, v78, v168);
                            let v247 = C::output(ctx, v246);
                            // Rule at src/isa/x64/lower.isle line 438.
                            return Some(v247);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v244 = constructor_sse_or(ctx, v3, v68, v69);
                            let v245 = constructor_output_xmm(ctx, v244);
                            // Rule at src/isa/x64/lower.isle line 423.
                            return Some(v245);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v242 = constructor_sse_or(ctx, v163, v68, v69);
                            let v243 = constructor_output_xmm(ctx, v242);
                            // Rule at src/isa/x64/lower.isle line 411.
                            return Some(v243);
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v158 = &C::simm32_from_value(ctx, v38.0);
                            if let Some(v159) = v158 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v240 = constructor_x64_or(ctx, v3, v60, v159);
                                let v241 = constructor_output_gpr(ctx, v240);
                                // Rule at src/isa/x64/lower.isle line 405.
                                return Some(v241);
                            }
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v238 = constructor_x64_or(ctx, v3, v60, v61);
                                let v239 = constructor_output_gpr(ctx, v238);
                                // Rule at src/isa/x64/lower.isle line 401.
                                return Some(v239);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v236 = constructor_x64_or(ctx, v3, v41, v42);
                            let v237 = constructor_output_gpr(ctx, v236);
                            // Rule at src/isa/x64/lower.isle line 394.
                            return Some(v237);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v188 = C::use_bmi1(ctx);
                            if v188 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v201 = constructor_val_minus_one(ctx, v38.0);
                                if let Some(v202) = v201 {
                                    if v38.1 == v202 {
                                        let v203 = &constructor_put_in_gpr_mem(ctx, v38.1);
                                        let v264 = constructor_x64_blsmsk(ctx, v46, v203);
                                        let v265 = constructor_output_gpr(ctx, v264);
                                        // Rule at src/isa/x64/lower.isle line 489.
                                        return Some(v265);
                                    }
                                }
                                let v196 = constructor_val_minus_one(ctx, v38.1);
                                if let Some(v197) = v196 {
                                    if v38.0 == v197 {
                                        let v198 = &constructor_put_in_gpr_mem(ctx, v38.0);
                                        let v262 = constructor_x64_blsmsk(ctx, v46, v198);
                                        let v263 = constructor_output_gpr(ctx, v262);
                                        // Rule at src/isa/x64/lower.isle line 485.
                                        return Some(v263);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v86 = &C::gpr_to_gpr_mem_imm(ctx, v84);
                            let v258 = constructor_x64_xor(ctx, I64, v80, v86);
                            let v88 = &C::gpr_to_gpr_mem_imm(ctx, v85);
                            let v259 = constructor_x64_xor(ctx, I64, v82, v88);
                            let v260 = constructor_value_gprs(ctx, v258, v259);
                            let v261 = C::output(ctx, v260);
                            // Rule at src/isa/x64/lower.isle line 473.
                            return Some(v261);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v256 = constructor_x64_xor_vector(ctx, v3, v68, v69);
                            let v257 = constructor_output_xmm(ctx, v256);
                            // Rule at src/isa/x64/lower.isle line 468.
                            return Some(v257);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v254 = constructor_x64_xor_vector(ctx, v163, v68, v69);
                            let v255 = constructor_output_xmm(ctx, v254);
                            // Rule at src/isa/x64/lower.isle line 463.
                            return Some(v255);
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v158 = &C::simm32_from_value(ctx, v38.0);
                            if let Some(v159) = v158 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v252 = constructor_x64_xor(ctx, v3, v60, v159);
                                let v253 = constructor_output_gpr(ctx, v252);
                                // Rule at src/isa/x64/lower.isle line 457.
                                return Some(v253);
                            }
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v250 = constructor_x64_xor(ctx, v3, v60, v61);
                                let v251 = constructor_output_gpr(ctx, v250);
                                // Rule at src/isa/x64/lower.isle line 453.
                                return Some(v251);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v248 = constructor_x64_xor(ctx, v3, v41, v42);
                            let v249 = constructor_output_gpr(ctx, v248);
                            // Rule at src/isa/x64/lower.isle line 446.
                            return Some(v249);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v364 = constructor_lo_gpr(ctx, v38.1);
                            let v365 = constructor_shl_i128(ctx, v78, v364);
                            let v367 = constructor_imm(ctx, I64, 0x80);
                            let v368 = C::gpr_new(ctx, v367);
                            let v369 = &C::gpr_to_gpr_mem_imm(ctx, v364);
                            let v370 = constructor_x64_sub(ctx, I64, v368, v369);
                            let v371 = constructor_shr_i128(ctx, v78, v370);
                            let v372 = constructor_or_i128(ctx, v365, v371);
                            let v373 = C::output(ctx, v372);
                            // Rule at src/isa/x64/lower.isle line 895.
                            return Some(v373);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v266 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v362 = constructor_x64_rotl(ctx, v5, v41, v266);
                            let v363 = constructor_output_gpr(ctx, v362);
                            // Rule at src/isa/x64/lower.isle line 889.
                            return Some(v363);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v364 = constructor_lo_gpr(ctx, v38.1);
                            let v376 = constructor_shr_i128(ctx, v78, v364);
                            let v367 = constructor_imm(ctx, I64, 0x80);
                            let v368 = C::gpr_new(ctx, v367);
                            let v369 = &C::gpr_to_gpr_mem_imm(ctx, v364);
                            let v370 = constructor_x64_sub(ctx, I64, v368, v369);
                            let v377 = constructor_shl_i128(ctx, v78, v370);
                            let v378 = constructor_or_i128(ctx, v376, v377);
                            let v379 = C::output(ctx, v378);
                            // Rule at src/isa/x64/lower.isle line 916.
                            return Some(v379);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v266 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v374 = constructor_x64_rotr(ctx, v5, v41, v266);
                            let v375 = constructor_output_gpr(ctx, v374);
                            // Rule at src/isa/x64/lower.isle line 910.
                            return Some(v375);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v269 = constructor_lo_gpr(ctx, v38.1);
                                let v270 = C::put_in_regs(ctx, v38.0);
                                let v271 = constructor_shl_i128(ctx, v270, v269);
                                let v272 = C::output(ctx, v271);
                                // Rule at src/isa/x64/lower.isle line 537.
                                return Some(v272);
                            }
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v273 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v274 = constructor_put_in_xmm(ctx, v38.0);
                                let v275 = &constructor_mov_rmi_to_xmm(ctx, v273);
                                let v276 = constructor_x64_psllw(ctx, v274, v275);
                                let v277 = &constructor_ishl_i8x16_mask(ctx, v273);
                                let v280 = constructor_x64_load(ctx, I8X16, v277, &ExtKind::None);
                                let v281 = RegMem::Reg { reg: v280 };
                                let v282 = &C::reg_mem_to_xmm_mem(ctx, &v281);
                                let v283 = constructor_sse_and(ctx, I8X16, v276, v282);
                                let v284 = constructor_output_xmm(ctx, v283);
                                // Rule at src/isa/x64/lower.isle line 549.
                                return Some(v284);
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v287 = constructor_x64_psllw(ctx, v68, v286);
                                let v288 = constructor_output_xmm(ctx, v287);
                                // Rule at src/isa/x64/lower.isle line 594.
                                return Some(v288);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v289 = constructor_x64_pslld(ctx, v68, v286);
                                let v290 = constructor_output_xmm(ctx, v289);
                                // Rule at src/isa/x64/lower.isle line 597.
                                return Some(v290);
                            }
                            I64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v291 = constructor_x64_psllq(ctx, v68, v286);
                                let v292 = constructor_output_xmm(ctx, v291);
                                // Rule at src/isa/x64/lower.isle line 600.
                                return Some(v292);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v266 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v267 = constructor_x64_shl(ctx, v5, v41, v266);
                            let v268 = constructor_output_gpr(ctx, v267);
                            // Rule at src/isa/x64/lower.isle line 498.
                            return Some(v268);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v269 = constructor_lo_gpr(ctx, v38.1);
                                let v270 = C::put_in_regs(ctx, v38.0);
                                let v297 = constructor_shr_i128(ctx, v270, v269);
                                let v298 = C::output(ctx, v297);
                                // Rule at src/isa/x64/lower.isle line 644.
                                return Some(v298);
                            }
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v273 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v274 = constructor_put_in_xmm(ctx, v38.0);
                                let v275 = &constructor_mov_rmi_to_xmm(ctx, v273);
                                let v299 = constructor_x64_psrlw(ctx, v274, v275);
                                let v300 = &constructor_ushr_i8x16_mask(ctx, v273);
                                let v301 = &constructor_synthetic_amode_to_xmm_mem(ctx, v300);
                                let v302 = constructor_sse_and(ctx, I8X16, v299, v301);
                                let v303 = constructor_output_xmm(ctx, v302);
                                // Rule at src/isa/x64/lower.isle line 654.
                                return Some(v303);
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v304 = constructor_x64_psrlw(ctx, v68, v286);
                                let v305 = constructor_output_xmm(ctx, v304);
                                // Rule at src/isa/x64/lower.isle line 700.
                                return Some(v305);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v306 = constructor_x64_psrld(ctx, v68, v286);
                                let v307 = constructor_output_xmm(ctx, v306);
                                // Rule at src/isa/x64/lower.isle line 703.
                                return Some(v307);
                            }
                            I64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v308 = constructor_x64_psrlq(ctx, v68, v286);
                                let v309 = constructor_output_xmm(ctx, v308);
                                // Rule at src/isa/x64/lower.isle line 706.
                                return Some(v309);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v294 = constructor_extend_to_gpr(ctx, v38.0, v5, &ExtendKind::Zero);
                            let v266 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v295 = constructor_x64_shr(ctx, v5, v294, v266);
                            let v296 = constructor_output_gpr(ctx, v295);
                            // Rule at src/isa/x64/lower.isle line 607.
                            return Some(v296);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v269 = constructor_lo_gpr(ctx, v38.1);
                                let v270 = C::put_in_regs(ctx, v38.0);
                                let v314 = constructor_sar_i128(ctx, v270, v269);
                                let v315 = C::output(ctx, v314);
                                // Rule at src/isa/x64/lower.isle line 756.
                                return Some(v315);
                            }
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v316 = &C::xmm_to_xmm_mem(ctx, v68);
                                let v317 = constructor_x64_punpcklbw(ctx, v68, v316);
                                let v318 = &C::xmm_to_xmm_mem(ctx, v68);
                                let v319 = constructor_x64_punpckhbw(ctx, v68, v318);
                                let v92 = C::value_type(ctx, v38.1);
                                let v320 = &constructor_sshr_i8x16_bigger_shift(ctx, v92, v285);
                                let v321 = constructor_x64_psraw(ctx, v317, v320);
                                let v322 = constructor_x64_psraw(ctx, v319, v320);
                                let v323 = &C::xmm_to_xmm_mem(ctx, v322);
                                let v324 = constructor_x64_packsswb(ctx, v321, v323);
                                let v325 = constructor_output_xmm(ctx, v324);
                                // Rule at src/isa/x64/lower.isle line 777.
                                return Some(v325);
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v326 = constructor_x64_psraw(ctx, v68, v286);
                                let v327 = constructor_output_xmm(ctx, v326);
                                // Rule at src/isa/x64/lower.isle line 806.
                                return Some(v327);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v285 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v286 = &constructor_mov_rmi_to_xmm(ctx, v285);
                                let v328 = constructor_x64_psrad(ctx, v68, v286);
                                let v329 = constructor_output_xmm(ctx, v328);
                                // Rule at src/isa/x64/lower.isle line 809.
                                return Some(v329);
                            }
                            I64X2 => {
                                let v332 = C::use_avx512vl(ctx);
                                if v332 == true {
                                    let v333 = C::use_avx512f(ctx);
                                    if v333 == true {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v171 = C::def_inst(ctx, v38.1);
                                        if let Some(v172) = v171 {
                                            let v173 = &C::inst_data(ctx, v172);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v330,
                                                imm: v331,
                                            } = v173
                                            {
                                                if let &Opcode::Iconst = v330 {
                                                    let v334 = &C::put_in_xmm_mem(ctx, v38.0);
                                                    let v335 =
                                                        C::shift_amount_masked(ctx, v3, v331);
                                                    let v336 =
                                                        constructor_x64_vpsraq_imm(ctx, v334, v335);
                                                    let v337 = constructor_output_xmm(ctx, v336);
                                                    // Rule at src/isa/x64/lower.isle line 815.
                                                    return Some(v337);
                                                }
                                            }
                                        }
                                        let v60 = constructor_put_in_gpr(ctx, v38.1);
                                        let v338 = C::shift_mask(ctx, v3);
                                        let v339 = C::u8_as_u32(ctx, v338);
                                        let v340 = RegMemImm::Imm { simm32: v339 };
                                        let v341 = &C::gpr_mem_imm_new(ctx, &v340);
                                        let v342 = constructor_x64_and(ctx, I64, v60, v341);
                                        let v343 = constructor_put_in_xmm(ctx, v38.0);
                                        let v344 = &C::gpr_to_gpr_mem(ctx, v342);
                                        let v345 = constructor_x64_movd_to_xmm(ctx, v344);
                                        let v346 = &C::xmm_to_xmm_mem(ctx, v345);
                                        let v347 = constructor_x64_vpsraq(ctx, v343, v346);
                                        let v348 = constructor_output_xmm(ctx, v347);
                                        // Rule at src/isa/x64/lower.isle line 820.
                                        return Some(v348);
                                    }
                                }
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v330,
                                        imm: v331,
                                    } = v173
                                    {
                                        if let &Opcode::Iconst = v330 {
                                            let v349 = C::u64_from_imm64(ctx, v331);
                                            let v350 = C::u64_as_u32(ctx, v349);
                                            if let Some(v351) = v350 {
                                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                                let v353 = C::u32_and(ctx, v351, 0x3F);
                                                let v354 = constructor_lower_i64x2_sshr_imm(
                                                    ctx, v68, v353,
                                                );
                                                let v355 = constructor_output_xmm(ctx, v354);
                                                // Rule at src/isa/x64/lower.isle line 826.
                                                return Some(v355);
                                            }
                                        }
                                    }
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v356 = constructor_put_in_gpr(ctx, v38.1);
                                let v357 = RegMemImm::Imm { simm32: 0x3F };
                                let v358 = &C::gpr_mem_imm_new(ctx, &v357);
                                let v359 = constructor_x64_and(ctx, I64, v356, v358);
                                let v360 = constructor_lower_i64x2_sshr_gpr(ctx, v68, v359);
                                let v361 = constructor_output_xmm(ctx, v360);
                                // Rule at src/isa/x64/lower.isle line 829.
                                return Some(v361);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v311 = constructor_extend_to_gpr(ctx, v38.0, v5, &ExtendKind::Sign);
                            let v266 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v312 = constructor_x64_sar(ctx, v5, v311, v266);
                            let v313 = constructor_output_gpr(ctx, v312);
                            // Rule at src/isa/x64/lower.isle line 719.
                            return Some(v313);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1386 = constructor_x64_addss(ctx, v1374, v1385);
                                    let v1387 = constructor_output_xmm(ctx, v1386);
                                    // Rule at src/isa/x64/lower.isle line 2540.
                                    return Some(v1387);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1377 = constructor_x64_addss(ctx, v68, v69);
                                let v1378 = constructor_output_xmm(ctx, v1377);
                                // Rule at src/isa/x64/lower.isle line 2529.
                                return Some(v1378);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1388 = constructor_x64_addsd(ctx, v1374, v1385);
                                    let v1389 = constructor_output_xmm(ctx, v1388);
                                    // Rule at src/isa/x64/lower.isle line 2542.
                                    return Some(v1389);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1379 = constructor_x64_addsd(ctx, v68, v69);
                                let v1380 = constructor_output_xmm(ctx, v1379);
                                // Rule at src/isa/x64/lower.isle line 2531.
                                return Some(v1380);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1390 = constructor_x64_addps(ctx, v1374, v1385);
                                    let v1391 = constructor_output_xmm(ctx, v1390);
                                    // Rule at src/isa/x64/lower.isle line 2544.
                                    return Some(v1391);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1381 = constructor_x64_addps(ctx, v68, v69);
                                let v1382 = constructor_output_xmm(ctx, v1381);
                                // Rule at src/isa/x64/lower.isle line 2533.
                                return Some(v1382);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1392 = constructor_x64_addpd(ctx, v1374, v1385);
                                    let v1393 = constructor_output_xmm(ctx, v1392);
                                    // Rule at src/isa/x64/lower.isle line 2546.
                                    return Some(v1393);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1383 = constructor_x64_addpd(ctx, v68, v69);
                                let v1384 = constructor_output_xmm(ctx, v1383);
                                // Rule at src/isa/x64/lower.isle line 2535.
                                return Some(v1384);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1394 = constructor_x64_subss(ctx, v68, v69);
                                let v1395 = constructor_output_xmm(ctx, v1394);
                                // Rule at src/isa/x64/lower.isle line 2551.
                                return Some(v1395);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1396 = constructor_x64_subsd(ctx, v68, v69);
                                let v1397 = constructor_output_xmm(ctx, v1396);
                                // Rule at src/isa/x64/lower.isle line 2553.
                                return Some(v1397);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1398 = constructor_x64_subps(ctx, v68, v69);
                                let v1399 = constructor_output_xmm(ctx, v1398);
                                // Rule at src/isa/x64/lower.isle line 2555.
                                return Some(v1399);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1400 = constructor_x64_subpd(ctx, v68, v69);
                                let v1401 = constructor_output_xmm(ctx, v1400);
                                // Rule at src/isa/x64/lower.isle line 2557.
                                return Some(v1401);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1410 = constructor_x64_mulss(ctx, v1374, v1385);
                                    let v1411 = constructor_output_xmm(ctx, v1410);
                                    // Rule at src/isa/x64/lower.isle line 2573.
                                    return Some(v1411);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1402 = constructor_x64_mulss(ctx, v68, v69);
                                let v1403 = constructor_output_xmm(ctx, v1402);
                                // Rule at src/isa/x64/lower.isle line 2562.
                                return Some(v1403);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1412 = constructor_x64_mulsd(ctx, v1374, v1385);
                                    let v1413 = constructor_output_xmm(ctx, v1412);
                                    // Rule at src/isa/x64/lower.isle line 2575.
                                    return Some(v1413);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1404 = constructor_x64_mulsd(ctx, v68, v69);
                                let v1405 = constructor_output_xmm(ctx, v1404);
                                // Rule at src/isa/x64/lower.isle line 2564.
                                return Some(v1405);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1414 = constructor_x64_mulps(ctx, v1374, v1385);
                                    let v1415 = constructor_output_xmm(ctx, v1414);
                                    // Rule at src/isa/x64/lower.isle line 2577.
                                    return Some(v1415);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1406 = constructor_x64_mulps(ctx, v68, v69);
                                let v1407 = constructor_output_xmm(ctx, v1406);
                                // Rule at src/isa/x64/lower.isle line 2566.
                                return Some(v1407);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1385 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1416 = constructor_x64_mulpd(ctx, v1374, v1385);
                                    let v1417 = constructor_output_xmm(ctx, v1416);
                                    // Rule at src/isa/x64/lower.isle line 2579.
                                    return Some(v1417);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1408 = constructor_x64_mulpd(ctx, v68, v69);
                                let v1409 = constructor_output_xmm(ctx, v1408);
                                // Rule at src/isa/x64/lower.isle line 2568.
                                return Some(v1409);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1418 = constructor_x64_divss(ctx, v68, v69);
                                let v1419 = constructor_output_xmm(ctx, v1418);
                                // Rule at src/isa/x64/lower.isle line 2584.
                                return Some(v1419);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1420 = constructor_x64_divsd(ctx, v68, v69);
                                let v1421 = constructor_output_xmm(ctx, v1420);
                                // Rule at src/isa/x64/lower.isle line 2586.
                                return Some(v1421);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1422 = constructor_x64_divps(ctx, v68, v69);
                                let v1423 = constructor_output_xmm(ctx, v1422);
                                // Rule at src/isa/x64/lower.isle line 2588.
                                return Some(v1423);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1424 = constructor_x64_divpd(ctx, v68, v69);
                                let v1425 = constructor_output_xmm(ctx, v1424);
                                // Rule at src/isa/x64/lower.isle line 2590.
                                return Some(v1425);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2223 = C::value_type(ctx, v38.0);
                                if v2223 == F32 {
                                    let v2277 = constructor_imm(ctx, F32, 0x80000000);
                                    let v2278 = C::xmm_new(ctx, v2277);
                                    let v2279 = &C::put_in_xmm_mem(ctx, v38.0);
                                    let v2280 = constructor_x64_andnps(ctx, v2278, v2279);
                                    let v2281 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2282 = constructor_x64_andps(ctx, v2278, v2281);
                                    let v2283 = &C::xmm_to_xmm_mem(ctx, v2282);
                                    let v2284 = constructor_x64_orps(ctx, v2280, v2283);
                                    let v2285 = constructor_output_xmm(ctx, v2284);
                                    // Rule at src/isa/x64/lower.isle line 4020.
                                    return Some(v2285);
                                }
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2223 = C::value_type(ctx, v38.0);
                                if v2223 == F64 {
                                    let v2286 = constructor_imm(ctx, F64, 0x8000000000000000);
                                    let v2287 = C::xmm_new(ctx, v2286);
                                    let v2279 = &C::put_in_xmm_mem(ctx, v38.0);
                                    let v2288 = constructor_x64_andnpd(ctx, v2287, v2279);
                                    let v2281 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2289 = constructor_x64_andpd(ctx, v2287, v2281);
                                    let v2290 = &C::xmm_to_xmm_mem(ctx, v2289);
                                    let v2291 = constructor_x64_orpd(ctx, v2288, v2290);
                                    let v2292 = constructor_output_xmm(ctx, v2291);
                                    // Rule at src/isa/x64/lower.isle line 4026.
                                    return Some(v2292);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v459 = constructor_put_in_xmm(ctx, v38.1);
                                let v1448 = constructor_xmm_min_max_seq(ctx, F32, true, v68, v459);
                                let v1449 = constructor_output_xmm(ctx, v1448);
                                // Rule at src/isa/x64/lower.isle line 2621.
                                return Some(v1449);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v459 = constructor_put_in_xmm(ctx, v38.1);
                                let v1450 = constructor_xmm_min_max_seq(ctx, F64, true, v68, v459);
                                let v1451 = constructor_output_xmm(ctx, v1450);
                                // Rule at src/isa/x64/lower.isle line 2623.
                                return Some(v1451);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1452 = constructor_x64_minps(ctx, v68, v69);
                                let v1453 = constructor_put_in_xmm(ctx, v38.1);
                                let v1454 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1455 = constructor_x64_minps(ctx, v1453, v1454);
                                let v1456 = &C::xmm_to_xmm_mem(ctx, v1455);
                                let v1457 = constructor_x64_orps(ctx, v1452, v1456);
                                let v1458 = &C::xmm_to_xmm_mem(ctx, v1455);
                                let v1459 =
                                    constructor_x64_cmpps(ctx, v1457, v1458, &FcmpImm::Unordered);
                                let v1460 = &C::xmm_to_xmm_mem(ctx, v1459);
                                let v1461 = constructor_x64_orps(ctx, v1457, v1460);
                                let v1463 = &C::xmi_imm(ctx, 0xA);
                                let v1464 = constructor_x64_psrld(ctx, v1459, v1463);
                                let v1465 = &C::xmm_to_xmm_mem(ctx, v1461);
                                let v1466 = constructor_x64_andnps(ctx, v1464, v1465);
                                let v1467 = constructor_output_xmm(ctx, v1466);
                                // Rule at src/isa/x64/lower.isle line 2638.
                                return Some(v1467);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1468 = constructor_x64_minpd(ctx, v68, v69);
                                let v1453 = constructor_put_in_xmm(ctx, v38.1);
                                let v1454 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1469 = constructor_x64_minpd(ctx, v1453, v1454);
                                let v1470 = &C::xmm_to_xmm_mem(ctx, v1469);
                                let v1471 = constructor_x64_orpd(ctx, v1468, v1470);
                                let v1472 = &C::xmm_to_xmm_mem(ctx, v1469);
                                let v1473 =
                                    constructor_x64_cmppd(ctx, v1468, v1472, &FcmpImm::Unordered);
                                let v1474 = &C::xmm_to_xmm_mem(ctx, v1473);
                                let v1475 = constructor_x64_orpd(ctx, v1471, v1474);
                                let v1477 = &C::xmi_imm(ctx, 0xD);
                                let v1478 = constructor_x64_psrlq(ctx, v1473, v1477);
                                let v1479 = &C::xmm_to_xmm_mem(ctx, v1475);
                                let v1480 = constructor_x64_andnpd(ctx, v1478, v1479);
                                let v1481 = constructor_output_xmm(ctx, v1480);
                                // Rule at src/isa/x64/lower.isle line 2681.
                                return Some(v1481);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v459 = constructor_put_in_xmm(ctx, v38.1);
                                let v1482 = constructor_xmm_min_max_seq(ctx, F32, false, v68, v459);
                                let v1483 = constructor_output_xmm(ctx, v1482);
                                // Rule at src/isa/x64/lower.isle line 2693.
                                return Some(v1483);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v459 = constructor_put_in_xmm(ctx, v38.1);
                                let v1484 = constructor_xmm_min_max_seq(ctx, F64, false, v68, v459);
                                let v1485 = constructor_output_xmm(ctx, v1484);
                                // Rule at src/isa/x64/lower.isle line 2695.
                                return Some(v1485);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1486 = constructor_x64_maxps(ctx, v68, v69);
                                let v1453 = constructor_put_in_xmm(ctx, v38.1);
                                let v1454 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1487 = constructor_x64_maxps(ctx, v1453, v1454);
                                let v1488 = &C::xmm_to_xmm_mem(ctx, v1487);
                                let v1489 = constructor_x64_xorps(ctx, v1486, v1488);
                                let v1490 = &C::xmm_to_xmm_mem(ctx, v1489);
                                let v1491 = constructor_x64_orps(ctx, v1486, v1490);
                                let v1492 = &C::xmm_to_xmm_mem(ctx, v1489);
                                let v1493 = constructor_x64_subps(ctx, v1491, v1492);
                                let v1494 = &C::xmm_to_xmm_mem(ctx, v1491);
                                let v1495 =
                                    constructor_x64_cmpps(ctx, v1491, v1494, &FcmpImm::Unordered);
                                let v1496 = &C::xmi_imm(ctx, 0xA);
                                let v1497 = constructor_x64_psrld(ctx, v1495, v1496);
                                let v1498 = &C::xmm_to_xmm_mem(ctx, v1493);
                                let v1499 = constructor_x64_andnps(ctx, v1497, v1498);
                                let v1500 = constructor_output_xmm(ctx, v1499);
                                // Rule at src/isa/x64/lower.isle line 2701.
                                return Some(v1500);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1501 = constructor_x64_maxpd(ctx, v68, v69);
                                let v1453 = constructor_put_in_xmm(ctx, v38.1);
                                let v1454 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1502 = constructor_x64_maxpd(ctx, v1453, v1454);
                                let v1503 = &C::xmm_to_xmm_mem(ctx, v1502);
                                let v1504 = constructor_x64_xorpd(ctx, v1501, v1503);
                                let v1505 = &C::xmm_to_xmm_mem(ctx, v1504);
                                let v1506 = constructor_x64_orpd(ctx, v1501, v1505);
                                let v1507 = &C::xmm_to_xmm_mem(ctx, v1504);
                                let v1508 = constructor_x64_subpd(ctx, v1506, v1507);
                                let v1509 = &C::xmm_to_xmm_mem(ctx, v1506);
                                let v1510 =
                                    constructor_x64_cmppd(ctx, v1506, v1509, &FcmpImm::Unordered);
                                let v1511 = &C::xmi_imm(ctx, 0xD);
                                let v1512 = constructor_x64_psrlq(ctx, v1510, v1511);
                                let v1513 = &C::xmm_to_xmm_mem(ctx, v1508);
                                let v1514 = constructor_x64_andnpd(ctx, v1512, v1513);
                                let v1515 = constructor_output_xmm(ctx, v1514);
                                // Rule at src/isa/x64/lower.isle line 2744.
                                return Some(v1515);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2223 = C::value_type(ctx, v38.0);
                                if v2223 == I16X8 {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2224 = constructor_x64_packsswb(ctx, v68, v69);
                                    let v2225 = constructor_output_xmm(ctx, v2224);
                                    // Rule at src/isa/x64/lower.isle line 3890.
                                    return Some(v2225);
                                }
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2223 = C::value_type(ctx, v38.0);
                                if v2223 == I32X4 {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2226 = constructor_x64_packssdw(ctx, v68, v69);
                                    let v2227 = constructor_output_xmm(ctx, v2226);
                                    // Rule at src/isa/x64/lower.isle line 3893.
                                    return Some(v2227);
                                }
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::UnaryConst {
                                        opcode: ref v2231,
                                        constant_handle: v2232,
                                    } = v173
                                    {
                                        if let &Opcode::Vconst = v2231 {
                                            let v180 = C::def_inst(ctx, v38.0);
                                            if let Some(v181) = v180 {
                                                let v182 = &C::inst_data(ctx, v181);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v183,
                                                    arg: v184,
                                                } = v182
                                                {
                                                    match v183 {
                                                        &Opcode::FcvtToSintSat => {
                                                            let v2228 = C::first_result(ctx, v181);
                                                            if let Some(v2229) = v2228 {
                                                                let v2230 =
                                                                    C::value_type(ctx, v2229);
                                                                if v2230 == I64X2 {
                                                                    let v2233 =
                                                                        C::u128_from_constant(
                                                                            ctx, v2232,
                                                                        );
                                                                    if let Some(v2234) = v2233 {
                                                                        if v2234 == 0x0 {
                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                            let v2235 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v185,
                                                                                );
                                                                            let v2236 = constructor_x64_cmppd(ctx, v185, v2235, &FcmpImm::Equal);
                                                                            let v2238 = C::emit_u128_le_const(ctx, 0x41DFFFFFFFC0000041DFFFFFFFC00000);
                                                                            let v2239 = &constructor_const_to_xmm_mem(ctx, v2238);
                                                                            let v2240 = constructor_x64_andps(ctx, v2236, v2239);
                                                                            let v2241 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v2240,
                                                                                );
                                                                            let v2242 = constructor_x64_minpd(ctx, v185, v2241);
                                                                            let v2243 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v2242,
                                                                                );
                                                                            let v2244 = constructor_x64_cvttpd2dq(ctx, v2243);
                                                                            let v2245 = constructor_output_xmm(ctx, v2244);
                                                                            // Rule at src/isa/x64/lower.isle line 3902.
                                                                            return Some(v2245);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::X86Cvtt2dq => {
                                                            let v2228 = C::first_result(ctx, v181);
                                                            if let Some(v2229) = v2228 {
                                                                let v2230 =
                                                                    C::value_type(ctx, v2229);
                                                                if v2230 == I64X2 {
                                                                    let v2233 =
                                                                        C::u128_from_constant(
                                                                            ctx, v2232,
                                                                        );
                                                                    if let Some(v2234) = v2233 {
                                                                        if v2234 == 0x0 {
                                                                            let v514 =
                                                                                &C::put_in_xmm_mem(
                                                                                    ctx, v184,
                                                                                );
                                                                            let v2246 = constructor_x64_cvttpd2dq(ctx, v514);
                                                                            let v2247 = constructor_output_xmm(ctx, v2246);
                                                                            // Rule at src/isa/x64/lower.isle line 3926.
                                                                            return Some(v2247);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2223 = C::value_type(ctx, v38.0);
                                if v2223 == I16X8 {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2248 = constructor_x64_packuswb(ctx, v68, v69);
                                    let v2249 = constructor_output_xmm(ctx, v2248);
                                    // Rule at src/isa/x64/lower.isle line 3932.
                                    return Some(v2249);
                                }
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2223 = C::value_type(ctx, v38.0);
                                if v2223 == I32X4 {
                                    let v456 = C::use_sse41(ctx);
                                    if v456 == true {
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v2250 = constructor_x64_packusdw(ctx, v68, v69);
                                        let v2251 = constructor_output_xmm(ctx, v2250);
                                        // Rule at src/isa/x64/lower.isle line 3935.
                                        return Some(v2251);
                                    }
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v2252 =
                                        constructor_unarrow_i32x4_lanes_to_low_u16_lanes(ctx, v68);
                                    let v2253 = constructor_put_in_xmm(ctx, v38.1);
                                    let v2254 = constructor_unarrow_i32x4_lanes_to_low_u16_lanes(
                                        ctx, v2253,
                                    );
                                    let v2255 = &C::xmm_to_xmm_mem(ctx, v2254);
                                    let v2256 = constructor_x64_punpcklqdq(ctx, v2252, v2255);
                                    let v2257 = constructor_output_xmm(ctx, v2256);
                                    // Rule at src/isa/x64/lower.isle line 3945.
                                    return Some(v2257);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v171 = C::def_inst(ctx, v38.1);
                    if let Some(v172) = v171 {
                        let v173 = &C::inst_data(ctx, v172);
                        if let &InstructionData::UnaryConst {
                            opcode: ref v2231,
                            constant_handle: v2232,
                        } = v173
                        {
                            if let &Opcode::Vconst = v2231 {
                                let v180 = C::def_inst(ctx, v38.0);
                                if let Some(v181) = v180 {
                                    let v182 = &C::inst_data(ctx, v181);
                                    if let &InstructionData::Unary {
                                        opcode: ref v183,
                                        arg: v184,
                                    } = v182
                                    {
                                        if let &Opcode::FcvtToUintSat = v183 {
                                            let v496 = C::value_type(ctx, v184);
                                            if v496 == F64X2 {
                                                let v2233 = C::u128_from_constant(ctx, v2232);
                                                if let Some(v2234) = v2233 {
                                                    if v2234 == 0x0 {
                                                        let v185 =
                                                            constructor_put_in_xmm(ctx, v184);
                                                        let v1922 =
                                                            constructor_xmm_zero(ctx, F64X2);
                                                        let v2721 = &C::xmm_to_xmm_mem(ctx, v1922);
                                                        let v2722 =
                                                            constructor_x64_maxpd(ctx, v185, v2721);
                                                        let v2724 = C::emit_u128_le_const(
                                                            ctx,
                                                            0x41EFFFFFFFE0000041EFFFFFFFE00000,
                                                        );
                                                        let v2725 = &constructor_const_to_xmm_mem(
                                                            ctx, v2724,
                                                        );
                                                        let v2726 = constructor_x64_minpd(
                                                            ctx, v2722, v2725,
                                                        );
                                                        let v2727 = C::xmm_to_reg(ctx, v2726);
                                                        let v2728 =
                                                            &constructor_xmm_to_reg_mem(ctx, v2727);
                                                        let v2729 =
                                                            &C::xmm_mem_to_reg_mem(ctx, v2728);
                                                        let v2730 = constructor_x64_round(
                                                            ctx,
                                                            F64X2,
                                                            v2729,
                                                            &RoundImm::RoundZero,
                                                        );
                                                        let v2731 = C::emit_u128_le_const(
                                                            ctx,
                                                            0x43300000000000004330000000000000,
                                                        );
                                                        let v2732 = &constructor_const_to_xmm_mem(
                                                            ctx, v2731,
                                                        );
                                                        let v2733 = constructor_x64_addpd(
                                                            ctx, v2730, v2732,
                                                        );
                                                        let v2734 = &C::xmm_to_xmm_mem(ctx, v1922);
                                                        let v2735 = constructor_x64_shufps(
                                                            ctx, v2733, v2734, 0x88,
                                                        );
                                                        let v2736 =
                                                            constructor_output_xmm(ctx, v2735);
                                                        // Rule at src/isa/x64/lower.isle line 4781.
                                                        return Some(v2736);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v2056 =
                                    C::emit_u128_le_const(ctx, 0xFF00FF00FF00FF00FF00FF00FF00FF);
                                let v2057 = &constructor_const_to_xmm_mem(ctx, v2056);
                                let v2058 = constructor_x64_movdqu_load(ctx, v2057);
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2059 = constructor_put_in_xmm(ctx, v38.0);
                                let v2060 = &C::xmm_to_xmm_mem(ctx, v2058);
                                let v2061 = constructor_x64_pand(ctx, v2059, v2060);
                                let v2062 = constructor_put_in_xmm(ctx, v38.1);
                                let v2063 = &C::xmm_to_xmm_mem(ctx, v2058);
                                let v2064 = constructor_x64_pand(ctx, v2062, v2063);
                                let v2065 = &C::xmm_to_xmm_mem(ctx, v2064);
                                let v2066 = constructor_x64_packuswb(ctx, v2061, v2065);
                                let v2067 = constructor_put_in_xmm(ctx, v38.0);
                                let v2069 = &C::xmi_imm(ctx, 0x8);
                                let v2070 = constructor_x64_psrlw(ctx, v2067, v2069);
                                let v2071 = constructor_put_in_xmm(ctx, v38.1);
                                let v2072 = &C::xmi_imm(ctx, 0x8);
                                let v2073 = constructor_x64_psrlw(ctx, v2071, v2072);
                                let v2074 = &C::xmm_to_xmm_mem(ctx, v2073);
                                let v2075 = constructor_x64_packuswb(ctx, v2070, v2074);
                                let v2076 = &C::xmm_to_xmm_mem(ctx, v2075);
                                let v2077 = constructor_x64_paddb(ctx, v2066, v2076);
                                let v2078 = constructor_output_xmm(ctx, v2077);
                                // Rule at src/isa/x64/lower.isle line 3679.
                                return Some(v2078);
                            }
                            I16X8 => {
                                let v540 = C::use_ssse3(ctx);
                                if v540 == true {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v171 = C::def_inst(ctx, v38.1);
                                    if let Some(v172) = v171 {
                                        let v173 = &C::inst_data(ctx, v172);
                                        if let &InstructionData::Unary {
                                            opcode: ref v174,
                                            arg: v175,
                                        } = v173
                                        {
                                            match v174 {
                                                &Opcode::SwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::SwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    if v496 == I8X16 {
                                                                        let v2115 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101);
                                                                        let v2116 = constructor_x64_xmm_load_const(ctx, I8X16, v2115);
                                                                        let v2117 =
                                                                            &C::put_in_xmm_mem(
                                                                                ctx, v184,
                                                                            );
                                                                        let v2118 = constructor_x64_pmaddubsw(ctx, v2116, v2117);
                                                                        let v2119 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2118,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3741.
                                                                        return Some(v2119);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::UwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    if v496 == I8X16 {
                                                                        let v2115 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101);
                                                                        let v2126 = &constructor_const_to_xmm_mem(ctx, v2115);
                                                                        let v2123 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v184,
                                                                            );
                                                                        let v2127 = constructor_x64_pmaddubsw(ctx, v2123, v2126);
                                                                        let v2128 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2127,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3759.
                                                                        return Some(v2128);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2079 = constructor_x64_phaddw(ctx, v68, v69);
                                    let v2080 = constructor_output_xmm(ctx, v2079);
                                    // Rule at src/isa/x64/lower.isle line 3695.
                                    return Some(v2080);
                                }
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v459 = constructor_put_in_xmm(ctx, v38.1);
                                let v316 = &C::xmm_to_xmm_mem(ctx, v68);
                                let v2082 = constructor_x64_pshuflw(ctx, v316, 0xE8);
                                let v2083 = &C::xmm_to_xmm_mem(ctx, v2082);
                                let v2084 = constructor_x64_pshufhw(ctx, v2083, 0xE8);
                                let v2085 = &C::xmm_to_xmm_mem(ctx, v2084);
                                let v2086 = constructor_x64_pshufd(ctx, v2085, 0xE8);
                                let v2087 = &C::xmm_to_xmm_mem(ctx, v459);
                                let v2088 = constructor_x64_pshuflw(ctx, v2087, 0xE8);
                                let v2089 = &C::xmm_to_xmm_mem(ctx, v2088);
                                let v2090 = constructor_x64_pshufhw(ctx, v2089, 0xE8);
                                let v2091 = &C::xmm_to_xmm_mem(ctx, v2090);
                                let v2092 = constructor_x64_pshufd(ctx, v2091, 0xE8);
                                let v2093 = &C::xmm_to_xmm_mem(ctx, v2092);
                                let v2094 = constructor_x64_punpcklqdq(ctx, v2086, v2093);
                                let v2095 = &C::xmi_imm(ctx, 0x10);
                                let v2096 = constructor_x64_psrad(ctx, v68, v2095);
                                let v2097 = &C::xmi_imm(ctx, 0x10);
                                let v2098 = constructor_x64_psrad(ctx, v459, v2097);
                                let v2099 = &C::xmm_to_xmm_mem(ctx, v2098);
                                let v2100 = constructor_x64_packssdw(ctx, v2096, v2099);
                                let v2101 = &C::xmm_to_xmm_mem(ctx, v2100);
                                let v2102 = constructor_x64_paddw(ctx, v2094, v2101);
                                let v2103 = constructor_output_xmm(ctx, v2102);
                                // Rule at src/isa/x64/lower.isle line 3699.
                                return Some(v2103);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    match v173 {
                                        &InstructionData::Binary {
                                            opcode: ref v2156,
                                            args: ref v2157,
                                        } => {
                                            if let &Opcode::Imul = v2156 {
                                                let v180 = C::def_inst(ctx, v38.0);
                                                if let Some(v181) = v180 {
                                                    let v182 = &C::inst_data(ctx, v181);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v2141,
                                                        args: ref v2142,
                                                    } = v182
                                                    {
                                                        if let &Opcode::Imul = v2141 {
                                                            let v2143 =
                                                                C::unpack_value_array_2(ctx, v2142);
                                                            let v2146 = C::def_inst(ctx, v2143.0);
                                                            if let Some(v2147) = v2146 {
                                                                let v2148 =
                                                                    &C::inst_data(ctx, v2147);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v2149,
                                                                    arg: v2150,
                                                                } = v2148
                                                                {
                                                                    if let &Opcode::SwidenLow =
                                                                        v2149
                                                                    {
                                                                        let v2151 = C::def_inst(
                                                                            ctx, v2143.1,
                                                                        );
                                                                        if let Some(v2152) = v2151 {
                                                                            let v2153 =
                                                                                &C::inst_data(
                                                                                    ctx, v2152,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v2154,
                                                                                arg: v2155,
                                                                            } = v2153 {
                                                                                if let &Opcode::SwidenLow = v2154 {
                                                                                    let v2158 = C::unpack_value_array_2(ctx, v2157);
                                                                                    let v2161 = C::def_inst(ctx, v2158.0);
                                                                                    if let Some(v2162) = v2161 {
                                                                                        let v2163 = &C::inst_data(ctx, v2162);
                                                                                        if let &InstructionData::Unary {
                                                                                            opcode: ref v2164,
                                                                                            arg: v2165,
                                                                                        } = v2163 {
                                                                                            if let &Opcode::SwidenHigh = v2164 {
                                                                                                if v2150 == v2165 {
                                                                                                    let v2166 = C::def_inst(ctx, v2158.1);
                                                                                                    if let Some(v2167) = v2166 {
                                                                                                        let v2168 = &C::inst_data(ctx, v2167);
                                                                                                        if let &InstructionData::Unary {
                                                                                                            opcode: ref v2169,
                                                                                                            arg: v2170,
                                                                                                        } = v2168 {
                                                                                                            if let &Opcode::SwidenHigh = v2169 {
                                                                                                                if v2155 == v2170 {
                                                                                                                    let v2171 = constructor_put_in_xmm(ctx, v2150);
                                                                                                                    let v2172 = &C::put_in_xmm_mem(ctx, v2155);
                                                                                                                    let v2173 = constructor_x64_pmaddwd(ctx, v2171, v2172);
                                                                                                                    let v2174 = constructor_output_xmm(ctx, v2173);
                                                                                                                    // Rule at src/isa/x64/lower.isle line 3782.
                                                                                                                    return Some(v2174);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v174,
                                            arg: v175,
                                        } => {
                                            match v174 {
                                                &Opcode::SwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::SwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    if v496 == I16X8 {
                                                                        let v2121 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001);
                                                                        let v2122 = &constructor_const_to_xmm_mem(ctx, v2121);
                                                                        let v2123 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v184,
                                                                            );
                                                                        let v2124 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v2123, v2122,
                                                                            );
                                                                        let v2125 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2124,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3751.
                                                                        return Some(v2125);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::UwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v496 =
                                                                        C::value_type(ctx, v184);
                                                                    if v496 == I16X8 {
                                                                        let v2130 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
                                                                        let v2131 = &constructor_const_to_xmm_mem(ctx, v2130);
                                                                        let v2123 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v184,
                                                                            );
                                                                        let v2132 =
                                                                            constructor_x64_pxor(
                                                                                ctx, v2123, v2131,
                                                                            );
                                                                        let v2133 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001);
                                                                        let v2134 = &constructor_const_to_xmm_mem(ctx, v2133);
                                                                        let v2135 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v2132, v2134,
                                                                            );
                                                                        let v2137 = C::emit_u128_le_const(ctx, 0x10000000100000001000000010000);
                                                                        let v2138 = &constructor_const_to_xmm_mem(ctx, v2137);
                                                                        let v2139 =
                                                                            constructor_x64_paddd(
                                                                                ctx, v2135, v2138,
                                                                            );
                                                                        let v2140 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2139,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3768.
                                                                        return Some(v2140);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                let v540 = C::use_ssse3(ctx);
                                if v540 == true {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2104 = constructor_x64_phaddd(ctx, v68, v69);
                                    let v2105 = constructor_output_xmm(ctx, v2104);
                                    // Rule at src/isa/x64/lower.isle line 3725.
                                    return Some(v2105);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v459 = constructor_put_in_xmm(ctx, v38.1);
                                let v2106 = &C::xmm_to_xmm_mem(ctx, v459);
                                let v2108 = constructor_x64_shufps(ctx, v68, v2106, 0x88);
                                let v462 = &C::xmm_to_xmm_mem(ctx, v459);
                                let v2110 = constructor_x64_shufps(ctx, v68, v462, 0xDD);
                                let v2111 = &C::xmm_to_xmm_mem(ctx, v2110);
                                let v2112 = constructor_x64_paddd(ctx, v2108, v2111);
                                let v2113 = constructor_output_xmm(ctx, v2112);
                                // Rule at src/isa/x64/lower.isle line 3729.
                                return Some(v2113);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::X86Pmaddubsw => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v540 = C::use_ssse3(ctx);
                            if v540 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v1374 = constructor_put_in_xmm(ctx, v38.1);
                                let v177 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1375 = constructor_x64_pmaddubsw(ctx, v1374, v177);
                                let v1376 = constructor_output_xmm(ctx, v1375);
                                // Rule at src/isa/x64/lower.isle line 2523.
                                return Some(v1376);
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2223 = C::value_type(ctx, v38.0);
                    if v2223 == I64 {
                        let v2674 = C::put_in_reg(ctx, v38.0);
                        let v2675 = C::put_in_reg(ctx, v38.1);
                        let v2676 = C::value_regs(ctx, v2674, v2675);
                        let v2677 = C::output(ctx, v2676);
                        // Rule at src/isa/x64/lower.isle line 4697.
                        return Some(v2677);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2513,
            arg: v2514,
            imm: v2515,
        } => {
            if let &Opcode::Extractlane = v2513 {
                if v2515 == 0x0 {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v2516 = constructor_output_value(ctx, v2514);
                            // Rule at src/isa/x64/lower.isle line 4460.
                            return Some(v2516);
                        }
                    }
                }
                let v2517 = C::value_type(ctx, v2514);
                match v2517 {
                    I8X16 => {
                        let v456 = C::use_sse41(ctx);
                        if v456 == true {
                            let v2524 = constructor_put_in_xmm(ctx, v2514);
                            let v2518 = C::u8_from_uimm8(ctx, v2515);
                            let v2525 = constructor_x64_pextrb(ctx, v2524, v2518);
                            let v2526 = constructor_output_gpr(ctx, v2525);
                            // Rule at src/isa/x64/lower.isle line 4475.
                            return Some(v2526);
                        }
                        let v2518 = C::u8_from_uimm8(ctx, v2515);
                        let v2527 = C::u8_and(ctx, v2518, 0x1);
                        match v2527 {
                            0x0 => {
                                let v2524 = constructor_put_in_xmm(ctx, v2514);
                                let v2528 = C::u8_shr(ctx, v2518, 0x1);
                                let v2529 = constructor_x64_pextrw(ctx, v2524, v2528);
                                let v2533 = constructor_output_gpr(ctx, v2529);
                                // Rule at src/isa/x64/lower.isle line 4486.
                                return Some(v2533);
                            }
                            0x1 => {
                                let v2524 = constructor_put_in_xmm(ctx, v2514);
                                let v2528 = C::u8_shr(ctx, v2518, 0x1);
                                let v2529 = constructor_x64_pextrw(ctx, v2524, v2528);
                                let v1330 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v2530 = &C::imm8_reg_to_imm8_gpr(ctx, &v1330);
                                let v2531 = constructor_x64_shr(ctx, I16, v2529, v2530);
                                let v2532 = constructor_output_gpr(ctx, v2531);
                                // Rule at src/isa/x64/lower.isle line 4479.
                                return Some(v2532);
                            }
                            _ => {}
                        }
                    }
                    I16X8 => {
                        let v2524 = constructor_put_in_xmm(ctx, v2514);
                        let v2518 = C::u8_from_uimm8(ctx, v2515);
                        let v2534 = constructor_x64_pextrw(ctx, v2524, v2518);
                        let v2535 = constructor_output_gpr(ctx, v2534);
                        // Rule at src/isa/x64/lower.isle line 4491.
                        return Some(v2535);
                    }
                    I32X4 => {
                        let v456 = C::use_sse41(ctx);
                        if v456 == true {
                            let v2524 = constructor_put_in_xmm(ctx, v2514);
                            let v2518 = C::u8_from_uimm8(ctx, v2515);
                            let v2536 = constructor_x64_pextrd(ctx, v2524, v2518);
                            let v2537 = constructor_output_gpr(ctx, v2536);
                            // Rule at src/isa/x64/lower.isle line 4495.
                            return Some(v2537);
                        }
                        if v2515 == 0x0 {
                            let v2524 = constructor_put_in_xmm(ctx, v2514);
                            let v2538 = constructor_x64_movd_to_gpr(ctx, v2524);
                            let v2539 = constructor_output_gpr(ctx, v2538);
                            // Rule at src/isa/x64/lower.isle line 4498.
                            return Some(v2539);
                        }
                        let v2519 = &C::put_in_xmm_mem(ctx, v2514);
                        let v2518 = C::u8_from_uimm8(ctx, v2515);
                        let v2520 = constructor_x64_pshufd(ctx, v2519, v2518);
                        let v2540 = constructor_x64_movd_to_gpr(ctx, v2520);
                        let v2541 = constructor_output_gpr(ctx, v2540);
                        // Rule at src/isa/x64/lower.isle line 4500.
                        return Some(v2541);
                    }
                    I64X2 => {
                        let v456 = C::use_sse41(ctx);
                        if v456 == true {
                            let v2524 = constructor_put_in_xmm(ctx, v2514);
                            let v2518 = C::u8_from_uimm8(ctx, v2515);
                            let v2542 = constructor_x64_pextrq(ctx, v2524, v2518);
                            let v2543 = constructor_output_gpr(ctx, v2542);
                            // Rule at src/isa/x64/lower.isle line 4504.
                            return Some(v2543);
                        }
                        match v2515 {
                            0x0 => {
                                let v2524 = constructor_put_in_xmm(ctx, v2514);
                                let v2544 = constructor_x64_movq_to_gpr(ctx, v2524);
                                let v2545 = constructor_output_gpr(ctx, v2544);
                                // Rule at src/isa/x64/lower.isle line 4507.
                                return Some(v2545);
                            }
                            0x1 => {
                                let v2519 = &C::put_in_xmm_mem(ctx, v2514);
                                let v2546 = constructor_x64_pshufd(ctx, v2519, 0xE);
                                let v2547 = constructor_x64_movq_to_gpr(ctx, v2546);
                                let v2548 = constructor_output_gpr(ctx, v2547);
                                // Rule at src/isa/x64/lower.isle line 4509.
                                return Some(v2548);
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v2519 = &C::put_in_xmm_mem(ctx, v2514);
                        let v2518 = C::u8_from_uimm8(ctx, v2515);
                        let v2520 = constructor_x64_pshufd(ctx, v2519, v2518);
                        let v2521 = constructor_output_xmm(ctx, v2520);
                        // Rule at src/isa/x64/lower.isle line 4464.
                        return Some(v2521);
                    }
                    F64X2 => {
                        if v2515 == 0x1 {
                            let v2519 = &C::put_in_xmm_mem(ctx, v2514);
                            let v2522 = constructor_x64_pshufd(ctx, v2519, 0xEE);
                            let v2523 = constructor_output_xmm(ctx, v2522);
                            // Rule at src/isa/x64/lower.isle line 4468.
                            return Some(v2523);
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v1868,
            args: v1869,
            func_ref: v1870,
        } => {
            match v1868 {
                &Opcode::Call => {
                    let v1872 = C::func_ref_data(ctx, v1870);
                    let v1871 = C::value_list_slice(ctx, v1869);
                    let v1876 = C::gen_call(ctx, v1872.0, v1872.1, v1872.2, v1871);
                    // Rule at src/isa/x64/lower.isle line 3276.
                    return Some(v1876);
                }
                &Opcode::ReturnCall => {
                    let v1872 = C::func_ref_data(ctx, v1870);
                    let v1871 = C::value_list_slice(ctx, v1869);
                    let v1886 = C::gen_return_call(ctx, v1872.0, v1872.1, v1872.2, v1871);
                    // Rule at src/isa/x64/lower.isle line 3284.
                    return Some(v1886);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1877,
            args: v1878,
            sig_ref: v1879,
        } => {
            match v1877 {
                &Opcode::CallIndirect => {
                    let v1880 = C::value_list_slice(ctx, v1878);
                    let v1881 = C::value_slice_unwrap(ctx, v1880);
                    if let Some(v1882) = v1881 {
                        let v1885 = C::gen_call_indirect(ctx, v1879, v1882.0, v1882.1);
                        // Rule at src/isa/x64/lower.isle line 3279.
                        return Some(v1885);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1880 = C::value_list_slice(ctx, v1878);
                    let v1881 = C::value_slice_unwrap(ctx, v1880);
                    if let Some(v1882) = v1881 {
                        let v1887 = C::gen_return_call_indirect(ctx, v1879, v1882.0, v1882.1);
                        // Rule at src/isa/x64/lower.isle line 3287.
                        return Some(v1887);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1083,
            args: ref v1084,
            cond: ref v1085,
        } => {
            if let &Opcode::Fcmp = v1083 {
                match v1085 {
                    &FloatCC::Equal => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1100 =
                                constructor_x64_cmpp(ctx, v1096, v1097, v1098, &FcmpImm::Equal);
                            let v1101 = constructor_output_xmm(ctx, v1100);
                            // Rule at src/isa/x64/lower.isle line 2037.
                            return Some(v1101);
                        }
                    }
                    &FloatCC::GreaterThan => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1123 = constructor_put_in_xmm(ctx, v1086.1);
                            let v1124 = &C::put_in_xmm_mem(ctx, v1086.0);
                            let v1125 =
                                constructor_x64_cmpp(ctx, v1096, v1123, v1124, &FcmpImm::LessThan);
                            let v1126 = constructor_output_xmm(ctx, v1125);
                            // Rule at src/isa/x64/lower.isle line 2057.
                            return Some(v1126);
                        }
                    }
                    &FloatCC::GreaterThanOrEqual => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1123 = constructor_put_in_xmm(ctx, v1086.1);
                            let v1124 = &C::put_in_xmm_mem(ctx, v1086.0);
                            let v1127 = constructor_x64_cmpp(
                                ctx,
                                v1096,
                                v1123,
                                v1124,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v1128 = constructor_output_xmm(ctx, v1127);
                            // Rule at src/isa/x64/lower.isle line 2059.
                            return Some(v1128);
                        }
                    }
                    &FloatCC::LessThan => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1106 =
                                constructor_x64_cmpp(ctx, v1096, v1097, v1098, &FcmpImm::LessThan);
                            let v1107 = constructor_output_xmm(ctx, v1106);
                            // Rule at src/isa/x64/lower.isle line 2041.
                            return Some(v1107);
                        }
                    }
                    &FloatCC::LessThanOrEqual => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1109 = constructor_x64_cmpp(
                                ctx,
                                v1096,
                                v1097,
                                v1098,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v1110 = constructor_output_xmm(ctx, v1109);
                            // Rule at src/isa/x64/lower.isle line 2043.
                            return Some(v1110);
                        }
                    }
                    &FloatCC::NotEqual => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1103 =
                                constructor_x64_cmpp(ctx, v1096, v1097, v1098, &FcmpImm::NotEqual);
                            let v1104 = constructor_output_xmm(ctx, v1103);
                            // Rule at src/isa/x64/lower.isle line 2039.
                            return Some(v1104);
                        }
                    }
                    &FloatCC::Ordered => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1112 =
                                constructor_x64_cmpp(ctx, v1096, v1097, v1098, &FcmpImm::Ordered);
                            let v1113 = constructor_output_xmm(ctx, v1112);
                            // Rule at src/isa/x64/lower.isle line 2045.
                            return Some(v1113);
                        }
                    }
                    &FloatCC::Unordered => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1115 =
                                constructor_x64_cmpp(ctx, v1096, v1097, v1098, &FcmpImm::Unordered);
                            let v1116 = constructor_output_xmm(ctx, v1115);
                            // Rule at src/isa/x64/lower.isle line 2047.
                            return Some(v1116);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThan => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1118 = constructor_x64_cmpp(
                                ctx,
                                v1096,
                                v1097,
                                v1098,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v1119 = constructor_output_xmm(ctx, v1118);
                            // Rule at src/isa/x64/lower.isle line 2049.
                            return Some(v1119);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThanOrEqual => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1097 = constructor_put_in_xmm(ctx, v1086.0);
                            let v1098 = &C::put_in_xmm_mem(ctx, v1086.1);
                            let v1121 = constructor_x64_cmpp(
                                ctx,
                                v1096,
                                v1097,
                                v1098,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v1122 = constructor_output_xmm(ctx, v1121);
                            // Rule at src/isa/x64/lower.isle line 2051.
                            return Some(v1122);
                        }
                    }
                    &FloatCC::UnorderedOrLessThan => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1123 = constructor_put_in_xmm(ctx, v1086.1);
                            let v1124 = &C::put_in_xmm_mem(ctx, v1086.0);
                            let v1129 = constructor_x64_cmpp(
                                ctx,
                                v1096,
                                v1123,
                                v1124,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v1130 = constructor_output_xmm(ctx, v1129);
                            // Rule at src/isa/x64/lower.isle line 2061.
                            return Some(v1130);
                        }
                    }
                    &FloatCC::UnorderedOrLessThanOrEqual => {
                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                        let v1089 = C::value_type(ctx, v1086.0);
                        let v1095 = C::ty_vec128(ctx, v1089);
                        if let Some(v1096) = v1095 {
                            let v1123 = constructor_put_in_xmm(ctx, v1086.1);
                            let v1124 = &C::put_in_xmm_mem(ctx, v1086.0);
                            let v1131 = constructor_x64_cmpp(
                                ctx,
                                v1096,
                                v1123,
                                v1124,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v1132 = constructor_output_xmm(ctx, v1131);
                            // Rule at src/isa/x64/lower.isle line 2063.
                            return Some(v1132);
                        }
                    }
                    _ => {}
                }
                let v1086 = C::unpack_value_array_2(ctx, v1084);
                let v1089 = C::value_type(ctx, v1086.0);
                let v1090 = C::ty_scalar_float(ctx, v1089);
                if let Some(v1091) = v1090 {
                    let v1092 = &constructor_emit_fcmp(ctx, v1085, v1086.0, v1086.1);
                    let v1093 = constructor_lower_fcmp_bool(ctx, v1092);
                    let v1094 = C::output(ctx, v1093);
                    // Rule at src/isa/x64/lower.isle line 2030.
                    return Some(v1094);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1792,
            func_ref: v1793,
        } => {
            if let &Opcode::FuncAddr = v1792 {
                let v1794 = C::func_ref_data(ctx, v1793);
                let v1799 = constructor_load_ext_name(ctx, v1794.1, 0x0, v1794.2);
                let v1800 = constructor_output_reg(ctx, v1799);
                // Rule at src/isa/x64/lower.isle line 3218.
                return Some(v1800);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v918,
            args: ref v919,
            code: ref v920,
        } => {
            if let &Opcode::UaddOverflowTrap = v918 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v921 = C::unpack_value_array_2(ctx, v919);
                        let v937 = &C::sinkable_load(ctx, v921.0);
                        if let Some(v938) = v937 {
                            let v932 = constructor_put_in_gpr(ctx, v921.1);
                            let v939 = &constructor_sink_load_to_gpr_mem_imm(ctx, v938);
                            let v940 = &constructor_x64_add_with_flags_paired(ctx, v5, v932, v939);
                            let v927 = &constructor_trap_if(ctx, &CC::B, v920);
                            let v941 = constructor_with_flags(ctx, v940, v927);
                            let v942 = C::output(ctx, v941);
                            // Rule at src/isa/x64/lower.isle line 1818.
                            return Some(v942);
                        }
                        let v930 = &C::simm32_from_value(ctx, v921.0);
                        if let Some(v931) = v930 {
                            let v932 = constructor_put_in_gpr(ctx, v921.1);
                            let v933 = &constructor_x64_add_with_flags_paired(ctx, v5, v932, v931);
                            let v934 = &constructor_trap_if(ctx, &CC::B, v920);
                            let v935 = constructor_with_flags(ctx, v933, v934);
                            let v936 = C::output(ctx, v935);
                            // Rule at src/isa/x64/lower.isle line 1812.
                            return Some(v936);
                        }
                        let v924 = constructor_put_in_gpr(ctx, v921.0);
                        let v925 = &constructor_put_in_gpr_mem_imm(ctx, v921.1);
                        let v926 = &constructor_x64_add_with_flags_paired(ctx, v5, v924, v925);
                        let v927 = &constructor_trap_if(ctx, &CC::B, v920);
                        let v928 = constructor_with_flags(ctx, v926, v927);
                        let v929 = C::output(ctx, v928);
                        // Rule at src/isa/x64/lower.isle line 1804.
                        return Some(v929);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v947,
            args: ref v948,
            cond: ref v949,
        } => {
            if let &Opcode::Icmp = v947 {
                match v949 {
                    &IntCC::Equal => {
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1002 = constructor_put_in_xmm(ctx, v950.0);
                            let v1003 = &C::put_in_xmm_mem(ctx, v950.1);
                            let v1004 = constructor_x64_pcmpeq(ctx, v1001, v1002, v1003);
                            let v1005 = constructor_output_xmm(ctx, v1004);
                            // Rule at src/isa/x64/lower.isle line 1880.
                            return Some(v1005);
                        }
                    }
                    &IntCC::NotEqual => {
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1002 = constructor_put_in_xmm(ctx, v950.0);
                            let v1003 = &C::put_in_xmm_mem(ctx, v950.1);
                            let v1004 = constructor_x64_pcmpeq(ctx, v1001, v1002, v1003);
                            let v1006 = constructor_vector_all_ones(ctx);
                            let v1007 = &C::xmm_to_xmm_mem(ctx, v1006);
                            let v1008 = constructor_x64_pxor(ctx, v1004, v1007);
                            let v1009 = constructor_output_xmm(ctx, v1008);
                            // Rule at src/isa/x64/lower.isle line 1885.
                            return Some(v1009);
                        }
                    }
                    &IntCC::SignedGreaterThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v950 = C::unpack_value_array_2(ctx, v948);
                                let v971 = C::def_inst(ctx, v950.0);
                                if let Some(v972) = v971 {
                                    let v973 = &C::inst_data(ctx, v972);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v974,
                                        imm: v975,
                                    } = v973
                                    {
                                        if let &Opcode::Iconst = v974 {
                                            let v976 = C::u64_from_imm64(ctx, v975);
                                            if v976 == 0x0 {
                                                let v977 = C::value_type(ctx, v950.1);
                                                match v977 {
                                                    I32 => {
                                                        let v978 =
                                                            constructor_put_in_gpr(ctx, v950.1);
                                                        let v989 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v990 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v989);
                                                        let v993 = constructor_x64_shr(
                                                            ctx, I32, v978, v990,
                                                        );
                                                        let v994 =
                                                            constructor_output_gpr(ctx, v993);
                                                        // Rule at src/isa/x64/lower.isle line 1864.
                                                        return Some(v994);
                                                    }
                                                    I64 => {
                                                        let v978 =
                                                            constructor_put_in_gpr(ctx, v950.1);
                                                        let v967 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v968 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v967);
                                                        let v979 = constructor_x64_shr(
                                                            ctx, I64, v978, v968,
                                                        );
                                                        let v980 =
                                                            constructor_output_gpr(ctx, v979);
                                                        // Rule at src/isa/x64/lower.isle line 1848.
                                                        return Some(v980);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1002 = constructor_put_in_xmm(ctx, v950.0);
                            let v1003 = &C::put_in_xmm_mem(ctx, v950.1);
                            let v1010 = constructor_x64_pcmpgt(ctx, v1001, v1002, v1003);
                            let v1011 = constructor_output_xmm(ctx, v1010);
                            // Rule at src/isa/x64/lower.isle line 1892.
                            return Some(v1011);
                        }
                    }
                    &IntCC::SignedGreaterThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v950 = C::unpack_value_array_2(ctx, v948);
                                let v953 = C::value_type(ctx, v950.0);
                                match v953 {
                                    I32 => {
                                        let v959 = C::def_inst(ctx, v950.1);
                                        if let Some(v960) = v959 {
                                            let v961 = &C::inst_data(ctx, v960);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v962,
                                                imm: v963,
                                            } = v961
                                            {
                                                if let &Opcode::Iconst = v962 {
                                                    let v964 = C::u64_from_imm64(ctx, v963);
                                                    if v964 == 0x0 {
                                                        let v965 =
                                                            constructor_put_in_gpr(ctx, v950.0);
                                                        let v985 =
                                                            constructor_x64_not(ctx, I64, v965);
                                                        let v989 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v995 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v989);
                                                        let v998 = constructor_x64_shr(
                                                            ctx, I32, v985, v995,
                                                        );
                                                        let v999 =
                                                            constructor_output_gpr(ctx, v998);
                                                        // Rule at src/isa/x64/lower.isle line 1872.
                                                        return Some(v999);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v959 = C::def_inst(ctx, v950.1);
                                        if let Some(v960) = v959 {
                                            let v961 = &C::inst_data(ctx, v960);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v962,
                                                imm: v963,
                                            } = v961
                                            {
                                                if let &Opcode::Iconst = v962 {
                                                    let v964 = C::u64_from_imm64(ctx, v963);
                                                    if v964 == 0x0 {
                                                        let v965 =
                                                            constructor_put_in_gpr(ctx, v950.0);
                                                        let v985 =
                                                            constructor_x64_not(ctx, I64, v965);
                                                        let v967 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v982 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v967);
                                                        let v986 = constructor_x64_shr(
                                                            ctx, I64, v985, v982,
                                                        );
                                                        let v987 =
                                                            constructor_output_gpr(ctx, v986);
                                                        // Rule at src/isa/x64/lower.isle line 1856.
                                                        return Some(v987);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1044 = constructor_has_pmaxs(ctx, v1001);
                            if v1044 == true {
                                let v1002 = constructor_put_in_xmm(ctx, v950.0);
                                let v1027 = constructor_put_in_xmm(ctx, v950.0);
                                let v1045 = &C::put_in_xmm_mem(ctx, v950.1);
                                let v1046 = constructor_x64_pmaxs(ctx, v1001, v1027, v1045);
                                let v1047 = &C::xmm_to_xmm_mem(ctx, v1046);
                                let v1048 = constructor_x64_pcmpeq(ctx, v1001, v1002, v1047);
                                let v1049 = constructor_output_xmm(ctx, v1048);
                                // Rule at src/isa/x64/lower.isle line 1942.
                                return Some(v1049);
                            }
                            let v1012 = constructor_put_in_xmm(ctx, v950.1);
                            let v1013 = &C::put_in_xmm_mem(ctx, v950.0);
                            let v1014 = constructor_x64_pcmpgt(ctx, v1001, v1012, v1013);
                            let v1006 = constructor_vector_all_ones(ctx);
                            let v1007 = &C::xmm_to_xmm_mem(ctx, v1006);
                            let v1050 = constructor_x64_pxor(ctx, v1014, v1007);
                            let v1051 = constructor_output_xmm(ctx, v1050);
                            // Rule at src/isa/x64/lower.isle line 1948.
                            return Some(v1051);
                        }
                    }
                    &IntCC::SignedLessThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v950 = C::unpack_value_array_2(ctx, v948);
                                let v953 = C::value_type(ctx, v950.0);
                                match v953 {
                                    I32 => {
                                        let v959 = C::def_inst(ctx, v950.1);
                                        if let Some(v960) = v959 {
                                            let v961 = &C::inst_data(ctx, v960);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v962,
                                                imm: v963,
                                            } = v961
                                            {
                                                if let &Opcode::Iconst = v962 {
                                                    let v964 = C::u64_from_imm64(ctx, v963);
                                                    if v964 == 0x0 {
                                                        let v965 =
                                                            constructor_put_in_gpr(ctx, v950.0);
                                                        let v989 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v990 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v989);
                                                        let v991 = constructor_x64_shr(
                                                            ctx, I32, v965, v990,
                                                        );
                                                        let v992 =
                                                            constructor_output_gpr(ctx, v991);
                                                        // Rule at src/isa/x64/lower.isle line 1860.
                                                        return Some(v992);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v959 = C::def_inst(ctx, v950.1);
                                        if let Some(v960) = v959 {
                                            let v961 = &C::inst_data(ctx, v960);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v962,
                                                imm: v963,
                                            } = v961
                                            {
                                                if let &Opcode::Iconst = v962 {
                                                    let v964 = C::u64_from_imm64(ctx, v963);
                                                    if v964 == 0x0 {
                                                        let v965 =
                                                            constructor_put_in_gpr(ctx, v950.0);
                                                        let v967 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v968 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v967);
                                                        let v969 = constructor_x64_shr(
                                                            ctx, I64, v965, v968,
                                                        );
                                                        let v970 =
                                                            constructor_output_gpr(ctx, v969);
                                                        // Rule at src/isa/x64/lower.isle line 1844.
                                                        return Some(v970);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1012 = constructor_put_in_xmm(ctx, v950.1);
                            let v1013 = &C::put_in_xmm_mem(ctx, v950.0);
                            let v1014 = constructor_x64_pcmpgt(ctx, v1001, v1012, v1013);
                            let v1015 = constructor_output_xmm(ctx, v1014);
                            // Rule at src/isa/x64/lower.isle line 1897.
                            return Some(v1015);
                        }
                    }
                    &IntCC::SignedLessThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v950 = C::unpack_value_array_2(ctx, v948);
                                let v971 = C::def_inst(ctx, v950.0);
                                if let Some(v972) = v971 {
                                    let v973 = &C::inst_data(ctx, v972);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v974,
                                        imm: v975,
                                    } = v973
                                    {
                                        if let &Opcode::Iconst = v974 {
                                            let v976 = C::u64_from_imm64(ctx, v975);
                                            if v976 == 0x0 {
                                                let v977 = C::value_type(ctx, v950.1);
                                                match v977 {
                                                    I32 => {
                                                        let v978 =
                                                            constructor_put_in_gpr(ctx, v950.1);
                                                        let v981 =
                                                            constructor_x64_not(ctx, I64, v978);
                                                        let v989 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v995 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v989);
                                                        let v996 = constructor_x64_shr(
                                                            ctx, I32, v981, v995,
                                                        );
                                                        let v997 =
                                                            constructor_output_gpr(ctx, v996);
                                                        // Rule at src/isa/x64/lower.isle line 1868.
                                                        return Some(v997);
                                                    }
                                                    I64 => {
                                                        let v978 =
                                                            constructor_put_in_gpr(ctx, v950.1);
                                                        let v981 =
                                                            constructor_x64_not(ctx, I64, v978);
                                                        let v967 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v982 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v967);
                                                        let v983 = constructor_x64_shr(
                                                            ctx, I64, v981, v982,
                                                        );
                                                        let v984 =
                                                            constructor_output_gpr(ctx, v983);
                                                        // Rule at src/isa/x64/lower.isle line 1852.
                                                        return Some(v984);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1052 = constructor_has_pmins(ctx, v1001);
                            if v1052 == true {
                                let v1002 = constructor_put_in_xmm(ctx, v950.0);
                                let v1027 = constructor_put_in_xmm(ctx, v950.0);
                                let v1045 = &C::put_in_xmm_mem(ctx, v950.1);
                                let v1053 = constructor_x64_pmins(ctx, v1001, v1027, v1045);
                                let v1054 = &C::xmm_to_xmm_mem(ctx, v1053);
                                let v1055 = constructor_x64_pcmpeq(ctx, v1001, v1002, v1054);
                                let v1056 = constructor_output_xmm(ctx, v1055);
                                // Rule at src/isa/x64/lower.isle line 1954.
                                return Some(v1056);
                            }
                            let v1002 = constructor_put_in_xmm(ctx, v950.0);
                            let v1003 = &C::put_in_xmm_mem(ctx, v950.1);
                            let v1010 = constructor_x64_pcmpgt(ctx, v1001, v1002, v1003);
                            let v1006 = constructor_vector_all_ones(ctx);
                            let v1007 = &C::xmm_to_xmm_mem(ctx, v1006);
                            let v1057 = constructor_x64_pxor(ctx, v1010, v1007);
                            let v1058 = constructor_output_xmm(ctx, v1057);
                            // Rule at src/isa/x64/lower.isle line 1959.
                            return Some(v1058);
                        }
                    }
                    &IntCC::UnsignedGreaterThan => {
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1016 = constructor_has_pmaxu(ctx, v1001);
                            if v1016 == true {
                                let v1002 = constructor_put_in_xmm(ctx, v950.0);
                                let v1017 = constructor_put_in_xmm(ctx, v950.1);
                                let v1018 = &C::xmm_to_xmm_mem(ctx, v1017);
                                let v1019 = constructor_x64_pmaxu(ctx, v1001, v1002, v1018);
                                let v1020 = &C::xmm_to_xmm_mem(ctx, v1017);
                                let v1021 = constructor_x64_pcmpeq(ctx, v1001, v1019, v1020);
                                let v1022 = constructor_vector_all_ones(ctx);
                                let v1023 = &C::xmm_to_xmm_mem(ctx, v1022);
                                let v1024 = constructor_x64_pxor(ctx, v1021, v1023);
                                let v1025 = constructor_output_xmm(ctx, v1024);
                                // Rule at src/isa/x64/lower.isle line 1904.
                                return Some(v1025);
                            }
                            let v1026 = constructor_flip_high_bit_mask(ctx, v1001);
                            let v1027 = constructor_put_in_xmm(ctx, v950.0);
                            let v1028 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1029 = constructor_x64_pxor(ctx, v1027, v1028);
                            let v1030 = constructor_put_in_xmm(ctx, v950.1);
                            let v1031 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1032 = constructor_x64_pxor(ctx, v1030, v1031);
                            let v1033 = &C::xmm_to_xmm_mem(ctx, v1032);
                            let v1034 = constructor_x64_pcmpgt(ctx, v1001, v1029, v1033);
                            let v1035 = constructor_output_xmm(ctx, v1034);
                            // Rule at src/isa/x64/lower.isle line 1914.
                            return Some(v1035);
                        }
                    }
                    &IntCC::UnsignedGreaterThanOrEqual => {
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1016 = constructor_has_pmaxu(ctx, v1001);
                            if v1016 == true {
                                let v1002 = constructor_put_in_xmm(ctx, v950.0);
                                let v1027 = constructor_put_in_xmm(ctx, v950.0);
                                let v1045 = &C::put_in_xmm_mem(ctx, v950.1);
                                let v1059 = constructor_x64_pmaxu(ctx, v1001, v1027, v1045);
                                let v1060 = &C::xmm_to_xmm_mem(ctx, v1059);
                                let v1061 = constructor_x64_pcmpeq(ctx, v1001, v1002, v1060);
                                let v1062 = constructor_output_xmm(ctx, v1061);
                                // Rule at src/isa/x64/lower.isle line 1964.
                                return Some(v1062);
                            }
                        }
                        if v953 == I16X8 {
                            let v1012 = constructor_put_in_xmm(ctx, v950.1);
                            let v1013 = &C::put_in_xmm_mem(ctx, v950.0);
                            let v1063 = constructor_x64_psubusw(ctx, v1012, v1013);
                            let v1064 = constructor_xmm_zero(ctx, I16X8);
                            let v1065 = &C::xmm_to_xmm_mem(ctx, v1064);
                            let v1066 = constructor_x64_pcmpeqw(ctx, v1063, v1065);
                            let v1067 = constructor_output_xmm(ctx, v1066);
                            // Rule at src/isa/x64/lower.isle line 1970.
                            return Some(v1067);
                        }
                        if let Some(v1001) = v1000 {
                            let v1026 = constructor_flip_high_bit_mask(ctx, v1001);
                            let v1027 = constructor_put_in_xmm(ctx, v950.0);
                            let v1028 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1029 = constructor_x64_pxor(ctx, v1027, v1028);
                            let v1030 = constructor_put_in_xmm(ctx, v950.1);
                            let v1031 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1032 = constructor_x64_pxor(ctx, v1030, v1031);
                            let v1041 = &C::xmm_to_xmm_mem(ctx, v1029);
                            let v1042 = constructor_x64_pcmpgt(ctx, v1001, v1032, v1041);
                            let v1068 = constructor_vector_all_ones(ctx);
                            let v1069 = &C::xmm_to_xmm_mem(ctx, v1068);
                            let v1070 = constructor_x64_pxor(ctx, v1042, v1069);
                            let v1071 = constructor_output_xmm(ctx, v1070);
                            // Rule at src/isa/x64/lower.isle line 1976.
                            return Some(v1071);
                        }
                    }
                    &IntCC::UnsignedLessThan => {
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1036 = constructor_has_pminu(ctx, v1001);
                            if v1036 == true {
                                let v1002 = constructor_put_in_xmm(ctx, v950.0);
                                let v1017 = constructor_put_in_xmm(ctx, v950.1);
                                let v1018 = &C::xmm_to_xmm_mem(ctx, v1017);
                                let v1037 = constructor_x64_pminu(ctx, v1001, v1002, v1018);
                                let v1020 = &C::xmm_to_xmm_mem(ctx, v1017);
                                let v1038 = constructor_x64_pcmpeq(ctx, v1001, v1037, v1020);
                                let v1022 = constructor_vector_all_ones(ctx);
                                let v1023 = &C::xmm_to_xmm_mem(ctx, v1022);
                                let v1039 = constructor_x64_pxor(ctx, v1038, v1023);
                                let v1040 = constructor_output_xmm(ctx, v1039);
                                // Rule at src/isa/x64/lower.isle line 1922.
                                return Some(v1040);
                            }
                            let v1026 = constructor_flip_high_bit_mask(ctx, v1001);
                            let v1027 = constructor_put_in_xmm(ctx, v950.0);
                            let v1028 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1029 = constructor_x64_pxor(ctx, v1027, v1028);
                            let v1030 = constructor_put_in_xmm(ctx, v950.1);
                            let v1031 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1032 = constructor_x64_pxor(ctx, v1030, v1031);
                            let v1041 = &C::xmm_to_xmm_mem(ctx, v1029);
                            let v1042 = constructor_x64_pcmpgt(ctx, v1001, v1032, v1041);
                            let v1043 = constructor_output_xmm(ctx, v1042);
                            // Rule at src/isa/x64/lower.isle line 1933.
                            return Some(v1043);
                        }
                    }
                    &IntCC::UnsignedLessThanOrEqual => {
                        let v950 = C::unpack_value_array_2(ctx, v948);
                        let v953 = C::value_type(ctx, v950.0);
                        let v1000 = C::ty_vec128(ctx, v953);
                        if let Some(v1001) = v1000 {
                            let v1036 = constructor_has_pminu(ctx, v1001);
                            if v1036 == true {
                                let v1002 = constructor_put_in_xmm(ctx, v950.0);
                                let v1027 = constructor_put_in_xmm(ctx, v950.0);
                                let v1045 = &C::put_in_xmm_mem(ctx, v950.1);
                                let v1072 = constructor_x64_pminu(ctx, v1001, v1027, v1045);
                                let v1073 = &C::xmm_to_xmm_mem(ctx, v1072);
                                let v1074 = constructor_x64_pcmpeq(ctx, v1001, v1002, v1073);
                                let v1075 = constructor_output_xmm(ctx, v1074);
                                // Rule at src/isa/x64/lower.isle line 1987.
                                return Some(v1075);
                            }
                        }
                        if v953 == I16X8 {
                            let v1002 = constructor_put_in_xmm(ctx, v950.0);
                            let v1003 = &C::put_in_xmm_mem(ctx, v950.1);
                            let v1076 = constructor_x64_psubusw(ctx, v1002, v1003);
                            let v1077 = constructor_xmm_zero(ctx, I8X16);
                            let v1078 = &C::xmm_to_xmm_mem(ctx, v1077);
                            let v1079 = constructor_x64_pcmpeqw(ctx, v1076, v1078);
                            let v1080 = constructor_output_xmm(ctx, v1079);
                            // Rule at src/isa/x64/lower.isle line 1994.
                            return Some(v1080);
                        }
                        if let Some(v1001) = v1000 {
                            let v1026 = constructor_flip_high_bit_mask(ctx, v1001);
                            let v1027 = constructor_put_in_xmm(ctx, v950.0);
                            let v1028 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1029 = constructor_x64_pxor(ctx, v1027, v1028);
                            let v1030 = constructor_put_in_xmm(ctx, v950.1);
                            let v1031 = &C::xmm_to_xmm_mem(ctx, v1026);
                            let v1032 = constructor_x64_pxor(ctx, v1030, v1031);
                            let v1033 = &C::xmm_to_xmm_mem(ctx, v1032);
                            let v1034 = constructor_x64_pcmpgt(ctx, v1001, v1029, v1033);
                            let v1068 = constructor_vector_all_ones(ctx);
                            let v1069 = &C::xmm_to_xmm_mem(ctx, v1068);
                            let v1081 = constructor_x64_pxor(ctx, v1034, v1069);
                            let v1082 = constructor_output_xmm(ctx, v1081);
                            // Rule at src/isa/x64/lower.isle line 2002.
                            return Some(v1082);
                        }
                    }
                    _ => {}
                }
                let v950 = C::unpack_value_array_2(ctx, v948);
                let v953 = C::value_type(ctx, v950.0);
                if v953 == I128 {
                    let v956 = &constructor_emit_cmp(ctx, v949, v950.0, v950.1);
                    let v957 = constructor_lower_icmp_bool(ctx, v956);
                    let v958 = C::output(ctx, v957);
                    // Rule at src/isa/x64/lower.isle line 1840.
                    return Some(v958);
                }
                let v954 = C::fits_in_64(ctx, v953);
                if let Some(v955) = v954 {
                    let v956 = &constructor_emit_cmp(ctx, v949, v950.0, v950.1);
                    let v957 = constructor_lower_icmp_bool(ctx, v956);
                    let v958 = C::output(ctx, v957);
                    // Rule at src/isa/x64/lower.isle line 1837.
                    return Some(v958);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1588,
            arg: v1589,
            flags: v1590,
            offset: v1591,
        } => {
            match v1588 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1620 = &C::amode_to_synthetic_amode(ctx, v1601);
                                let v1621 = constructor_x64_movss_load(ctx, v1620);
                                let v1622 = constructor_output_xmm(ctx, v1621);
                                // Rule at src/isa/x64/lower.isle line 2902.
                                return Some(v1622);
                            }
                            F64 => {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1620 = &C::amode_to_synthetic_amode(ctx, v1601);
                                let v1623 = constructor_x64_movsd_load(ctx, v1620);
                                let v1624 = constructor_output_xmm(ctx, v1623);
                                // Rule at src/isa/x64/lower.isle line 2904.
                                return Some(v1624);
                            }
                            F32X4 => {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1620 = &C::amode_to_synthetic_amode(ctx, v1601);
                                let v1625 = constructor_x64_movups_load(ctx, v1620);
                                let v1626 = constructor_output_xmm(ctx, v1625);
                                // Rule at src/isa/x64/lower.isle line 2906.
                                return Some(v1626);
                            }
                            F64X2 => {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1620 = &C::amode_to_synthetic_amode(ctx, v1601);
                                let v1627 = constructor_x64_movupd_load(ctx, v1620);
                                let v1628 = constructor_output_xmm(ctx, v1627);
                                // Rule at src/isa/x64/lower.isle line 2908.
                                return Some(v1628);
                            }
                            _ => {}
                        }
                        let v1599 = C::ty_int_ref_64(ctx, v3);
                        if let Some(v1600) = v1599 {
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1602 = constructor_x64_mov(ctx, v1601);
                            let v1603 = constructor_output_reg(ctx, v1602);
                            // Rule at src/isa/x64/lower.isle line 2880.
                            return Some(v1603);
                        }
                        let v867 = C::ty_vec128(ctx, v3);
                        if let Some(v868) = v867 {
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1629 = &constructor_amode_to_xmm_mem(ctx, v1601);
                            let v1630 = constructor_x64_movdqu_load(ctx, v1629);
                            let v1631 = constructor_output_xmm(ctx, v1630);
                            // Rule at src/isa/x64/lower.isle line 2910.
                            return Some(v1631);
                        }
                        if v3 == I128 {
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1633 = &C::amode_offset(ctx, v1601, 0x8);
                            let v1634 = constructor_x64_mov(ctx, v1601);
                            let v1635 = constructor_x64_mov(ctx, v1633);
                            let v1636 = C::value_regs(ctx, v1634, v1635);
                            let v1637 = C::output(ctx, v1636);
                            // Rule at src/isa/x64/lower.isle line 2914.
                            return Some(v1637);
                        }
                        let v1358 = C::fits_in_32(ctx, v3);
                        if let Some(v1359) = v1358 {
                            let v1585 = &C::type_register_class(ctx, v3);
                            if let Some(v1586) = v1585 {
                                if let &RegisterClass::Gpr {
                                    single_register: v1587,
                                } = v1586
                                {
                                    let v1592 = C::ty_bits_u16(ctx, v1359);
                                    let v1594 = &C::ext_mode(ctx, v1592, 0x40);
                                    let v1595 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                    let v1596 = &constructor_amode_to_gpr_mem(ctx, v1595);
                                    let v1597 = constructor_x64_movzx(ctx, v1594, v1596);
                                    let v1598 = constructor_output_gpr(ctx, v1597);
                                    // Rule at src/isa/x64/lower.isle line 2876.
                                    return Some(v1598);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1585 = &C::type_register_class(ctx, v3);
                        if let Some(v1586) = v1585 {
                            if let &RegisterClass::Gpr {
                                single_register: v1587,
                            } = v1586
                            {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                                let v1606 = constructor_x64_movzx(ctx, &ExtMode::BQ, v1605);
                                let v1607 = constructor_output_gpr(ctx, v1606);
                                // Rule at src/isa/x64/lower.isle line 2885.
                                return Some(v1607);
                            }
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1585 = &C::type_register_class(ctx, v3);
                        if let Some(v1586) = v1585 {
                            if let &RegisterClass::Gpr {
                                single_register: v1587,
                            } = v1586
                            {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                                let v1608 = constructor_x64_movsx(ctx, &ExtMode::BQ, v1605);
                                let v1609 = constructor_output_gpr(ctx, v1608);
                                // Rule at src/isa/x64/lower.isle line 2887.
                                return Some(v1609);
                            }
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1585 = &C::type_register_class(ctx, v3);
                        if let Some(v1586) = v1585 {
                            if let &RegisterClass::Gpr {
                                single_register: v1587,
                            } = v1586
                            {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                                let v1611 = constructor_x64_movzx(ctx, &ExtMode::WQ, v1605);
                                let v1612 = constructor_output_gpr(ctx, v1611);
                                // Rule at src/isa/x64/lower.isle line 2889.
                                return Some(v1612);
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1585 = &C::type_register_class(ctx, v3);
                        if let Some(v1586) = v1585 {
                            if let &RegisterClass::Gpr {
                                single_register: v1587,
                            } = v1586
                            {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                                let v1613 = constructor_x64_movsx(ctx, &ExtMode::WQ, v1605);
                                let v1614 = constructor_output_gpr(ctx, v1613);
                                // Rule at src/isa/x64/lower.isle line 2891.
                                return Some(v1614);
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1585 = &C::type_register_class(ctx, v3);
                        if let Some(v1586) = v1585 {
                            if let &RegisterClass::Gpr {
                                single_register: v1587,
                            } = v1586
                            {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                                let v1616 = constructor_x64_movzx(ctx, &ExtMode::LQ, v1605);
                                let v1617 = constructor_output_gpr(ctx, v1616);
                                // Rule at src/isa/x64/lower.isle line 2893.
                                return Some(v1617);
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1585 = &C::type_register_class(ctx, v3);
                        if let Some(v1586) = v1585 {
                            if let &RegisterClass::Gpr {
                                single_register: v1587,
                            } = v1586
                            {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                                let v1618 = constructor_x64_movsx(ctx, &ExtMode::LQ, v1605);
                                let v1619 = constructor_output_gpr(ctx, v1618);
                                // Rule at src/isa/x64/lower.isle line 2895.
                                return Some(v1619);
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v456 = C::use_sse41(ctx);
                            if v456 == true {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1629 = &constructor_amode_to_xmm_mem(ctx, v1601);
                                let v1640 = constructor_x64_pmovzxbw(ctx, v1629);
                                let v1641 = constructor_output_xmm(ctx, v1640);
                                // Rule at src/isa/x64/lower.isle line 2927.
                                return Some(v1641);
                            }
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                            let v1650 = constructor_x64_movq_to_xmm(ctx, v1605);
                            let v1653 = constructor_lower_uwiden_low(ctx, I16X8, v1650);
                            let v1654 = constructor_output_xmm(ctx, v1653);
                            // Rule at src/isa/x64/lower.isle line 2945.
                            return Some(v1654);
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v456 = C::use_sse41(ctx);
                            if v456 == true {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1629 = &constructor_amode_to_xmm_mem(ctx, v1601);
                                let v1638 = constructor_x64_pmovsxbw(ctx, v1629);
                                let v1639 = constructor_output_xmm(ctx, v1638);
                                // Rule at src/isa/x64/lower.isle line 2924.
                                return Some(v1639);
                            }
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                            let v1650 = constructor_x64_movq_to_xmm(ctx, v1605);
                            let v1651 = constructor_lower_swiden_low(ctx, I16X8, v1650);
                            let v1652 = constructor_output_xmm(ctx, v1651);
                            // Rule at src/isa/x64/lower.isle line 2943.
                            return Some(v1652);
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v456 = C::use_sse41(ctx);
                            if v456 == true {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1629 = &constructor_amode_to_xmm_mem(ctx, v1601);
                                let v1644 = constructor_x64_pmovzxwd(ctx, v1629);
                                let v1645 = constructor_output_xmm(ctx, v1644);
                                // Rule at src/isa/x64/lower.isle line 2933.
                                return Some(v1645);
                            }
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                            let v1650 = constructor_x64_movq_to_xmm(ctx, v1605);
                            let v1657 = constructor_lower_uwiden_low(ctx, I32X4, v1650);
                            let v1658 = constructor_output_xmm(ctx, v1657);
                            // Rule at src/isa/x64/lower.isle line 2949.
                            return Some(v1658);
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v456 = C::use_sse41(ctx);
                            if v456 == true {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1629 = &constructor_amode_to_xmm_mem(ctx, v1601);
                                let v1642 = constructor_x64_pmovsxwd(ctx, v1629);
                                let v1643 = constructor_output_xmm(ctx, v1642);
                                // Rule at src/isa/x64/lower.isle line 2930.
                                return Some(v1643);
                            }
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                            let v1650 = constructor_x64_movq_to_xmm(ctx, v1605);
                            let v1655 = constructor_lower_swiden_low(ctx, I32X4, v1650);
                            let v1656 = constructor_output_xmm(ctx, v1655);
                            // Rule at src/isa/x64/lower.isle line 2947.
                            return Some(v1656);
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v456 = C::use_sse41(ctx);
                            if v456 == true {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1629 = &constructor_amode_to_xmm_mem(ctx, v1601);
                                let v1648 = constructor_x64_pmovzxdq(ctx, v1629);
                                let v1649 = constructor_output_xmm(ctx, v1648);
                                // Rule at src/isa/x64/lower.isle line 2939.
                                return Some(v1649);
                            }
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                            let v1650 = constructor_x64_movq_to_xmm(ctx, v1605);
                            let v1661 = constructor_lower_uwiden_low(ctx, I64X2, v1650);
                            let v1662 = constructor_output_xmm(ctx, v1661);
                            // Rule at src/isa/x64/lower.isle line 2953.
                            return Some(v1662);
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v456 = C::use_sse41(ctx);
                            if v456 == true {
                                let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                                let v1629 = &constructor_amode_to_xmm_mem(ctx, v1601);
                                let v1646 = constructor_x64_pmovsxdq(ctx, v1629);
                                let v1647 = constructor_output_xmm(ctx, v1646);
                                // Rule at src/isa/x64/lower.isle line 2936.
                                return Some(v1647);
                            }
                            let v1601 = &constructor_to_amode(ctx, v1590, v1589, v1591);
                            let v1605 = &constructor_amode_to_gpr_mem(ctx, v1601);
                            let v1650 = constructor_x64_movq_to_xmm(ctx, v1605);
                            let v1659 = constructor_lower_swiden_low(ctx, I64X2, v1650);
                            let v1660 = constructor_output_xmm(ctx, v1659);
                            // Rule at src/isa/x64/lower.isle line 2951.
                            return Some(v1660);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1810,
            arg: v1811,
            flags: v1812,
        } => {
            match v1810 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1585 = &C::type_register_class(ctx, v3);
                        if let Some(v1586) = v1585 {
                            match v1586 {
                                &RegisterClass::Gpr {
                                    single_register: v1587,
                                } => {
                                    let v2258 = C::value_type(ctx, v1811);
                                    let v2269 = &C::type_register_class(ctx, v2258);
                                    if let Some(v2270) = v2269 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v2271,
                                        } = v2270
                                        {
                                            let v2273 = constructor_is_ref_type(ctx, v2258);
                                            match v2273 {
                                                true => {
                                                    let v2274 = constructor_is_ref_type(ctx, v3);
                                                    if v2274 == false {
                                                        let v2262 =
                                                            constructor_put_in_gpr(ctx, v1811);
                                                        let v2275 =
                                                            constructor_copy_gpr(ctx, v3, v2262);
                                                        let v2276 =
                                                            constructor_output_gpr(ctx, v2275);
                                                        // Rule at src/isa/x64/lower.isle line 4002.
                                                        return Some(v2276);
                                                    }
                                                }
                                                false => {
                                                    let v2274 = constructor_is_ref_type(ctx, v3);
                                                    if v2274 == true {
                                                        let v2262 =
                                                            constructor_put_in_gpr(ctx, v1811);
                                                        let v2275 =
                                                            constructor_copy_gpr(ctx, v3, v2262);
                                                        let v2276 =
                                                            constructor_output_gpr(ctx, v2275);
                                                        // Rule at src/isa/x64/lower.isle line 4007.
                                                        return Some(v2276);
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v2272 = constructor_output_value(ctx, v1811);
                                            // Rule at src/isa/x64/lower.isle line 3995.
                                            return Some(v2272);
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    let v2258 = C::value_type(ctx, v1811);
                                    let v2269 = &C::type_register_class(ctx, v2258);
                                    if let Some(v2270) = v2269 {
                                        if let &RegisterClass::Xmm = v2270 {
                                            let v2272 = constructor_output_value(ctx, v1811);
                                            // Rule at src/isa/x64/lower.isle line 4014.
                                            return Some(v2272);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I32 => {
                                let v2258 = C::value_type(ctx, v1811);
                                if v2258 == F32 {
                                    let v2259 = constructor_put_in_xmm(ctx, v1811);
                                    let v2260 = constructor_bitcast_xmm_to_gpr(ctx, F32, v2259);
                                    let v2261 = constructor_output_gpr(ctx, v2260);
                                    // Rule at src/isa/x64/lower.isle line 3982.
                                    return Some(v2261);
                                }
                            }
                            I64 => {
                                let v2258 = C::value_type(ctx, v1811);
                                if v2258 == F64 {
                                    let v2259 = constructor_put_in_xmm(ctx, v1811);
                                    let v2265 = constructor_bitcast_xmm_to_gpr(ctx, F64, v2259);
                                    let v2266 = constructor_output_gpr(ctx, v2265);
                                    // Rule at src/isa/x64/lower.isle line 3988.
                                    return Some(v2266);
                                }
                            }
                            F32 => {
                                let v2258 = C::value_type(ctx, v1811);
                                if v2258 == I32 {
                                    let v2262 = constructor_put_in_gpr(ctx, v1811);
                                    let v2263 = constructor_bitcast_gpr_to_xmm(ctx, I32, v2262);
                                    let v2264 = constructor_output_xmm(ctx, v2263);
                                    // Rule at src/isa/x64/lower.isle line 3985.
                                    return Some(v2264);
                                }
                            }
                            F64 => {
                                let v2258 = C::value_type(ctx, v1811);
                                if v2258 == I64 {
                                    let v2262 = constructor_put_in_gpr(ctx, v1811);
                                    let v2267 = constructor_bitcast_gpr_to_xmm(ctx, I64, v2262);
                                    let v2268 = constructor_output_xmm(ctx, v2267);
                                    // Rule at src/isa/x64/lower.isle line 3991.
                                    return Some(v2268);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v48 = C::zero_offset(ctx);
                            let v1813 = &constructor_to_amode(ctx, v1812, v1811, v48);
                            let v1814 = constructor_x64_mov(ctx, v1813);
                            let v1815 = constructor_output_reg(ctx, v1814);
                            // Rule at src/isa/x64/lower.isle line 3235.
                            return Some(v1815);
                        }
                        let v1358 = C::fits_in_32(ctx, v3);
                        if let Some(v1359) = v1358 {
                            let v1816 = C::ty_int(ctx, v3);
                            if let Some(v1817) = v1816 {
                                let v1592 = C::ty_bits_u16(ctx, v1359);
                                let v1594 = &C::ext_mode(ctx, v1592, 0x40);
                                let v1818 = C::zero_offset(ctx);
                                let v1819 = &constructor_to_amode(ctx, v1812, v1811, v1818);
                                let v1820 = &constructor_amode_to_gpr_mem(ctx, v1819);
                                let v1821 = constructor_x64_movzx(ctx, v1594, v1820);
                                let v1822 = constructor_output_gpr(ctx, v1821);
                                // Rule at src/isa/x64/lower.isle line 3237.
                                return Some(v1822);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v943,
            args: v944,
        } => {
            if let &Opcode::Return = v943 {
                let v945 = C::value_list_slice(ctx, v944);
                let v946 = constructor_lower_return(ctx, v945);
                // Rule at src/isa/x64/lower.isle line 1832.
                return Some(v946);
            }
        }
        &InstructionData::NullAry { opcode: ref v31 } => {
            match v31 {
                &Opcode::Debugtrap => {
                    let v1372 = &constructor_x64_hlt(ctx);
                    let v1373 = constructor_side_effect(ctx, v1372);
                    // Rule at src/isa/x64/lower.isle line 2518.
                    return Some(v1373);
                }
                &Opcode::GetPinnedReg => {
                    let v2381 = constructor_read_pinned_gpr(ctx);
                    let v2382 = constructor_output_gpr(ctx, v2381);
                    // Rule at src/isa/x64/lower.isle line 4257.
                    return Some(v2382);
                }
                &Opcode::GetFramePointer => {
                    let v1888 = constructor_x64_rbp(ctx);
                    let v1889 = constructor_output_reg(ctx, v1888);
                    // Rule at src/isa/x64/lower.isle line 3292.
                    return Some(v1889);
                }
                &Opcode::GetStackPointer => {
                    let v1890 = constructor_x64_rsp(ctx);
                    let v1891 = constructor_output_reg(ctx, v1890);
                    // Rule at src/isa/x64/lower.isle line 3295.
                    return Some(v1891);
                }
                &Opcode::GetReturnAddress => {
                    let v1888 = constructor_x64_rbp(ctx);
                    let v47 = C::mem_flags_trusted(ctx);
                    let v1892 = Amode::ImmReg {
                        simm32: 0x8,
                        base: v1888,
                        flags: v47,
                    };
                    let v1893 = &C::amode_to_synthetic_amode(ctx, &v1892);
                    let v1894 = constructor_x64_load(ctx, I64, v1893, &ExtKind::None);
                    let v1895 = constructor_output_reg(ctx, v1894);
                    // Rule at src/isa/x64/lower.isle line 3298.
                    return Some(v1895);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = constructor_imm(ctx, v3, 0x0);
                        let v33 = constructor_output_reg(ctx, v32);
                        // Rule at src/isa/x64/lower.isle line 37.
                        return Some(v33);
                    }
                }
                &Opcode::Nop => {
                    let v2737 = C::invalid_reg(ctx);
                    let v2738 = constructor_output_reg(ctx, v2737);
                    // Rule at src/isa/x64/lower.isle line 4809.
                    return Some(v2738);
                }
                &Opcode::Fence => {
                    let v1790 = &constructor_x64_mfence(ctx);
                    let v1791 = constructor_side_effect(ctx, v1790);
                    // Rule at src/isa/x64/lower.isle line 3213.
                    return Some(v1791);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v2396,
            args: ref v2397,
            imm: v2398,
        } => {
            if let &Opcode::Shuffle = v2396 {
                let v456 = C::use_sse41(ctx);
                if v456 == true {
                    let v2402 = C::pblendw_imm(ctx, v2398);
                    if let Some(v2403) = v2402 {
                        let v2399 = C::unpack_value_array_2(ctx, v2397);
                        let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                        let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                        let v2406 = constructor_x64_pblendw(ctx, v2404, v2405, v2403);
                        let v2407 = constructor_output_xmm(ctx, v2406);
                        // Rule at src/isa/x64/lower.isle line 4282.
                        return Some(v2407);
                    }
                }
                let v540 = C::use_ssse3(ctx);
                if v540 == true {
                    let v2408 = C::palignr_imm_from_immediate(ctx, v2398);
                    if let Some(v2409) = v2408 {
                        let v2399 = C::unpack_value_array_2(ctx, v2397);
                        let v2410 = constructor_put_in_xmm(ctx, v2399.1);
                        let v2411 = &C::put_in_xmm_mem(ctx, v2399.0);
                        let v2412 = constructor_x64_palignr(ctx, v2410, v2411, v2409);
                        let v2413 = constructor_output_xmm(ctx, v2412);
                        // Rule at src/isa/x64/lower.isle line 4293.
                        return Some(v2413);
                    }
                }
                let v2414 = C::pshuflw_lhs_imm(ctx, v2398);
                if let Some(v2415) = v2414 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2416 = &C::put_in_xmm_mem(ctx, v2399.0);
                    let v2417 = constructor_x64_pshuflw(ctx, v2416, v2415);
                    let v2418 = constructor_output_xmm(ctx, v2417);
                    // Rule at src/isa/x64/lower.isle line 4305.
                    return Some(v2418);
                }
                let v2419 = C::pshuflw_rhs_imm(ctx, v2398);
                if let Some(v2420) = v2419 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2421 = &C::put_in_xmm_mem(ctx, v2399.1);
                    let v2422 = constructor_x64_pshuflw(ctx, v2421, v2420);
                    let v2423 = constructor_output_xmm(ctx, v2422);
                    // Rule at src/isa/x64/lower.isle line 4307.
                    return Some(v2423);
                }
                let v2424 = C::pshufhw_lhs_imm(ctx, v2398);
                if let Some(v2425) = v2424 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2416 = &C::put_in_xmm_mem(ctx, v2399.0);
                    let v2426 = constructor_x64_pshufhw(ctx, v2416, v2425);
                    let v2427 = constructor_output_xmm(ctx, v2426);
                    // Rule at src/isa/x64/lower.isle line 4309.
                    return Some(v2427);
                }
                let v2428 = C::pshufhw_rhs_imm(ctx, v2398);
                if let Some(v2429) = v2428 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2421 = &C::put_in_xmm_mem(ctx, v2399.1);
                    let v2430 = constructor_x64_pshufhw(ctx, v2421, v2429);
                    let v2431 = constructor_output_xmm(ctx, v2430);
                    // Rule at src/isa/x64/lower.isle line 4311.
                    return Some(v2431);
                }
                let v2432 = C::pshufd_lhs_imm(ctx, v2398);
                if let Some(v2433) = v2432 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2416 = &C::put_in_xmm_mem(ctx, v2399.0);
                    let v2434 = constructor_x64_pshufd(ctx, v2416, v2433);
                    let v2435 = constructor_output_xmm(ctx, v2434);
                    // Rule at src/isa/x64/lower.isle line 4328.
                    return Some(v2435);
                }
                let v2436 = C::pshufd_rhs_imm(ctx, v2398);
                if let Some(v2437) = v2436 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2421 = &C::put_in_xmm_mem(ctx, v2399.1);
                    let v2438 = constructor_x64_pshufd(ctx, v2421, v2437);
                    let v2439 = constructor_output_xmm(ctx, v2438);
                    // Rule at src/isa/x64/lower.isle line 4330.
                    return Some(v2439);
                }
                let v2440 = C::u128_from_immediate(ctx, v2398);
                if let Some(v2441) = v2440 {
                    match v2441 {
                        0x0 => {
                            if v540 == true {
                                let v2399 = C::unpack_value_array_2(ctx, v2397);
                                let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                                let v545 = constructor_xmm_zero(ctx, I8X16);
                                let v2216 = &C::xmm_to_xmm_mem(ctx, v545);
                                let v2458 = constructor_x64_pshufb(ctx, v2404, v2216);
                                let v2459 = constructor_output_xmm(ctx, v2458);
                                // Rule at src/isa/x64/lower.isle line 4367.
                                return Some(v2459);
                            }
                        }
                        0x17071606150514041303120211011000 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2444 = constructor_x64_punpcklbw(ctx, v2404, v2405);
                            let v2445 = constructor_output_xmm(ctx, v2444);
                            // Rule at src/isa/x64/lower.isle line 4341.
                            return Some(v2445);
                        }
                        0x17160706151405041312030211100100 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2448 = constructor_x64_punpcklwd(ctx, v2404, v2405);
                            let v2449 = constructor_output_xmm(ctx, v2448);
                            // Rule at src/isa/x64/lower.isle line 4347.
                            return Some(v2449);
                        }
                        0x17161514070605041312111003020100 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2452 = constructor_x64_punpckldq(ctx, v2404, v2405);
                            let v2453 = constructor_output_xmm(ctx, v2452);
                            // Rule at src/isa/x64/lower.isle line 4353.
                            return Some(v2453);
                        }
                        0x17161514131211100706050403020100 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2456 = constructor_x64_punpcklqdq(ctx, v2404, v2405);
                            let v2457 = constructor_output_xmm(ctx, v2456);
                            // Rule at src/isa/x64/lower.isle line 4359.
                            return Some(v2457);
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2442 = constructor_x64_punpckhbw(ctx, v2404, v2405);
                            let v2443 = constructor_output_xmm(ctx, v2442);
                            // Rule at src/isa/x64/lower.isle line 4339.
                            return Some(v2443);
                        }
                        0x1F1E0F0E1D1C0D0C1B1A0B0A19180908 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2446 = constructor_x64_punpckhwd(ctx, v2404, v2405);
                            let v2447 = constructor_output_xmm(ctx, v2446);
                            // Rule at src/isa/x64/lower.isle line 4345.
                            return Some(v2447);
                        }
                        0x1F1E1D1C0F0E0D0C1B1A19180B0A0908 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2450 = constructor_x64_punpckhdq(ctx, v2404, v2405);
                            let v2451 = constructor_output_xmm(ctx, v2450);
                            // Rule at src/isa/x64/lower.isle line 4351.
                            return Some(v2451);
                        }
                        0x1F1E1D1C1B1A19180F0E0D0C0B0A0908 => {
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2454 = constructor_x64_punpckhqdq(ctx, v2404, v2405);
                            let v2455 = constructor_output_xmm(ctx, v2454);
                            // Rule at src/isa/x64/lower.isle line 4357.
                            return Some(v2455);
                        }
                        _ => {}
                    }
                }
                let v2460 = C::shufps_imm(ctx, v2398);
                if let Some(v2461) = v2460 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                    let v2405 = &C::put_in_xmm_mem(ctx, v2399.1);
                    let v2462 = constructor_x64_shufps(ctx, v2404, v2405, v2461);
                    let v2463 = constructor_output_xmm(ctx, v2462);
                    // Rule at src/isa/x64/lower.isle line 4381.
                    return Some(v2463);
                }
                let v2464 = C::shufps_rev_imm(ctx, v2398);
                if let Some(v2465) = v2464 {
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2410 = constructor_put_in_xmm(ctx, v2399.1);
                    let v2411 = &C::put_in_xmm_mem(ctx, v2399.0);
                    let v2466 = constructor_x64_shufps(ctx, v2410, v2411, v2465);
                    let v2467 = constructor_output_xmm(ctx, v2466);
                    // Rule at src/isa/x64/lower.isle line 4383.
                    return Some(v2467);
                }
                let v2468 = &C::vec_mask_from_immediate(ctx, v2398);
                if let Some(v2469) = v2468 {
                    if v540 == true {
                        let v2399 = C::unpack_value_array_2(ctx, v2397);
                        if v2399.0 == v2399.1 {
                            let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2470 = C::shuffle_0_31_mask(ctx, v2469);
                            let v2471 = &constructor_const_to_xmm_mem(ctx, v2470);
                            let v2472 = constructor_x64_pshufb(ctx, v2404, v2471);
                            let v2473 = constructor_output_xmm(ctx, v2472);
                            // Rule at src/isa/x64/lower.isle line 4396.
                            return Some(v2473);
                        }
                    }
                    let v332 = C::use_avx512vl(ctx);
                    if v332 == true {
                        let v2478 = C::use_avx512vbmi(ctx);
                        if v2478 == true {
                            let v2474 = C::perm_from_mask_with_zeros(ctx, v2469);
                            if let Some(v2475) = v2474 {
                                let v2479 = constructor_x64_xmm_load_const(ctx, I8X16, v2475.0);
                                let v2399 = C::unpack_value_array_2(ctx, v2397);
                                let v2480 = constructor_put_in_xmm(ctx, v2399.0);
                                let v2481 = &C::put_in_xmm_mem(ctx, v2399.1);
                                let v2482 = constructor_x64_vpermi2b(ctx, v2479, v2480, v2481);
                                let v2483 = &constructor_const_to_xmm_mem(ctx, v2475.1);
                                let v2484 = constructor_x64_andps(ctx, v2482, v2483);
                                let v2485 = constructor_output_xmm(ctx, v2484);
                                // Rule at src/isa/x64/lower.isle line 4403.
                                return Some(v2485);
                            }
                            let v2486 = C::perm_from_mask(ctx, v2469);
                            let v2487 = constructor_x64_xmm_load_const(ctx, I8X16, v2486);
                            let v2399 = C::unpack_value_array_2(ctx, v2397);
                            let v2488 = constructor_put_in_xmm(ctx, v2399.0);
                            let v2489 = &C::put_in_xmm_mem(ctx, v2399.1);
                            let v2490 = constructor_x64_vpermi2b(ctx, v2487, v2488, v2489);
                            let v2491 = constructor_output_xmm(ctx, v2490);
                            // Rule at src/isa/x64/lower.isle line 4410.
                            return Some(v2491);
                        }
                    }
                    let v2399 = C::unpack_value_array_2(ctx, v2397);
                    let v2404 = constructor_put_in_xmm(ctx, v2399.0);
                    let v2492 = C::shuffle_0_15_mask(ctx, v2469);
                    let v2493 = &constructor_const_to_reg_mem(ctx, v2492);
                    let v2494 = constructor_lower_pshufb(ctx, v2404, v2493);
                    let v2495 = constructor_put_in_xmm(ctx, v2399.1);
                    let v2496 = C::shuffle_16_31_mask(ctx, v2469);
                    let v2497 = &constructor_const_to_reg_mem(ctx, v2496);
                    let v2498 = constructor_lower_pshufb(ctx, v2495, v2497);
                    let v2499 = &C::xmm_to_xmm_mem(ctx, v2498);
                    let v2500 = constructor_x64_por(ctx, v2494, v2499);
                    let v2501 = constructor_output_xmm(ctx, v2500);
                    // Rule at src/isa/x64/lower.isle line 4418.
                    return Some(v2501);
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2306,
            stack_slot: v2307,
            offset: v2308,
        } => {
            if let &Opcode::StackAddr = v2306 {
                let v2309 = constructor_stack_addr_impl(ctx, v2307, v2308);
                let v2310 = constructor_output_gpr(ctx, v2309);
                // Rule at src/isa/x64/lower.isle line 4106.
                return Some(v2310);
            }
        }
        &InstructionData::Store {
            opcode: ref v1663,
            args: ref v1664,
            flags: v1665,
            offset: v1666,
        } => {
            match v1663 {
                &Opcode::Store => {
                    let v1667 = C::unpack_value_array_2(ctx, v1664);
                    let v1686 = C::def_inst(ctx, v1667.0);
                    if let Some(v1687) = v1686 {
                        let v1688 = C::first_result(ctx, v1687);
                        if let Some(v1689) = v1688 {
                            let v1693 = &C::inst_data(ctx, v1687);
                            match v1693 {
                                &InstructionData::Binary {
                                    opcode: ref v1743,
                                    args: ref v1744,
                                } => {
                                    match v1743 {
                                        &Opcode::Iadd => {
                                            let v1690 = C::value_type(ctx, v1689);
                                            let v1741 = C::ty_32_or_64(ctx, v1690);
                                            if let Some(v1742) = v1741 {
                                                let v1745 = C::unpack_value_array_2(ctx, v1744);
                                                let v1748 = &C::sinkable_load(ctx, v1745.0);
                                                if let Some(v1749) = v1748 {
                                                    let v1750 = C::def_inst(ctx, v1745.0);
                                                    if let Some(v1751) = v1750 {
                                                        let v1752 = &C::inst_data(ctx, v1751);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1753,
                                                            arg: v1754,
                                                            flags: v1755,
                                                            offset: v1756,
                                                        } = v1752
                                                        {
                                                            if let &Opcode::Load = v1753 {
                                                                if v1665 == v1755 {
                                                                    if v1666 == v1756 {
                                                                        if v1667.1 == v1754 {
                                                                            let v1757 = &constructor_sink_load_to_reg_mem_imm(ctx, v1749);
                                                                            let v1758 = &constructor_to_amode(ctx, v1755, v1754, v1756);
                                                                            let v1759 = constructor_put_in_gpr(ctx, v1745.1);
                                                                            let v1760 = &constructor_x64_add_mem(ctx, v1742, v1758, v1759);
                                                                            let v1761 = constructor_side_effect(ctx, v1760);
                                                                            // Rule at src/isa/x64/lower.isle line 3086.
                                                                            return Some(v1761);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1762 = &C::sinkable_load(ctx, v1745.1);
                                                if let Some(v1763) = v1762 {
                                                    let v1764 = C::def_inst(ctx, v1745.1);
                                                    if let Some(v1765) = v1764 {
                                                        let v1766 = &C::inst_data(ctx, v1765);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1767,
                                                            arg: v1768,
                                                            flags: v1769,
                                                            offset: v1770,
                                                        } = v1766
                                                        {
                                                            if let &Opcode::Load = v1767 {
                                                                if v1665 == v1769 {
                                                                    if v1666 == v1770 {
                                                                        if v1667.1 == v1768 {
                                                                            let v1771 = &constructor_sink_load_to_reg_mem_imm(ctx, v1763);
                                                                            let v1772 = &constructor_to_amode(ctx, v1769, v1768, v1770);
                                                                            let v1773 = constructor_put_in_gpr(ctx, v1745.0);
                                                                            let v1774 = &constructor_x64_add_mem(ctx, v1742, v1772, v1773);
                                                                            let v1775 = constructor_side_effect(ctx, v1774);
                                                                            // Rule at src/isa/x64/lower.isle line 3100.
                                                                            return Some(v1775);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v1690 = C::value_type(ctx, v1689);
                                            let v1741 = C::ty_32_or_64(ctx, v1690);
                                            if let Some(v1742) = v1741 {
                                                let v1745 = C::unpack_value_array_2(ctx, v1744);
                                                let v1748 = &C::sinkable_load(ctx, v1745.0);
                                                if let Some(v1749) = v1748 {
                                                    let v1750 = C::def_inst(ctx, v1745.0);
                                                    if let Some(v1751) = v1750 {
                                                        let v1752 = &C::inst_data(ctx, v1751);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1753,
                                                            arg: v1754,
                                                            flags: v1755,
                                                            offset: v1756,
                                                        } = v1752
                                                        {
                                                            if let &Opcode::Load = v1753 {
                                                                if v1665 == v1755 {
                                                                    if v1666 == v1756 {
                                                                        if v1667.1 == v1754 {
                                                                            let v1757 = &constructor_sink_load_to_reg_mem_imm(ctx, v1749);
                                                                            let v1758 = &constructor_to_amode(ctx, v1755, v1754, v1756);
                                                                            let v1759 = constructor_put_in_gpr(ctx, v1745.1);
                                                                            let v1776 = &constructor_x64_sub_mem(ctx, v1742, v1758, v1759);
                                                                            let v1777 = constructor_side_effect(ctx, v1776);
                                                                            // Rule at src/isa/x64/lower.isle line 3114.
                                                                            return Some(v1777);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v1690 = C::value_type(ctx, v1689);
                                            let v1741 = C::ty_32_or_64(ctx, v1690);
                                            if let Some(v1742) = v1741 {
                                                let v1745 = C::unpack_value_array_2(ctx, v1744);
                                                let v1748 = &C::sinkable_load(ctx, v1745.0);
                                                if let Some(v1749) = v1748 {
                                                    let v1750 = C::def_inst(ctx, v1745.0);
                                                    if let Some(v1751) = v1750 {
                                                        let v1752 = &C::inst_data(ctx, v1751);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1753,
                                                            arg: v1754,
                                                            flags: v1755,
                                                            offset: v1756,
                                                        } = v1752
                                                        {
                                                            if let &Opcode::Load = v1753 {
                                                                if v1665 == v1755 {
                                                                    if v1666 == v1756 {
                                                                        if v1667.1 == v1754 {
                                                                            let v1757 = &constructor_sink_load_to_reg_mem_imm(ctx, v1749);
                                                                            let v1758 = &constructor_to_amode(ctx, v1755, v1754, v1756);
                                                                            let v1759 = constructor_put_in_gpr(ctx, v1745.1);
                                                                            let v1778 = &constructor_x64_and_mem(ctx, v1742, v1758, v1759);
                                                                            let v1779 = constructor_side_effect(ctx, v1778);
                                                                            // Rule at src/isa/x64/lower.isle line 3128.
                                                                            return Some(v1779);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1762 = &C::sinkable_load(ctx, v1745.1);
                                                if let Some(v1763) = v1762 {
                                                    let v1764 = C::def_inst(ctx, v1745.1);
                                                    if let Some(v1765) = v1764 {
                                                        let v1766 = &C::inst_data(ctx, v1765);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1767,
                                                            arg: v1768,
                                                            flags: v1769,
                                                            offset: v1770,
                                                        } = v1766
                                                        {
                                                            if let &Opcode::Load = v1767 {
                                                                if v1665 == v1769 {
                                                                    if v1666 == v1770 {
                                                                        if v1667.1 == v1768 {
                                                                            let v1771 = &constructor_sink_load_to_reg_mem_imm(ctx, v1763);
                                                                            let v1772 = &constructor_to_amode(ctx, v1769, v1768, v1770);
                                                                            let v1773 = constructor_put_in_gpr(ctx, v1745.0);
                                                                            let v1780 = &constructor_x64_and_mem(ctx, v1742, v1772, v1773);
                                                                            let v1781 = constructor_side_effect(ctx, v1780);
                                                                            // Rule at src/isa/x64/lower.isle line 3142.
                                                                            return Some(v1781);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v1690 = C::value_type(ctx, v1689);
                                            let v1741 = C::ty_32_or_64(ctx, v1690);
                                            if let Some(v1742) = v1741 {
                                                let v1745 = C::unpack_value_array_2(ctx, v1744);
                                                let v1748 = &C::sinkable_load(ctx, v1745.0);
                                                if let Some(v1749) = v1748 {
                                                    let v1750 = C::def_inst(ctx, v1745.0);
                                                    if let Some(v1751) = v1750 {
                                                        let v1752 = &C::inst_data(ctx, v1751);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1753,
                                                            arg: v1754,
                                                            flags: v1755,
                                                            offset: v1756,
                                                        } = v1752
                                                        {
                                                            if let &Opcode::Load = v1753 {
                                                                if v1665 == v1755 {
                                                                    if v1666 == v1756 {
                                                                        if v1667.1 == v1754 {
                                                                            let v1757 = &constructor_sink_load_to_reg_mem_imm(ctx, v1749);
                                                                            let v1758 = &constructor_to_amode(ctx, v1755, v1754, v1756);
                                                                            let v1759 = constructor_put_in_gpr(ctx, v1745.1);
                                                                            let v1782 = &constructor_x64_or_mem(ctx, v1742, v1758, v1759);
                                                                            let v1783 = constructor_side_effect(ctx, v1782);
                                                                            // Rule at src/isa/x64/lower.isle line 3156.
                                                                            return Some(v1783);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1762 = &C::sinkable_load(ctx, v1745.1);
                                                if let Some(v1763) = v1762 {
                                                    let v1764 = C::def_inst(ctx, v1745.1);
                                                    if let Some(v1765) = v1764 {
                                                        let v1766 = &C::inst_data(ctx, v1765);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1767,
                                                            arg: v1768,
                                                            flags: v1769,
                                                            offset: v1770,
                                                        } = v1766
                                                        {
                                                            if let &Opcode::Load = v1767 {
                                                                if v1665 == v1769 {
                                                                    if v1666 == v1770 {
                                                                        if v1667.1 == v1768 {
                                                                            let v1771 = &constructor_sink_load_to_reg_mem_imm(ctx, v1763);
                                                                            let v1772 = &constructor_to_amode(ctx, v1769, v1768, v1770);
                                                                            let v1773 = constructor_put_in_gpr(ctx, v1745.0);
                                                                            let v1784 = &constructor_x64_or_mem(ctx, v1742, v1772, v1773);
                                                                            let v1785 = constructor_side_effect(ctx, v1784);
                                                                            // Rule at src/isa/x64/lower.isle line 3170.
                                                                            return Some(v1785);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v1690 = C::value_type(ctx, v1689);
                                            let v1741 = C::ty_32_or_64(ctx, v1690);
                                            if let Some(v1742) = v1741 {
                                                let v1745 = C::unpack_value_array_2(ctx, v1744);
                                                let v1748 = &C::sinkable_load(ctx, v1745.0);
                                                if let Some(v1749) = v1748 {
                                                    let v1750 = C::def_inst(ctx, v1745.0);
                                                    if let Some(v1751) = v1750 {
                                                        let v1752 = &C::inst_data(ctx, v1751);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1753,
                                                            arg: v1754,
                                                            flags: v1755,
                                                            offset: v1756,
                                                        } = v1752
                                                        {
                                                            if let &Opcode::Load = v1753 {
                                                                if v1665 == v1755 {
                                                                    if v1666 == v1756 {
                                                                        if v1667.1 == v1754 {
                                                                            let v1757 = &constructor_sink_load_to_reg_mem_imm(ctx, v1749);
                                                                            let v1758 = &constructor_to_amode(ctx, v1755, v1754, v1756);
                                                                            let v1759 = constructor_put_in_gpr(ctx, v1745.1);
                                                                            let v1786 = &constructor_x64_xor_mem(ctx, v1742, v1758, v1759);
                                                                            let v1787 = constructor_side_effect(ctx, v1786);
                                                                            // Rule at src/isa/x64/lower.isle line 3184.
                                                                            return Some(v1787);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1762 = &C::sinkable_load(ctx, v1745.1);
                                                if let Some(v1763) = v1762 {
                                                    let v1764 = C::def_inst(ctx, v1745.1);
                                                    if let Some(v1765) = v1764 {
                                                        let v1766 = &C::inst_data(ctx, v1765);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1767,
                                                            arg: v1768,
                                                            flags: v1769,
                                                            offset: v1770,
                                                        } = v1766
                                                        {
                                                            if let &Opcode::Load = v1767 {
                                                                if v1665 == v1769 {
                                                                    if v1666 == v1770 {
                                                                        if v1667.1 == v1768 {
                                                                            let v1771 = &constructor_sink_load_to_reg_mem_imm(ctx, v1763);
                                                                            let v1772 = &constructor_to_amode(ctx, v1769, v1768, v1770);
                                                                            let v1773 = constructor_put_in_gpr(ctx, v1745.0);
                                                                            let v1788 = &constructor_x64_xor_mem(ctx, v1742, v1772, v1773);
                                                                            let v1789 = constructor_side_effect(ctx, v1788);
                                                                            // Rule at src/isa/x64/lower.isle line 3198.
                                                                            return Some(v1789);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v1724,
                                    arg: v1725,
                                    imm: v1726,
                                } => {
                                    if let &Opcode::Extractlane = v1724 {
                                        let v1690 = C::value_type(ctx, v1689);
                                        match v1690 {
                                            I8 => {
                                                let v456 = C::use_sse41(ctx);
                                                if v456 == true {
                                                    let v1674 = &constructor_to_amode(
                                                        ctx, v1665, v1667.1, v1666,
                                                    );
                                                    let v1675 =
                                                        &C::amode_to_synthetic_amode(ctx, v1674);
                                                    let v1728 = constructor_put_in_xmm(ctx, v1725);
                                                    let v1727 = C::u8_from_uimm8(ctx, v1726);
                                                    let v1733 = &constructor_x64_pextrb_store(
                                                        ctx, v1675, v1728, v1727,
                                                    );
                                                    let v1734 = constructor_side_effect(ctx, v1733);
                                                    // Rule at src/isa/x64/lower.isle line 3054.
                                                    return Some(v1734);
                                                }
                                            }
                                            I16 => {
                                                let v456 = C::use_sse41(ctx);
                                                if v456 == true {
                                                    let v1674 = &constructor_to_amode(
                                                        ctx, v1665, v1667.1, v1666,
                                                    );
                                                    let v1675 =
                                                        &C::amode_to_synthetic_amode(ctx, v1674);
                                                    let v1728 = constructor_put_in_xmm(ctx, v1725);
                                                    let v1727 = C::u8_from_uimm8(ctx, v1726);
                                                    let v1735 = &constructor_x64_pextrw_store(
                                                        ctx, v1675, v1728, v1727,
                                                    );
                                                    let v1736 = constructor_side_effect(ctx, v1735);
                                                    // Rule at src/isa/x64/lower.isle line 3061.
                                                    return Some(v1736);
                                                }
                                            }
                                            I32 => {
                                                let v456 = C::use_sse41(ctx);
                                                if v456 == true {
                                                    let v1674 = &constructor_to_amode(
                                                        ctx, v1665, v1667.1, v1666,
                                                    );
                                                    let v1675 =
                                                        &C::amode_to_synthetic_amode(ctx, v1674);
                                                    let v1728 = constructor_put_in_xmm(ctx, v1725);
                                                    let v1727 = C::u8_from_uimm8(ctx, v1726);
                                                    let v1737 = &constructor_x64_pextrd_store(
                                                        ctx, v1675, v1728, v1727,
                                                    );
                                                    let v1738 = constructor_side_effect(ctx, v1737);
                                                    // Rule at src/isa/x64/lower.isle line 3068.
                                                    return Some(v1738);
                                                }
                                            }
                                            I64 => {
                                                let v456 = C::use_sse41(ctx);
                                                if v456 == true {
                                                    let v1674 = &constructor_to_amode(
                                                        ctx, v1665, v1667.1, v1666,
                                                    );
                                                    let v1675 =
                                                        &C::amode_to_synthetic_amode(ctx, v1674);
                                                    let v1728 = constructor_put_in_xmm(ctx, v1725);
                                                    let v1727 = C::u8_from_uimm8(ctx, v1726);
                                                    let v1739 = &constructor_x64_pextrq_store(
                                                        ctx, v1675, v1728, v1727,
                                                    );
                                                    let v1740 = constructor_side_effect(ctx, v1739);
                                                    // Rule at src/isa/x64/lower.isle line 3075.
                                                    return Some(v1740);
                                                }
                                            }
                                            F32 => {
                                                let v1727 = C::u8_from_uimm8(ctx, v1726);
                                                if v1727 == 0x0 {
                                                    let v1674 = &constructor_to_amode(
                                                        ctx, v1665, v1667.1, v1666,
                                                    );
                                                    let v1675 =
                                                        &C::amode_to_synthetic_amode(ctx, v1674);
                                                    let v1728 = constructor_put_in_xmm(ctx, v1725);
                                                    let v1729 = &constructor_x64_movss_store(
                                                        ctx, v1675, v1728,
                                                    );
                                                    let v1730 = constructor_side_effect(ctx, v1729);
                                                    // Rule at src/isa/x64/lower.isle line 3042.
                                                    return Some(v1730);
                                                }
                                            }
                                            F64 => {
                                                let v1727 = C::u8_from_uimm8(ctx, v1726);
                                                if v1727 == 0x0 {
                                                    let v1674 = &constructor_to_amode(
                                                        ctx, v1665, v1667.1, v1666,
                                                    );
                                                    let v1675 =
                                                        &C::amode_to_synthetic_amode(ctx, v1674);
                                                    let v1728 = constructor_put_in_xmm(ctx, v1725);
                                                    let v1731 = &constructor_x64_movsd_store(
                                                        ctx, v1675, v1728,
                                                    );
                                                    let v1732 = constructor_side_effect(ctx, v1731);
                                                    // Rule at src/isa/x64/lower.isle line 3048.
                                                    return Some(v1732);
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1694,
                                    imm: v1695,
                                } => {
                                    if let &Opcode::Iconst = v1694 {
                                        let v1690 = C::value_type(ctx, v1689);
                                        let v1691 = C::fits_in_64(ctx, v1690);
                                        if let Some(v1692) = v1691 {
                                            let v1696 = C::simm32(ctx, v1695);
                                            if let Some(v1697) = v1696 {
                                                let v1674 = &constructor_to_amode(
                                                    ctx, v1665, v1667.1, v1666,
                                                );
                                                let v1675 =
                                                    &C::amode_to_synthetic_amode(ctx, v1674);
                                                let v1698 = &constructor_x64_movimm_m(
                                                    ctx, v1692, v1675, v1697,
                                                );
                                                let v1699 = constructor_side_effect(ctx, v1698);
                                                // Rule at src/isa/x64/lower.isle line 2978.
                                                return Some(v1699);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v1670 = C::value_type(ctx, v1667.0);
                    match v1670 {
                        I128 => {
                            let v1713 = C::put_in_regs(ctx, v1667.0);
                            let v1714 = constructor_value_regs_get_gpr(ctx, v1713, 0x0);
                            let v1715 = constructor_value_regs_get_gpr(ctx, v1713, 0x1);
                            let v1716 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                            let v1717 = &C::amode_offset(ctx, v1716, 0x8);
                            let v1718 = &C::amode_to_synthetic_amode(ctx, v1716);
                            let v1719 = &constructor_x64_movrm(ctx, I64, v1718, v1714);
                            let v1720 = &C::amode_to_synthetic_amode(ctx, v1717);
                            let v1721 = &constructor_x64_movrm(ctx, I64, v1720, v1715);
                            let v1722 = &constructor_side_effect_concat(ctx, v1719, v1721);
                            let v1723 = constructor_side_effect(ctx, v1722);
                            // Rule at src/isa/x64/lower.isle line 3023.
                            return Some(v1723);
                        }
                        F32 => {
                            let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                            let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                            let v1700 = constructor_put_in_xmm(ctx, v1667.0);
                            let v1701 = &constructor_x64_movss_store(ctx, v1675, v1700);
                            let v1702 = constructor_side_effect(ctx, v1701);
                            // Rule at src/isa/x64/lower.isle line 2983.
                            return Some(v1702);
                        }
                        F64 => {
                            let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                            let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                            let v1700 = constructor_put_in_xmm(ctx, v1667.0);
                            let v1703 = &constructor_x64_movsd_store(ctx, v1675, v1700);
                            let v1704 = constructor_side_effect(ctx, v1703);
                            // Rule at src/isa/x64/lower.isle line 2991.
                            return Some(v1704);
                        }
                        F32X4 => {
                            let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                            let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                            let v1700 = constructor_put_in_xmm(ctx, v1667.0);
                            let v1705 = &constructor_x64_movups_store(ctx, v1675, v1700);
                            let v1706 = constructor_side_effect(ctx, v1705);
                            // Rule at src/isa/x64/lower.isle line 2999.
                            return Some(v1706);
                        }
                        F64X2 => {
                            let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                            let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                            let v1700 = constructor_put_in_xmm(ctx, v1667.0);
                            let v1707 = &constructor_x64_movupd_store(ctx, v1675, v1700);
                            let v1708 = constructor_side_effect(ctx, v1707);
                            // Rule at src/isa/x64/lower.isle line 3007.
                            return Some(v1708);
                        }
                        _ => {}
                    }
                    let v1709 = C::ty_vec128_int(ctx, v1670);
                    if let Some(v1710) = v1709 {
                        let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                        let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                        let v1700 = constructor_put_in_xmm(ctx, v1667.0);
                        let v1711 = &constructor_x64_movdqu_store(ctx, v1675, v1700);
                        let v1712 = constructor_side_effect(ctx, v1711);
                        // Rule at src/isa/x64/lower.isle line 3015.
                        return Some(v1712);
                    }
                    let v1671 = &C::type_register_class(ctx, v1670);
                    if let Some(v1672) = v1671 {
                        if let &RegisterClass::Gpr {
                            single_register: v1673,
                        } = v1672
                        {
                            let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                            let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                            let v1676 = constructor_put_in_gpr(ctx, v1667.0);
                            let v1677 = &constructor_x64_movrm(ctx, v1670, v1675, v1676);
                            let v1678 = constructor_side_effect(ctx, v1677);
                            // Rule at src/isa/x64/lower.isle line 2959.
                            return Some(v1678);
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let v1667 = C::unpack_value_array_2(ctx, v1664);
                    let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                    let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                    let v1676 = constructor_put_in_gpr(ctx, v1667.0);
                    let v1680 = &constructor_x64_movrm(ctx, I8, v1675, v1676);
                    let v1681 = constructor_side_effect(ctx, v1680);
                    // Rule at src/isa/x64/lower.isle line 2967.
                    return Some(v1681);
                }
                &Opcode::Istore16 => {
                    let v1667 = C::unpack_value_array_2(ctx, v1664);
                    let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                    let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                    let v1676 = constructor_put_in_gpr(ctx, v1667.0);
                    let v1682 = &constructor_x64_movrm(ctx, I16, v1675, v1676);
                    let v1683 = constructor_side_effect(ctx, v1682);
                    // Rule at src/isa/x64/lower.isle line 2970.
                    return Some(v1683);
                }
                &Opcode::Istore32 => {
                    let v1667 = C::unpack_value_array_2(ctx, v1664);
                    let v1674 = &constructor_to_amode(ctx, v1665, v1667.1, v1666);
                    let v1675 = &C::amode_to_synthetic_amode(ctx, v1674);
                    let v1676 = constructor_put_in_gpr(ctx, v1667.0);
                    let v1684 = &constructor_x64_movrm(ctx, I32, v1675, v1676);
                    let v1685 = constructor_side_effect(ctx, v1684);
                    // Rule at src/isa/x64/lower.isle line 2973.
                    return Some(v1685);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1823,
            args: ref v1824,
            flags: v1825,
        } => {
            if let &Opcode::AtomicStore = v1823 {
                let v1826 = C::unpack_value_array_2(ctx, v1824);
                let v1829 = C::value_type(ctx, v1826.0);
                let v1830 = C::fits_in_64(ctx, v1829);
                if let Some(v1831) = v1830 {
                    let v1832 = C::ty_int(ctx, v1829);
                    if let Some(v1833) = v1832 {
                        let v48 = C::zero_offset(ctx);
                        let v1834 = &constructor_to_amode(ctx, v1825, v1826.1, v48);
                        let v1835 = &C::amode_to_synthetic_amode(ctx, v1834);
                        let v1836 = constructor_put_in_gpr(ctx, v1826.0);
                        let v1837 = &constructor_x64_movrm(ctx, v1831, v1835, v1836);
                        let v1838 = &constructor_x64_mfence(ctx);
                        let v1839 = &constructor_side_effect_concat(ctx, v1837, v1838);
                        let v1840 = constructor_side_effect(ctx, v1839);
                        // Rule at src/isa/x64/lower.isle line 3245.
                        return Some(v1840);
                    }
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v667,
            args: ref v668,
        } => {
            match v667 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v669 = C::unpack_value_array_3(ctx, v668);
                        let v1133 = C::maybe_uextend(ctx, v669.0);
                        if let Some(v1134) = v1133 {
                            let v1135 = C::def_inst(ctx, v1134);
                            if let Some(v1136) = v1135 {
                                let v1137 = &C::inst_data(ctx, v1136);
                                match v1137 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1138,
                                        args: ref v1139,
                                        cond: ref v1140,
                                    } => {
                                        if let &Opcode::Fcmp = v1138 {
                                            match v1140 {
                                                &FloatCC::Equal => {
                                                    let v1141 = C::unpack_value_array_2(ctx, v1139);
                                                    let v1147 = &constructor_emit_fcmp(
                                                        ctx,
                                                        &FloatCC::NotEqual,
                                                        v1141.0,
                                                        v1141.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v1148 = constructor_lower_select_fcmp(
                                                        ctx, v3, v1147, v669.2, v669.1,
                                                    );
                                                    // Rule at src/isa/x64/lower.isle line 2083.
                                                    return Some(v1148);
                                                }
                                                &FloatCC::LessThan => {
                                                    let v3 = C::value_type(ctx, v2);
                                                    match v3 {
                                                        F32 => {
                                                            let v1141 =
                                                                C::unpack_value_array_2(ctx, v1139);
                                                            if v669.1 == v1141.1 {
                                                                if v669.2 == v1141.0 {
                                                                    let v1181 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1141.1,
                                                                        );
                                                                    let v1182 = &C::put_in_xmm_mem(
                                                                        ctx, v1141.0,
                                                                    );
                                                                    let v1183 =
                                                                        constructor_x64_maxss(
                                                                            ctx, v1181, v1182,
                                                                        );
                                                                    let v1184 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1183,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2125.
                                                                    return Some(v1184);
                                                                }
                                                            }
                                                            if v669.1 == v1141.0 {
                                                                if v669.2 == v1141.1 {
                                                                    let v1175 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1141.0,
                                                                        );
                                                                    let v1176 = &C::put_in_xmm_mem(
                                                                        ctx, v1141.1,
                                                                    );
                                                                    let v1177 =
                                                                        constructor_x64_minss(
                                                                            ctx, v1175, v1176,
                                                                        );
                                                                    let v1178 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1177,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2121.
                                                                    return Some(v1178);
                                                                }
                                                            }
                                                        }
                                                        F64 => {
                                                            let v1141 =
                                                                C::unpack_value_array_2(ctx, v1139);
                                                            if v669.1 == v1141.1 {
                                                                if v669.2 == v1141.0 {
                                                                    let v1181 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1141.1,
                                                                        );
                                                                    let v1182 = &C::put_in_xmm_mem(
                                                                        ctx, v1141.0,
                                                                    );
                                                                    let v1185 =
                                                                        constructor_x64_maxsd(
                                                                            ctx, v1181, v1182,
                                                                        );
                                                                    let v1186 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1185,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2127.
                                                                    return Some(v1186);
                                                                }
                                                            }
                                                            if v669.1 == v1141.0 {
                                                                if v669.2 == v1141.1 {
                                                                    let v1175 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1141.0,
                                                                        );
                                                                    let v1176 = &C::put_in_xmm_mem(
                                                                        ctx, v1141.1,
                                                                    );
                                                                    let v1179 =
                                                                        constructor_x64_minsd(
                                                                            ctx, v1175, v1176,
                                                                        );
                                                                    let v1180 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1179,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2123.
                                                                    return Some(v1180);
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v1141 = C::unpack_value_array_2(ctx, v1139);
                                            let v1144 = &constructor_emit_fcmp(
                                                ctx, v1140, v1141.0, v1141.1,
                                            );
                                            let v3 = C::value_type(ctx, v2);
                                            let v1145 = constructor_lower_select_fcmp(
                                                ctx, v3, v1144, v669.1, v669.2,
                                            );
                                            // Rule at src/isa/x64/lower.isle line 2081.
                                            return Some(v1145);
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1149,
                                        args: ref v1150,
                                        cond: ref v1151,
                                    } => {
                                        if let &Opcode::Icmp = v1149 {
                                            let v1152 = C::unpack_value_array_2(ctx, v1150);
                                            let v1155 = C::value_type(ctx, v1152.0);
                                            let v1156 = C::fits_in_64(ctx, v1155);
                                            if let Some(v1157) = v1156 {
                                                let v1158 = &constructor_emit_cmp(
                                                    ctx, v1151, v1152.0, v1152.1,
                                                );
                                                let v3 = C::value_type(ctx, v2);
                                                let v1159 = constructor_lower_select_icmp(
                                                    ctx, v3, v1158, v669.1, v669.2,
                                                );
                                                // Rule at src/isa/x64/lower.isle line 2097.
                                                return Some(v1159);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1160 = C::value_type(ctx, v669.0);
                        let v1161 = C::fits_in_64(ctx, v1160);
                        if let Some(v1162) = v1161 {
                            let v1163 = &C::raw_operand_size_of_type(ctx, v1162);
                            let v1164 = constructor_put_in_gpr(ctx, v669.0);
                            let v1165 = &C::gpr_to_gpr_mem_imm(ctx, v1164);
                            let v1166 = &constructor_x64_test(ctx, v1163, v1164, v1165);
                            let v3 = C::value_type(ctx, v2);
                            let v1168 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v669.1, v669.2);
                            let v1169 = constructor_with_flags(ctx, v1166, v1168);
                            let v1170 = C::output(ctx, v1169);
                            // Rule at src/isa/x64/lower.isle line 2103.
                            return Some(v1170);
                        }
                        if v1160 == I128 {
                            let v716 = C::put_in_regs(ctx, v669.0);
                            let v1172 = &constructor_cmp_zero_i128(ctx, &CC::Z, v716);
                            let v1173 = constructor_select_icmp(ctx, v1172, v669.1, v669.2);
                            let v1174 = C::output(ctx, v1173);
                            // Rule at src/isa/x64/lower.isle line 2110.
                            return Some(v1174);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v669 = C::unpack_value_array_3(ctx, v668);
                    let v689 = C::def_inst(ctx, v669.0);
                    if let Some(v690) = v689 {
                        let v691 = &C::inst_data(ctx, v690);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1896,
                            args: ref v1897,
                            cond: ref v1898,
                        } = v691
                        {
                            if let &Opcode::Icmp = v1896 {
                                let v1899 = C::unpack_value_array_2(ctx, v1897);
                                let v1902 = &constructor_emit_cmp(ctx, v1898, v1899.0, v1899.1);
                                let v1903 = constructor_select_icmp(ctx, v1902, v669.1, v669.2);
                                let v1904 = C::output(ctx, v1903);
                                // Rule at src/isa/x64/lower.isle line 3362.
                                return Some(v1904);
                            }
                        }
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1160 = C::value_type(ctx, v669.0);
                        let v1161 = C::fits_in_64(ctx, v1160);
                        if let Some(v1162) = v1161 {
                            let v1163 = &C::raw_operand_size_of_type(ctx, v1162);
                            let v1164 = constructor_put_in_gpr(ctx, v669.0);
                            let v1165 = &C::gpr_to_gpr_mem_imm(ctx, v1164);
                            let v1166 = &constructor_x64_test(ctx, v1163, v1164, v1165);
                            let v3 = C::value_type(ctx, v2);
                            let v1168 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v669.1, v669.2);
                            let v1169 = constructor_with_flags(ctx, v1166, v1168);
                            let v1170 = C::output(ctx, v1169);
                            // Rule at src/isa/x64/lower.isle line 3365.
                            return Some(v1170);
                        }
                        if v1160 == I128 {
                            let v716 = C::put_in_regs(ctx, v669.0);
                            let v1172 = &constructor_cmp_zero_i128(ctx, &CC::Z, v716);
                            let v1173 = constructor_select_icmp(ctx, v1172, v669.1, v669.2);
                            let v1174 = C::output(ctx, v1173);
                            // Rule at src/isa/x64/lower.isle line 3370.
                            return Some(v1174);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v669 = C::unpack_value_array_3(ctx, v668);
                            let v673 = constructor_put_in_xmm(ctx, v669.0);
                            let v685 = &C::put_in_xmm_mem(ctx, v669.1);
                            let v736 = constructor_sse_and(ctx, v163, v673, v685);
                            let v737 = constructor_put_in_xmm(ctx, v669.0);
                            let v738 = constructor_vector_all_ones(ctx);
                            let v739 = &C::xmm_to_xmm_mem(ctx, v738);
                            let v740 = constructor_x64_xor_vector(ctx, v163, v737, v739);
                            let v741 = &C::put_in_xmm_mem(ctx, v669.2);
                            let v742 = constructor_sse_and(ctx, v163, v740, v741);
                            let v743 = &C::xmm_to_xmm_mem(ctx, v742);
                            let v744 = constructor_sse_or(ctx, v163, v736, v743);
                            let v745 = constructor_output_xmm(ctx, v744);
                            // Rule at src/isa/x64/lower.isle line 1464.
                            return Some(v745);
                        }
                        let v724 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v725) = v724 {
                            let v669 = C::unpack_value_array_3(ctx, v668);
                            let v726 = constructor_put_in_gpr(ctx, v669.0);
                            let v727 = &constructor_put_in_gpr_mem_imm(ctx, v669.1);
                            let v728 = constructor_x64_and(ctx, v725, v726, v727);
                            let v729 = constructor_put_in_gpr(ctx, v669.0);
                            let v730 = constructor_x64_not(ctx, v725, v729);
                            let v731 = &constructor_put_in_gpr_mem_imm(ctx, v669.2);
                            let v732 = constructor_x64_and(ctx, v725, v730, v731);
                            let v733 = &C::gpr_to_gpr_mem_imm(ctx, v732);
                            let v734 = constructor_x64_or(ctx, v725, v728, v733);
                            let v735 = constructor_output_gpr(ctx, v734);
                            // Rule at src/isa/x64/lower.isle line 1459.
                            return Some(v735);
                        }
                        match v3 {
                            I128 => {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v716 = C::put_in_regs(ctx, v669.0);
                                let v717 = C::put_in_regs(ctx, v669.1);
                                let v718 = constructor_and_i128(ctx, v716, v717);
                                let v719 = constructor_i128_not(ctx, v669.0);
                                let v720 = C::put_in_regs(ctx, v669.2);
                                let v721 = constructor_and_i128(ctx, v719, v720);
                                let v722 = constructor_or_i128(ctx, v718, v721);
                                let v723 = C::output(ctx, v722);
                                // Rule at src/isa/x64/lower.isle line 1454.
                                return Some(v723);
                            }
                            F32X4 => {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v689 = C::def_inst(ctx, v669.0);
                                if let Some(v690) = v689 {
                                    let v691 = &C::inst_data(ctx, v690);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v692,
                                        arg: v693,
                                        flags: v694,
                                    } = v691
                                    {
                                        if let &Opcode::Bitcast = v692 {
                                            let v695 = C::def_inst(ctx, v693);
                                            if let Some(v696) = v695 {
                                                let v697 = &C::inst_data(ctx, v696);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v698,
                                                    args: ref v699,
                                                    cond: ref v700,
                                                } = v697
                                                {
                                                    if let &Opcode::Fcmp = v698 {
                                                        if let &FloatCC::LessThan = v700 {
                                                            let v701 =
                                                                C::unpack_value_array_2(ctx, v699);
                                                            if v669.1 == v701.1 {
                                                                if v669.2 == v701.0 {
                                                                    let v710 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v701.1,
                                                                        );
                                                                    let v711 = &C::put_in_xmm_mem(
                                                                        ctx, v701.0,
                                                                    );
                                                                    let v712 =
                                                                        constructor_x64_maxps(
                                                                            ctx, v710, v711,
                                                                        );
                                                                    let v713 =
                                                                        constructor_output_xmm(
                                                                            ctx, v712,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1447.
                                                                    return Some(v713);
                                                                }
                                                            }
                                                            if v669.1 == v701.0 {
                                                                if v669.2 == v701.1 {
                                                                    let v704 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v701.0,
                                                                        );
                                                                    let v705 = &C::put_in_xmm_mem(
                                                                        ctx, v701.1,
                                                                    );
                                                                    let v706 =
                                                                        constructor_x64_minps(
                                                                            ctx, v704, v705,
                                                                        );
                                                                    let v707 =
                                                                        constructor_output_xmm(
                                                                            ctx, v706,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1442.
                                                                    return Some(v707);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64X2 => {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v689 = C::def_inst(ctx, v669.0);
                                if let Some(v690) = v689 {
                                    let v691 = &C::inst_data(ctx, v690);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v692,
                                        arg: v693,
                                        flags: v694,
                                    } = v691
                                    {
                                        if let &Opcode::Bitcast = v692 {
                                            let v695 = C::def_inst(ctx, v693);
                                            if let Some(v696) = v695 {
                                                let v697 = &C::inst_data(ctx, v696);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v698,
                                                    args: ref v699,
                                                    cond: ref v700,
                                                } = v697
                                                {
                                                    if let &Opcode::Fcmp = v698 {
                                                        if let &FloatCC::LessThan = v700 {
                                                            let v701 =
                                                                C::unpack_value_array_2(ctx, v699);
                                                            if v669.1 == v701.1 {
                                                                if v669.2 == v701.0 {
                                                                    let v710 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v701.1,
                                                                        );
                                                                    let v711 = &C::put_in_xmm_mem(
                                                                        ctx, v701.0,
                                                                    );
                                                                    let v714 =
                                                                        constructor_x64_maxpd(
                                                                            ctx, v710, v711,
                                                                        );
                                                                    let v715 =
                                                                        constructor_output_xmm(
                                                                            ctx, v714,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1449.
                                                                    return Some(v715);
                                                                }
                                                            }
                                                            if v669.1 == v701.0 {
                                                                if v669.2 == v701.1 {
                                                                    let v704 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v701.0,
                                                                        );
                                                                    let v705 = &C::put_in_xmm_mem(
                                                                        ctx, v701.1,
                                                                    );
                                                                    let v708 =
                                                                        constructor_x64_minpd(
                                                                            ctx, v704, v705,
                                                                        );
                                                                    let v709 =
                                                                        constructor_output_xmm(
                                                                            ctx, v708,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1444.
                                                                    return Some(v709);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v456 = C::use_sse41(ctx);
                            if v456 == true {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v682 = constructor_all_ones_or_all_zeros(ctx, v669.0);
                                if let Some(v683) = v682 {
                                    let v684 = constructor_put_in_xmm(ctx, v669.2);
                                    let v685 = &C::put_in_xmm_mem(ctx, v669.1);
                                    let v686 = constructor_put_in_xmm(ctx, v669.0);
                                    let v687 = constructor_x64_pblendvb(ctx, v684, v685, v686);
                                    let v688 = constructor_output_xmm(ctx, v687);
                                    // Rule at src/isa/x64/lower.isle line 1420.
                                    return Some(v688);
                                }
                            }
                            let v669 = C::unpack_value_array_3(ctx, v668);
                            let v673 = constructor_put_in_xmm(ctx, v669.0);
                            let v674 = constructor_put_in_xmm(ctx, v669.1);
                            let v675 = &C::xmm_to_xmm_mem(ctx, v673);
                            let v676 = constructor_sse_and(ctx, v3, v674, v675);
                            let v677 = &C::put_in_xmm_mem(ctx, v669.2);
                            let v678 = constructor_sse_and_not(ctx, v3, v673, v677);
                            let v679 = &C::xmm_to_xmm_mem(ctx, v676);
                            let v680 = constructor_sse_or(ctx, v3, v678, v679);
                            let v681 = constructor_output_xmm(ctx, v680);
                            // Rule at src/isa/x64/lower.isle line 1406.
                            return Some(v681);
                        }
                    }
                }
                &Opcode::X86Blendv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v669 = C::unpack_value_array_3(ctx, v668);
                                    let v684 = constructor_put_in_xmm(ctx, v669.2);
                                    let v685 = &C::put_in_xmm_mem(ctx, v669.1);
                                    let v686 = constructor_put_in_xmm(ctx, v669.0);
                                    let v687 = constructor_x64_pblendvb(ctx, v684, v685, v686);
                                    let v688 = constructor_output_xmm(ctx, v687);
                                    // Rule at src/isa/x64/lower.isle line 1472.
                                    return Some(v688);
                                }
                            }
                            I32X4 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v669 = C::unpack_value_array_3(ctx, v668);
                                    let v684 = constructor_put_in_xmm(ctx, v669.2);
                                    let v685 = &C::put_in_xmm_mem(ctx, v669.1);
                                    let v686 = constructor_put_in_xmm(ctx, v669.0);
                                    let v746 = constructor_x64_blendvps(ctx, v684, v685, v686);
                                    let v747 = constructor_output_xmm(ctx, v746);
                                    // Rule at src/isa/x64/lower.isle line 1477.
                                    return Some(v747);
                                }
                            }
                            I64X2 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v669 = C::unpack_value_array_3(ctx, v668);
                                    let v684 = constructor_put_in_xmm(ctx, v669.2);
                                    let v685 = &C::put_in_xmm_mem(ctx, v669.1);
                                    let v686 = constructor_put_in_xmm(ctx, v669.0);
                                    let v748 = constructor_x64_blendvpd(ctx, v684, v685, v686);
                                    let v749 = constructor_output_xmm(ctx, v748);
                                    // Rule at src/isa/x64/lower.isle line 1482.
                                    return Some(v749);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1582 = C::use_fma(ctx);
                        if v1582 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v669 = C::unpack_value_array_3(ctx, v668);
                            let v1583 = constructor_fmadd(ctx, v3, v669.0, v669.1, v669.2);
                            let v1584 = constructor_output_xmm(ctx, v1583);
                            // Rule at src/isa/x64/lower.isle line 2838.
                            return Some(v1584);
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v1517 = C::put_in_reg(ctx, v669.0);
                                let v1518 = C::put_in_reg(ctx, v669.1);
                                let v1519 = C::put_in_reg(ctx, v669.2);
                                let v1520 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1517, v1518, v1519);
                                let v1521 = constructor_output_reg(ctx, v1520);
                                // Rule at src/isa/x64/lower.isle line 2793.
                                return Some(v1521);
                            }
                            F64 => {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v1517 = C::put_in_reg(ctx, v669.0);
                                let v1518 = C::put_in_reg(ctx, v669.1);
                                let v1519 = C::put_in_reg(ctx, v669.2);
                                let v1523 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1517, v1518, v1519);
                                let v1524 = constructor_output_reg(ctx, v1523);
                                // Rule at src/isa/x64/lower.isle line 2795.
                                return Some(v1524);
                            }
                            F32X4 => {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v673 = constructor_put_in_xmm(ctx, v669.0);
                                let v674 = constructor_put_in_xmm(ctx, v669.1);
                                let v1525 = constructor_put_in_xmm(ctx, v669.2);
                                let v1526 = C::xmm_to_reg(ctx, v673);
                                let v1527 = C::xmm_to_reg(ctx, v674);
                                let v1528 = C::xmm_to_reg(ctx, v1525);
                                let v1529 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1526, v1527, v1528);
                                let v1530 = C::xmm_new(ctx, v1529);
                                let v1531 = &C::xmm_to_xmm_mem(ctx, v673);
                                let v1532 = constructor_x64_pshufd(ctx, v1531, 0x1);
                                let v1533 = C::xmm_to_reg(ctx, v1532);
                                let v1534 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1535 = constructor_x64_pshufd(ctx, v1534, 0x1);
                                let v1536 = C::xmm_to_reg(ctx, v1535);
                                let v1537 = &C::xmm_to_xmm_mem(ctx, v1525);
                                let v1538 = constructor_x64_pshufd(ctx, v1537, 0x1);
                                let v1539 = C::xmm_to_reg(ctx, v1538);
                                let v1540 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1533, v1536, v1539);
                                let v1541 = C::xmm_new(ctx, v1540);
                                let v1542 = &C::xmm_to_xmm_mem(ctx, v673);
                                let v1543 = constructor_x64_pshufd(ctx, v1542, 0x2);
                                let v1544 = C::xmm_to_reg(ctx, v1543);
                                let v1545 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1546 = constructor_x64_pshufd(ctx, v1545, 0x2);
                                let v1547 = C::xmm_to_reg(ctx, v1546);
                                let v1548 = &C::xmm_to_xmm_mem(ctx, v1525);
                                let v1549 = constructor_x64_pshufd(ctx, v1548, 0x2);
                                let v1550 = C::xmm_to_reg(ctx, v1549);
                                let v1551 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1544, v1547, v1550);
                                let v1552 = C::xmm_new(ctx, v1551);
                                let v1553 = &C::xmm_to_xmm_mem(ctx, v673);
                                let v1554 = constructor_x64_pshufd(ctx, v1553, 0x3);
                                let v1555 = C::xmm_to_reg(ctx, v1554);
                                let v1556 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1557 = constructor_x64_pshufd(ctx, v1556, 0x3);
                                let v1558 = C::xmm_to_reg(ctx, v1557);
                                let v1559 = &C::xmm_to_xmm_mem(ctx, v1525);
                                let v1560 = constructor_x64_pshufd(ctx, v1559, 0x3);
                                let v1561 = C::xmm_to_reg(ctx, v1560);
                                let v1562 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1555, v1558, v1561);
                                let v1563 = C::xmm_new(ctx, v1562);
                                let v1564 = constructor_f32x4_insertlane(ctx, v1530, v1541, 0x1);
                                let v1565 = constructor_f32x4_insertlane(ctx, v1564, v1552, 0x2);
                                let v1566 = constructor_f32x4_insertlane(ctx, v1565, v1563, 0x3);
                                let v1567 = constructor_output_xmm(ctx, v1566);
                                // Rule at src/isa/x64/lower.isle line 2798.
                                return Some(v1567);
                            }
                            F64X2 => {
                                let v669 = C::unpack_value_array_3(ctx, v668);
                                let v673 = constructor_put_in_xmm(ctx, v669.0);
                                let v674 = constructor_put_in_xmm(ctx, v669.1);
                                let v1525 = constructor_put_in_xmm(ctx, v669.2);
                                let v1526 = C::xmm_to_reg(ctx, v673);
                                let v1527 = C::xmm_to_reg(ctx, v674);
                                let v1528 = C::xmm_to_reg(ctx, v1525);
                                let v1568 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1526, v1527, v1528);
                                let v1569 = C::xmm_new(ctx, v1568);
                                let v1531 = &C::xmm_to_xmm_mem(ctx, v673);
                                let v1571 = constructor_x64_pshufd(ctx, v1531, 0xEE);
                                let v1572 = C::xmm_to_reg(ctx, v1571);
                                let v1534 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1573 = constructor_x64_pshufd(ctx, v1534, 0xEE);
                                let v1574 = C::xmm_to_reg(ctx, v1573);
                                let v1537 = &C::xmm_to_xmm_mem(ctx, v1525);
                                let v1575 = constructor_x64_pshufd(ctx, v1537, 0xEE);
                                let v1576 = C::xmm_to_reg(ctx, v1575);
                                let v1577 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1572, v1574, v1576);
                                let v1578 = C::xmm_new(ctx, v1577);
                                let v1579 = &C::xmm_to_xmm_mem(ctx, v1578);
                                let v1580 = constructor_x64_movlhps(ctx, v1569, v1579);
                                let v1581 = constructor_output_xmm(ctx, v1580);
                                // Rule at src/isa/x64/lower.isle line 2822.
                                return Some(v1581);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v750,
            args: ref v751,
            imm: v752,
        } => {
            if let &Opcode::Insertlane = v750 {
                let v456 = C::use_sse41(ctx);
                if v456 == true {
                    let v757 = C::u8_from_uimm8(ctx, v752);
                    if v757 == 0x1 {
                        let v753 = C::unpack_value_array_2(ctx, v751);
                        let v828 = C::def_inst(ctx, v753.0);
                        if let Some(v829) = v828 {
                            let v830 = C::first_result(ctx, v829);
                            if let Some(v831) = v830 {
                                let v832 = C::value_type(ctx, v831);
                                if v832 == I64X2 {
                                    let v833 = &C::inst_data(ctx, v829);
                                    if let &InstructionData::Unary {
                                        opcode: ref v834,
                                        arg: v835,
                                    } = v833
                                    {
                                        if let &Opcode::Splat = v834 {
                                            let v836 = constructor_put_in_gpr(ctx, v835);
                                            let v837 =
                                                constructor_bitcast_gpr_to_xmm(ctx, I64, v836);
                                            let v838 = &constructor_put_in_gpr_mem(ctx, v753.1);
                                            let v840 = constructor_x64_pinsrq(ctx, v837, v838, 0x1);
                                            let v841 = constructor_output_xmm(ctx, v840);
                                            // Rule at src/isa/x64/lower.isle line 1584.
                                            return Some(v841);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v753 = C::unpack_value_array_2(ctx, v751);
                    let v756 = C::value_type(ctx, v753.0);
                    match v756 {
                        I8X16 => {
                            let v762 = &C::sinkable_load_exact(ctx, v753.1);
                            if let Some(v763) = v762 {
                                let v758 = constructor_put_in_xmm(ctx, v753.0);
                                let v764 = &constructor_sink_load_to_gpr_mem(ctx, v763);
                                let v765 = constructor_x64_pinsrb(ctx, v758, v764, v757);
                                let v766 = constructor_output_xmm(ctx, v765);
                                // Rule at src/isa/x64/lower.isle line 1492.
                                return Some(v766);
                            }
                            let v758 = constructor_put_in_xmm(ctx, v753.0);
                            let v759 = &constructor_put_in_gpr_mem(ctx, v753.1);
                            let v760 = constructor_x64_pinsrb(ctx, v758, v759, v757);
                            let v761 = constructor_output_xmm(ctx, v760);
                            // Rule at src/isa/x64/lower.isle line 1489.
                            return Some(v761);
                        }
                        I32X4 => {
                            let v758 = constructor_put_in_xmm(ctx, v753.0);
                            let v759 = &constructor_put_in_gpr_mem(ctx, v753.1);
                            let v794 = constructor_x64_pinsrd(ctx, v758, v759, v757);
                            let v795 = constructor_output_xmm(ctx, v794);
                            // Rule at src/isa/x64/lower.isle line 1544.
                            return Some(v795);
                        }
                        I64X2 => {
                            let v758 = constructor_put_in_xmm(ctx, v753.0);
                            let v759 = &constructor_put_in_gpr_mem(ctx, v753.1);
                            let v820 = constructor_x64_pinsrq(ctx, v758, v759, v757);
                            let v821 = constructor_output_xmm(ctx, v820);
                            // Rule at src/isa/x64/lower.isle line 1573.
                            return Some(v821);
                        }
                        F32X4 => {
                            let v842 = &C::sinkable_load(ctx, v753.1);
                            if let Some(v843) = v842 {
                                let v758 = constructor_put_in_xmm(ctx, v753.0);
                                let v844 = &constructor_sink_load_to_xmm_mem(ctx, v843);
                                let v845 = C::sse_insertps_lane_imm(ctx, v757);
                                let v846 = constructor_x64_insertps(ctx, v758, v844, v845);
                                let v847 = constructor_output_xmm(ctx, v846);
                                // Rule at src/isa/x64/lower.isle line 1590.
                                return Some(v847);
                            }
                        }
                        _ => {}
                    }
                }
                let v753 = C::unpack_value_array_2(ctx, v751);
                let v756 = C::value_type(ctx, v753.0);
                match v756 {
                    I8X16 => {
                        let v758 = constructor_put_in_xmm(ctx, v753.0);
                        let v757 = C::u8_from_uimm8(ctx, v752);
                        let v767 = C::insert_i8x16_lane_hole(ctx, v757);
                        let v768 = &constructor_const_to_xmm_mem(ctx, v767);
                        let v769 = constructor_x64_pand(ctx, v758, v768);
                        let v771 = &constructor_put_in_gpr_mem(ctx, v753.1);
                        let v772 = constructor_x64_movzx(ctx, &ExtMode::BL, v771);
                        let v775 = C::u8_and(ctx, v757, 0x3);
                        let v776 = C::u8_shl(ctx, v775, 0x3);
                        let v777 = Imm8Reg::Imm8 { imm: v776 };
                        let v778 = &C::imm8_reg_to_imm8_gpr(ctx, &v777);
                        let v779 = constructor_x64_shl(ctx, I32, v772, v778);
                        let v780 = &C::gpr_to_gpr_mem(ctx, v779);
                        let v781 = constructor_x64_movd_to_xmm(ctx, v780);
                        let v782 = &C::xmm_to_xmm_mem(ctx, v781);
                        let v784 = C::u8_shr(ctx, v757, 0x2);
                        let v785 = constructor_insert_i8x16_lane_pshufd_imm(ctx, v784);
                        let v786 = constructor_x64_pshufd(ctx, v782, v785);
                        let v787 = &C::xmm_to_xmm_mem(ctx, v786);
                        let v788 = constructor_x64_por(ctx, v769, v787);
                        let v789 = constructor_output_xmm(ctx, v788);
                        // Rule at src/isa/x64/lower.isle line 1520.
                        return Some(v789);
                    }
                    I16X8 => {
                        let v762 = &C::sinkable_load_exact(ctx, v753.1);
                        if let Some(v763) = v762 {
                            let v758 = constructor_put_in_xmm(ctx, v753.0);
                            let v764 = &constructor_sink_load_to_gpr_mem(ctx, v763);
                            let v757 = C::u8_from_uimm8(ctx, v752);
                            let v792 = constructor_x64_pinsrw(ctx, v758, v764, v757);
                            let v793 = constructor_output_xmm(ctx, v792);
                            // Rule at src/isa/x64/lower.isle line 1540.
                            return Some(v793);
                        }
                        let v758 = constructor_put_in_xmm(ctx, v753.0);
                        let v759 = &constructor_put_in_gpr_mem(ctx, v753.1);
                        let v757 = C::u8_from_uimm8(ctx, v752);
                        let v790 = constructor_x64_pinsrw(ctx, v758, v759, v757);
                        let v791 = constructor_output_xmm(ctx, v790);
                        // Rule at src/isa/x64/lower.isle line 1538.
                        return Some(v791);
                    }
                    I32X4 => {
                        let v757 = C::u8_from_uimm8(ctx, v752);
                        match v757 {
                            0x0 => {
                                let v758 = constructor_put_in_xmm(ctx, v753.0);
                                let v759 = &constructor_put_in_gpr_mem(ctx, v753.1);
                                let v796 = constructor_x64_movd_to_xmm(ctx, v759);
                                let v797 = constructor_x64_movss_regmove(ctx, v758, v796);
                                let v798 = constructor_output_xmm(ctx, v797);
                                // Rule at src/isa/x64/lower.isle line 1548.
                                return Some(v798);
                            }
                            0x1 => {
                                let v799 = &constructor_put_in_gpr_mem(ctx, v753.1);
                                let v800 = constructor_x64_movd_to_xmm(ctx, v799);
                                let v801 = constructor_put_in_xmm(ctx, v753.0);
                                let v802 = &C::xmm_to_xmm_mem(ctx, v801);
                                let v803 = constructor_x64_punpcklqdq(ctx, v800, v802);
                                let v804 = &C::xmm_to_xmm_mem(ctx, v801);
                                let v806 = constructor_x64_shufps(ctx, v803, v804, 0xE2);
                                let v807 = constructor_output_xmm(ctx, v806);
                                // Rule at src/isa/x64/lower.isle line 1553.
                                return Some(v807);
                            }
                            0x2 => {
                                let v799 = &constructor_put_in_gpr_mem(ctx, v753.1);
                                let v800 = constructor_x64_movd_to_xmm(ctx, v799);
                                let v801 = constructor_put_in_xmm(ctx, v753.0);
                                let v802 = &C::xmm_to_xmm_mem(ctx, v801);
                                let v809 = constructor_x64_shufps(ctx, v800, v802, 0x30);
                                let v810 = &C::xmm_to_xmm_mem(ctx, v809);
                                let v812 = constructor_x64_shufps(ctx, v801, v810, 0x84);
                                let v813 = constructor_output_xmm(ctx, v812);
                                // Rule at src/isa/x64/lower.isle line 1560.
                                return Some(v813);
                            }
                            0x3 => {
                                let v799 = &constructor_put_in_gpr_mem(ctx, v753.1);
                                let v800 = constructor_x64_movd_to_xmm(ctx, v799);
                                let v801 = constructor_put_in_xmm(ctx, v753.0);
                                let v802 = &C::xmm_to_xmm_mem(ctx, v801);
                                let v815 = constructor_x64_shufps(ctx, v800, v802, 0xE4);
                                let v816 = &C::xmm_to_xmm_mem(ctx, v815);
                                let v818 = constructor_x64_shufps(ctx, v801, v816, 0x24);
                                let v819 = constructor_output_xmm(ctx, v818);
                                // Rule at src/isa/x64/lower.isle line 1567.
                                return Some(v819);
                            }
                            _ => {}
                        }
                    }
                    I64X2 => {
                        let v757 = C::u8_from_uimm8(ctx, v752);
                        match v757 {
                            0x0 => {
                                let v758 = constructor_put_in_xmm(ctx, v753.0);
                                let v759 = &constructor_put_in_gpr_mem(ctx, v753.1);
                                let v822 = constructor_x64_movq_to_xmm(ctx, v759);
                                let v823 = constructor_x64_movsd_regmove(ctx, v758, v822);
                                let v824 = constructor_output_xmm(ctx, v823);
                                // Rule at src/isa/x64/lower.isle line 1576.
                                return Some(v824);
                            }
                            0x1 => {
                                let v758 = constructor_put_in_xmm(ctx, v753.0);
                                let v759 = &constructor_put_in_gpr_mem(ctx, v753.1);
                                let v822 = constructor_x64_movq_to_xmm(ctx, v759);
                                let v825 = &C::xmm_to_xmm_mem(ctx, v822);
                                let v826 = constructor_x64_punpcklqdq(ctx, v758, v825);
                                let v827 = constructor_output_xmm(ctx, v826);
                                // Rule at src/isa/x64/lower.isle line 1578.
                                return Some(v827);
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v758 = constructor_put_in_xmm(ctx, v753.0);
                        let v848 = constructor_put_in_xmm(ctx, v753.1);
                        let v757 = C::u8_from_uimm8(ctx, v752);
                        let v849 = constructor_f32x4_insertlane(ctx, v758, v848, v757);
                        let v850 = constructor_output_xmm(ctx, v849);
                        // Rule at src/isa/x64/lower.isle line 1593.
                        return Some(v850);
                    }
                    F64X2 => {
                        let v757 = C::u8_from_uimm8(ctx, v752);
                        match v757 {
                            0x0 => {
                                let v758 = constructor_put_in_xmm(ctx, v753.0);
                                let v848 = constructor_put_in_xmm(ctx, v753.1);
                                let v851 = constructor_x64_movsd_regmove(ctx, v758, v848);
                                let v852 = constructor_output_xmm(ctx, v851);
                                // Rule at src/isa/x64/lower.isle line 1638.
                                return Some(v852);
                            }
                            0x1 => {
                                let v758 = constructor_put_in_xmm(ctx, v753.0);
                                let v853 = &C::put_in_xmm_mem(ctx, v753.1);
                                let v854 = constructor_x64_movlhps(ctx, v758, v853);
                                let v855 = constructor_output_xmm(ctx, v854);
                                // Rule at src/isa/x64/lower.isle line 1646.
                                return Some(v855);
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v914,
            code: ref v915,
        } => {
            match v914 {
                &Opcode::Trap => {
                    let v916 = &constructor_x64_ud2(ctx, v915);
                    let v917 = constructor_side_effect(ctx, v916);
                    // Rule at src/isa/x64/lower.isle line 1799.
                    return Some(v917);
                }
                &Opcode::ResumableTrap => {
                    let v916 = &constructor_x64_ud2(ctx, v915);
                    let v917 = constructor_side_effect(ctx, v916);
                    // Rule at src/isa/x64/lower.isle line 1826.
                    return Some(v917);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v380,
            arg: v381,
        } => {
            match v380 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v2551 = &C::sinkable_load(ctx, v381);
                                        if let Some(v2552) = v2551 {
                                            let v2616 = C::use_avx(ctx);
                                            if v2616 == true {
                                                let v2617 =
                                                    &constructor_sink_load_to_xmm_mem(ctx, v2552);
                                                let v2618 =
                                                    constructor_x64_vbroadcastss(ctx, v2617);
                                                let v2619 = constructor_output_xmm(ctx, v2618);
                                                // Rule at src/isa/x64/lower.isle line 4611.
                                                return Some(v2619);
                                            }
                                            let v2555 = &C::sink_load(ctx, v2552);
                                            let v2556 = constructor_x64_movss_load(ctx, v2555);
                                            let v2613 = &C::xmm_to_xmm_mem(ctx, v2556);
                                            let v2614 =
                                                constructor_x64_shufps(ctx, v2556, v2613, 0x0);
                                            let v2615 = constructor_output_xmm(ctx, v2614);
                                            // Rule at src/isa/x64/lower.isle line 4608.
                                            return Some(v2615);
                                        }
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v540 = C::use_ssse3(ctx);
                                        if v540 == true {
                                            let v2551 = &C::sinkable_load(ctx, v381);
                                            if let Some(v2552) = v2551 {
                                                let v2617 =
                                                    &constructor_sink_load_to_xmm_mem(ctx, v2552);
                                                let v2627 = constructor_x64_movddup(ctx, v2617);
                                                let v2628 = constructor_output_xmm(ctx, v2627);
                                                // Rule at src/isa/x64/lower.isle line 4622.
                                                return Some(v2628);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8X16 => {
                                let v2581 = &C::sinkable_load_exact(ctx, v381);
                                if let Some(v2582) = v2581 {
                                    let v2577 = C::use_avx2(ctx);
                                    if v2577 == true {
                                        let v2587 = &constructor_sink_load_to_xmm_mem(ctx, v2582);
                                        let v2588 = constructor_x64_vpbroadcastb(ctx, v2587);
                                        let v2589 = constructor_output_xmm(ctx, v2588);
                                        // Rule at src/isa/x64/lower.isle line 4559.
                                        return Some(v2589);
                                    }
                                    let v456 = C::use_sse41(ctx);
                                    if v456 == true {
                                        let v540 = C::use_ssse3(ctx);
                                        if v540 == true {
                                            let v2392 = constructor_xmm_uninit_value(ctx);
                                            let v2583 =
                                                &constructor_sink_load_to_gpr_mem(ctx, v2582);
                                            let v2584 =
                                                constructor_x64_pinsrb(ctx, v2392, v2583, 0x0);
                                            let v1077 = constructor_xmm_zero(ctx, I8X16);
                                            let v1078 = &C::xmm_to_xmm_mem(ctx, v1077);
                                            let v2585 = constructor_x64_pshufb(ctx, v2584, v1078);
                                            let v2586 = constructor_output_xmm(ctx, v2585);
                                            // Rule at src/isa/x64/lower.isle line 4555.
                                            return Some(v2586);
                                        }
                                    }
                                }
                                let v2577 = C::use_avx2(ctx);
                                if v2577 == true {
                                    let v382 = constructor_put_in_gpr(ctx, v381);
                                    let v2572 = constructor_bitcast_gpr_to_xmm(ctx, I32, v382);
                                    let v2578 = &C::xmm_to_xmm_mem(ctx, v2572);
                                    let v2579 = constructor_x64_vpbroadcastb(ctx, v2578);
                                    let v2580 = constructor_output_xmm(ctx, v2579);
                                    // Rule at src/isa/x64/lower.isle line 4552.
                                    return Some(v2580);
                                }
                                let v540 = C::use_ssse3(ctx);
                                if v540 == true {
                                    let v382 = constructor_put_in_gpr(ctx, v381);
                                    let v2572 = constructor_bitcast_gpr_to_xmm(ctx, I32, v382);
                                    let v2573 = constructor_xmm_zero(ctx, I8X16);
                                    let v2574 = &C::xmm_to_xmm_mem(ctx, v2573);
                                    let v2575 = constructor_x64_pshufb(ctx, v2572, v2574);
                                    let v2576 = constructor_output_xmm(ctx, v2575);
                                    // Rule at src/isa/x64/lower.isle line 4549.
                                    return Some(v2576);
                                }
                                let v2562 = &constructor_put_in_gpr_mem(ctx, v381);
                                let v2563 = constructor_x64_movd_to_xmm(ctx, v2562);
                                let v2564 = &C::xmm_to_xmm_mem(ctx, v2563);
                                let v2565 = constructor_x64_punpcklbw(ctx, v2563, v2564);
                                let v2566 = &C::xmm_to_xmm_mem(ctx, v2565);
                                let v2568 = constructor_x64_pshuflw(ctx, v2566, 0x0);
                                let v2569 = &C::xmm_to_xmm_mem(ctx, v2568);
                                let v2570 = constructor_x64_pshufd(ctx, v2569, 0x0);
                                let v2571 = constructor_output_xmm(ctx, v2570);
                                // Rule at src/isa/x64/lower.isle line 4546.
                                return Some(v2571);
                            }
                            I16X8 => {
                                let v2581 = &C::sinkable_load_exact(ctx, v381);
                                if let Some(v2582) = v2581 {
                                    let v2577 = C::use_avx2(ctx);
                                    if v2577 == true {
                                        let v2587 = &constructor_sink_load_to_xmm_mem(ctx, v2582);
                                        let v2602 = constructor_x64_vpbroadcastw(ctx, v2587);
                                        let v2603 = constructor_output_xmm(ctx, v2602);
                                        // Rule at src/isa/x64/lower.isle line 4575.
                                        return Some(v2603);
                                    }
                                    let v2392 = constructor_xmm_uninit_value(ctx);
                                    let v2583 = &constructor_sink_load_to_gpr_mem(ctx, v2582);
                                    let v2596 = constructor_x64_pinsrw(ctx, v2392, v2583, 0x0);
                                    let v2597 = &C::xmm_to_xmm_mem(ctx, v2596);
                                    let v2598 = constructor_x64_pshuflw(ctx, v2597, 0x0);
                                    let v2599 = &C::xmm_to_xmm_mem(ctx, v2598);
                                    let v2600 = constructor_x64_pshufd(ctx, v2599, 0x0);
                                    let v2601 = constructor_output_xmm(ctx, v2600);
                                    // Rule at src/isa/x64/lower.isle line 4573.
                                    return Some(v2601);
                                }
                                let v2577 = C::use_avx2(ctx);
                                if v2577 == true {
                                    let v382 = constructor_put_in_gpr(ctx, v381);
                                    let v2572 = constructor_bitcast_gpr_to_xmm(ctx, I32, v382);
                                    let v2578 = &C::xmm_to_xmm_mem(ctx, v2572);
                                    let v2594 = constructor_x64_vpbroadcastw(ctx, v2578);
                                    let v2595 = constructor_output_xmm(ctx, v2594);
                                    // Rule at src/isa/x64/lower.isle line 4570.
                                    return Some(v2595);
                                }
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v2572 = constructor_bitcast_gpr_to_xmm(ctx, I32, v382);
                                let v2578 = &C::xmm_to_xmm_mem(ctx, v2572);
                                let v2590 = constructor_x64_pshuflw(ctx, v2578, 0x0);
                                let v2591 = &C::xmm_to_xmm_mem(ctx, v2590);
                                let v2592 = constructor_x64_pshufd(ctx, v2591, 0x0);
                                let v2593 = constructor_output_xmm(ctx, v2592);
                                // Rule at src/isa/x64/lower.isle line 4568.
                                return Some(v2593);
                            }
                            I32X4 => {
                                let v2577 = C::use_avx2(ctx);
                                if v2577 == true {
                                    let v382 = constructor_put_in_gpr(ctx, v381);
                                    let v2572 = constructor_bitcast_gpr_to_xmm(ctx, I32, v382);
                                    let v2578 = &C::xmm_to_xmm_mem(ctx, v2572);
                                    let v2606 = constructor_x64_vpbroadcastd(ctx, v2578);
                                    let v2607 = constructor_output_xmm(ctx, v2606);
                                    // Rule at src/isa/x64/lower.isle line 4585.
                                    return Some(v2607);
                                }
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v2572 = constructor_bitcast_gpr_to_xmm(ctx, I32, v382);
                                let v2578 = &C::xmm_to_xmm_mem(ctx, v2572);
                                let v2604 = constructor_x64_pshufd(ctx, v2578, 0x0);
                                let v2605 = constructor_output_xmm(ctx, v2604);
                                // Rule at src/isa/x64/lower.isle line 4583.
                                return Some(v2605);
                            }
                            I64X2 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v2620 = constructor_bitcast_gpr_to_xmm(ctx, I64, v382);
                                let v2621 = &C::xmm_to_xmm_mem(ctx, v2620);
                                let v2623 = constructor_x64_pshufd(ctx, v2621, 0x44);
                                let v2624 = constructor_output_xmm(ctx, v2623);
                                // Rule at src/isa/x64/lower.isle line 4618.
                                return Some(v2624);
                            }
                            F32X4 => {
                                let v2577 = C::use_avx2(ctx);
                                if v2577 == true {
                                    let v541 = &C::put_in_xmm_mem(ctx, v381);
                                    let v2611 = constructor_x64_vbroadcastss(ctx, v541);
                                    let v2612 = constructor_output_xmm(ctx, v2611);
                                    // Rule at src/isa/x64/lower.isle line 4595.
                                    return Some(v2612);
                                }
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v2608 = constructor_put_in_xmm(ctx, v381);
                                let v397 = &C::put_in_xmm_mem(ctx, v381);
                                let v2609 = constructor_x64_shufps(ctx, v2608, v397, 0x0);
                                let v2610 = constructor_output_xmm(ctx, v2609);
                                // Rule at src/isa/x64/lower.isle line 4592.
                                return Some(v2610);
                            }
                            F64X2 => {
                                let v541 = &C::put_in_xmm_mem(ctx, v381);
                                let v2625 = constructor_x64_pshufd(ctx, v541, 0x44);
                                let v2626 = constructor_output_xmm(ctx, v2625);
                                // Rule at src/isa/x64/lower.isle line 4620.
                                return Some(v2626);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v382 = constructor_put_in_gpr(ctx, v381);
                    let v2383 = &constructor_write_pinned_gpr(ctx, v382);
                    let v2384 = constructor_side_effect(ctx, v2383);
                    // Rule at src/isa/x64/lower.isle line 4262.
                    return Some(v2384);
                }
                &Opcode::VanyTrue => {
                    let v456 = C::use_sse41(ctx);
                    if v456 == true {
                        let v544 = constructor_put_in_xmm(ctx, v381);
                        let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                        let v2629 = &constructor_x64_ptest(ctx, v544, v1441);
                        let v2630 = &constructor_x64_setcc(ctx, &CC::NZ);
                        let v2631 = constructor_with_flags(ctx, v2629, v2630);
                        let v2632 = C::output(ctx, v2631);
                        // Rule at src/isa/x64/lower.isle line 4628.
                        return Some(v2632);
                    }
                    let v544 = constructor_put_in_xmm(ctx, v381);
                    let v545 = constructor_xmm_zero(ctx, I8X16);
                    let v2216 = &C::xmm_to_xmm_mem(ctx, v545);
                    let v2633 = constructor_x64_pcmpeqb(ctx, v544, v2216);
                    let v2635 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2633);
                    let v2637 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size32, v2635, 0xFFFF);
                    let v2638 = &constructor_x64_setcc(ctx, &CC::NZ);
                    let v2639 = constructor_with_flags(ctx, v2637, v2638);
                    let v2640 = C::output(ctx, v2639);
                    // Rule at src/isa/x64/lower.isle line 4637.
                    return Some(v2640);
                }
                &Opcode::VallTrue => {
                    let v456 = C::use_sse41(ctx);
                    if v456 == true {
                        let v544 = constructor_put_in_xmm(ctx, v381);
                        let v655 = C::value_type(ctx, v381);
                        let v2641 = constructor_xmm_zero(ctx, v655);
                        let v2642 = constructor_vec_int_type(ctx, v655);
                        let v2643 = &C::xmm_to_xmm_mem(ctx, v2641);
                        let v2644 = constructor_x64_pcmpeq(ctx, v2642, v544, v2643);
                        let v2645 = &C::xmm_to_xmm_mem(ctx, v2644);
                        let v2646 = &constructor_x64_ptest(ctx, v2644, v2645);
                        let v2647 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v2648 = constructor_with_flags(ctx, v2646, v2647);
                        let v2649 = C::output(ctx, v2648);
                        // Rule at src/isa/x64/lower.isle line 4647.
                        return Some(v2649);
                    }
                    let v655 = C::value_type(ctx, v381);
                    let v2650 = constructor_vec_int_type(ctx, v655);
                    let v2608 = constructor_put_in_xmm(ctx, v381);
                    let v2651 = constructor_xmm_zero(ctx, v655);
                    let v2652 = &C::xmm_to_xmm_mem(ctx, v2651);
                    let v2653 = constructor_x64_pcmpeq(ctx, v2650, v2608, v2652);
                    let v2654 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2653);
                    let v2655 = &C::gpr_to_gpr_mem_imm(ctx, v2654);
                    let v2656 = &constructor_x64_test(ctx, &OperandSize::Size32, v2654, v2655);
                    let v2657 = &constructor_x64_setcc(ctx, &CC::Z);
                    let v2658 = constructor_with_flags(ctx, v2656, v2657);
                    let v2659 = C::output(ctx, v2658);
                    // Rule at src/isa/x64/lower.isle line 4657.
                    return Some(v2659);
                }
                &Opcode::VhighBits => {
                    let v655 = C::value_type(ctx, v381);
                    let v2660 = C::multi_lane(ctx, v655);
                    if let Some(v2661) = v2660 {
                        match v2661.0 {
                            0x8 => {
                                if v2661.1 == 0x10 {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v2664 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v544);
                                    let v2665 = constructor_output_gpr(ctx, v2664);
                                    // Rule at src/isa/x64/lower.isle line 4674.
                                    return Some(v2665);
                                }
                            }
                            0x10 => {
                                if v2661.1 == 0x8 {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                                    let v2670 = constructor_x64_packsswb(ctx, v544, v1441);
                                    let v2671 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2670);
                                    let v1330 = Imm8Reg::Imm8 { imm: 0x8 };
                                    let v2339 = &C::imm8_reg_to_imm8_gpr(ctx, &v1330);
                                    let v2672 = constructor_x64_shr(ctx, I64, v2671, v2339);
                                    let v2673 = constructor_output_gpr(ctx, v2672);
                                    // Rule at src/isa/x64/lower.isle line 4689.
                                    return Some(v2673);
                                }
                            }
                            0x20 => {
                                if v2661.1 == 0x4 {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v2666 =
                                        constructor_x64_movmskps(ctx, &OperandSize::Size32, v544);
                                    let v2667 = constructor_output_gpr(ctx, v2666);
                                    // Rule at src/isa/x64/lower.isle line 4677.
                                    return Some(v2667);
                                }
                            }
                            0x40 => {
                                if v2661.1 == 0x2 {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v2668 =
                                        constructor_x64_movmskpd(ctx, &OperandSize::Size32, v544);
                                    let v2669 = constructor_output_gpr(ctx, v2668);
                                    // Rule at src/isa/x64/lower.isle line 4680.
                                    return Some(v2669);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v395 = constructor_imm(ctx, I8X16, 0x0);
                                let v396 = C::xmm_new(ctx, v395);
                                let v397 = &C::put_in_xmm_mem(ctx, v381);
                                let v398 = constructor_x64_psubb(ctx, v396, v397);
                                let v399 = constructor_output_xmm(ctx, v398);
                                // Rule at src/isa/x64/lower.isle line 944.
                                return Some(v399);
                            }
                            I16X8 => {
                                let v401 = constructor_imm(ctx, I16X8, 0x0);
                                let v402 = C::xmm_new(ctx, v401);
                                let v397 = &C::put_in_xmm_mem(ctx, v381);
                                let v403 = constructor_x64_psubw(ctx, v402, v397);
                                let v404 = constructor_output_xmm(ctx, v403);
                                // Rule at src/isa/x64/lower.isle line 947.
                                return Some(v404);
                            }
                            I32X4 => {
                                let v406 = constructor_imm(ctx, I32X4, 0x0);
                                let v407 = C::xmm_new(ctx, v406);
                                let v397 = &C::put_in_xmm_mem(ctx, v381);
                                let v408 = constructor_x64_psubd(ctx, v407, v397);
                                let v409 = constructor_output_xmm(ctx, v408);
                                // Rule at src/isa/x64/lower.isle line 950.
                                return Some(v409);
                            }
                            I64X2 => {
                                let v411 = constructor_imm(ctx, I64X2, 0x0);
                                let v412 = C::xmm_new(ctx, v411);
                                let v397 = &C::put_in_xmm_mem(ctx, v381);
                                let v413 = constructor_x64_psubq(ctx, v412, v397);
                                let v414 = constructor_output_xmm(ctx, v413);
                                // Rule at src/isa/x64/lower.isle line 953.
                                return Some(v414);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v382 = constructor_put_in_gpr(ctx, v381);
                            let v383 = constructor_x64_neg(ctx, v5, v382);
                            let v384 = constructor_output_gpr(ctx, v383);
                            // Rule at src/isa/x64/lower.isle line 930.
                            return Some(v384);
                        }
                        if v3 == I128 {
                            let v385 = C::put_in_regs(ctx, v381);
                            let v386 = constructor_value_regs_get_gpr(ctx, v385, 0x0);
                            let v387 = constructor_value_regs_get_gpr(ctx, v385, 0x1);
                            let v388 = &constructor_x64_neg_paired(ctx, I64, v386);
                            let v389 = constructor_imm(ctx, I64, 0x0);
                            let v390 = C::gpr_new(ctx, v389);
                            let v391 = &C::gpr_to_gpr_mem_imm(ctx, v387);
                            let v392 = &constructor_x64_sbb_paired(ctx, I64, v390, v391);
                            let v393 = constructor_with_flags(ctx, v388, v392);
                            let v394 = C::output(ctx, v393);
                            // Rule at src/isa/x64/lower.isle line 933.
                            return Some(v394);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v385 = C::put_in_regs(ctx, v381);
                                let v386 = constructor_value_regs_get_gpr(ctx, v385, 0x0);
                                let v387 = constructor_value_regs_get_gpr(ctx, v385, 0x1);
                                let v388 = &constructor_x64_neg_paired(ctx, I64, v386);
                                let v389 = constructor_imm(ctx, I64, 0x0);
                                let v597 = &constructor_reg_to_gpr_mem_imm(ctx, v389);
                                let v598 = &constructor_x64_adc_paired(ctx, I64, v387, v597);
                                let v599 = constructor_with_flags(ctx, v388, v598);
                                let v600 = C::value_regs_get(ctx, v599, 0x1);
                                let v601 = C::gpr_new(ctx, v600);
                                let v602 = &constructor_x64_neg_paired(ctx, I64, v601);
                                let v603 = &constructor_produces_flags_ignore(ctx, v602);
                                let v604 = &C::gpr_to_gpr_mem(ctx, v386);
                                let v605 = C::value_regs_get(ctx, v599, 0x0);
                                let v606 = C::gpr_new(ctx, v605);
                                let v607 = &constructor_cmove(ctx, I64, &CC::S, v604, v606);
                                let v608 = &C::gpr_to_gpr_mem(ctx, v387);
                                let v609 = constructor_produces_flags_get_reg(ctx, v602);
                                let v610 = C::gpr_new(ctx, v609);
                                let v611 = &constructor_cmove(ctx, I64, &CC::S, v608, v610);
                                let v612 = &constructor_consumes_flags_concat(ctx, v607, v611);
                                let v613 = constructor_with_flags(ctx, v603, v612);
                                let v614 = C::output(ctx, v613);
                                // Rule at src/isa/x64/lower.isle line 1274.
                                return Some(v614);
                            }
                            I8X16 => {
                                let v540 = C::use_ssse3(ctx);
                                if v540 == true {
                                    let v541 = &C::put_in_xmm_mem(ctx, v381);
                                    let v542 = constructor_x64_pabsb(ctx, v541);
                                    let v543 = constructor_output_xmm(ctx, v542);
                                    // Rule at src/isa/x64/lower.isle line 1190.
                                    return Some(v543);
                                }
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v545 = constructor_xmm_zero(ctx, I8X16);
                                let v546 = &C::xmm_to_xmm_mem(ctx, v544);
                                let v547 = constructor_x64_psubb(ctx, v545, v546);
                                let v548 = &C::xmm_to_xmm_mem(ctx, v547);
                                let v549 = constructor_x64_pminub(ctx, v544, v548);
                                let v550 = constructor_output_xmm(ctx, v549);
                                // Rule at src/isa/x64/lower.isle line 1197.
                                return Some(v550);
                            }
                            I16X8 => {
                                let v540 = C::use_ssse3(ctx);
                                if v540 == true {
                                    let v541 = &C::put_in_xmm_mem(ctx, v381);
                                    let v551 = constructor_x64_pabsw(ctx, v541);
                                    let v552 = constructor_output_xmm(ctx, v551);
                                    // Rule at src/isa/x64/lower.isle line 1204.
                                    return Some(v552);
                                }
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v553 = constructor_xmm_zero(ctx, I16X8);
                                let v546 = &C::xmm_to_xmm_mem(ctx, v544);
                                let v554 = constructor_x64_psubw(ctx, v553, v546);
                                let v555 = &C::xmm_to_xmm_mem(ctx, v554);
                                let v556 = constructor_x64_pmaxsw(ctx, v544, v555);
                                let v557 = constructor_output_xmm(ctx, v556);
                                // Rule at src/isa/x64/lower.isle line 1208.
                                return Some(v557);
                            }
                            I32X4 => {
                                let v540 = C::use_ssse3(ctx);
                                if v540 == true {
                                    let v541 = &C::put_in_xmm_mem(ctx, v381);
                                    let v558 = constructor_x64_pabsd(ctx, v541);
                                    let v559 = constructor_output_xmm(ctx, v558);
                                    // Rule at src/isa/x64/lower.isle line 1215.
                                    return Some(v559);
                                }
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v561 = &C::xmi_imm(ctx, 0x1F);
                                let v562 = constructor_x64_psrad(ctx, v544, v561);
                                let v563 = &C::xmm_to_xmm_mem(ctx, v562);
                                let v564 = constructor_x64_pxor(ctx, v544, v563);
                                let v565 = &C::xmm_to_xmm_mem(ctx, v562);
                                let v566 = constructor_x64_psubd(ctx, v564, v565);
                                let v567 = constructor_output_xmm(ctx, v566);
                                // Rule at src/isa/x64/lower.isle line 1225.
                                return Some(v567);
                            }
                            I64X2 => {
                                let v332 = C::use_avx512vl(ctx);
                                if v332 == true {
                                    let v333 = C::use_avx512f(ctx);
                                    if v333 == true {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v568 = constructor_x64_vpabsq(ctx, v541);
                                        let v569 = constructor_output_xmm(ctx, v568);
                                        // Rule at src/isa/x64/lower.isle line 1234.
                                        return Some(v569);
                                    }
                                }
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v570 = constructor_imm(ctx, I64X2, 0x0);
                                    let v571 = C::xmm_new(ctx, v570);
                                    let v572 = &C::xmm_to_xmm_mem(ctx, v544);
                                    let v573 = constructor_x64_psubq(ctx, v571, v572);
                                    let v574 = &C::xmm_to_xmm_mem(ctx, v544);
                                    let v575 = constructor_x64_blendvpd(ctx, v573, v574, v573);
                                    let v576 = constructor_output_xmm(ctx, v575);
                                    // Rule at src/isa/x64/lower.isle line 1243.
                                    return Some(v576);
                                }
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v577 = RegMemImm::Imm { simm32: 0x1F };
                                let v578 = &C::xmm_mem_imm_new(ctx, &v577);
                                let v579 = constructor_x64_psrad(ctx, v544, v578);
                                let v580 = &C::xmm_to_xmm_mem(ctx, v579);
                                let v582 = constructor_x64_pshufd(ctx, v580, 0xF5);
                                let v583 = &C::xmm_to_xmm_mem(ctx, v582);
                                let v584 = constructor_x64_pxor(ctx, v544, v583);
                                let v585 = &C::xmm_to_xmm_mem(ctx, v582);
                                let v586 = constructor_x64_psubq(ctx, v584, v585);
                                let v587 = constructor_output_xmm(ctx, v586);
                                // Rule at src/isa/x64/lower.isle line 1252.
                                return Some(v587);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v382 = constructor_put_in_gpr(ctx, v381);
                            let v588 = &constructor_x64_neg_paired(ctx, v5, v382);
                            let v589 = constructor_produces_flags_get_reg(ctx, v588);
                            let v590 = C::gpr_new(ctx, v589);
                            let v592 = &C::gpr_to_gpr_mem(ctx, v382);
                            let v593 = &constructor_cmove(ctx, v5, &CC::S, v592, v590);
                            let v594 = &constructor_produces_flags_ignore(ctx, v588);
                            let v595 = constructor_with_flags_reg(ctx, v594, v593);
                            let v596 = constructor_output_reg(ctx, v595);
                            // Rule at src/isa/x64/lower.isle line 1261.
                            return Some(v596);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v660 = constructor_i128_not(ctx, v381);
                            let v661 = C::output(ctx, v660);
                            // Rule at src/isa/x64/lower.isle line 1391.
                            return Some(v661);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v544 = constructor_put_in_xmm(ctx, v381);
                            let v625 = constructor_vector_all_ones(ctx);
                            let v662 = &C::xmm_to_xmm_mem(ctx, v625);
                            let v665 = constructor_x64_xor_vector(ctx, v3, v544, v662);
                            let v666 = constructor_output_xmm(ctx, v665);
                            // Rule at src/isa/x64/lower.isle line 1401.
                            return Some(v666);
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v382 = constructor_put_in_gpr(ctx, v381);
                            let v658 = constructor_x64_not(ctx, v3, v382);
                            let v659 = constructor_output_gpr(ctx, v658);
                            // Rule at src/isa/x64/lower.isle line 1376.
                            return Some(v659);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v544 = constructor_put_in_xmm(ctx, v381);
                            let v625 = constructor_vector_all_ones(ctx);
                            let v662 = &C::xmm_to_xmm_mem(ctx, v625);
                            let v663 = constructor_x64_xor_vector(ctx, v163, v544, v662);
                            let v664 = constructor_output_xmm(ctx, v663);
                            // Rule at src/isa/x64/lower.isle line 1396.
                            return Some(v664);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1313 = constructor_do_bitrev8(ctx, I32, v382);
                                let v1314 = constructor_output_gpr(ctx, v1313);
                                // Rule at src/isa/x64/lower.isle line 2359.
                                return Some(v1314);
                            }
                            I16 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1315 = constructor_do_bitrev16(ctx, I32, v382);
                                let v1316 = constructor_output_gpr(ctx, v1315);
                                // Rule at src/isa/x64/lower.isle line 2362.
                                return Some(v1316);
                            }
                            I32 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1317 = constructor_do_bitrev32(ctx, I32, v382);
                                let v1318 = constructor_output_gpr(ctx, v1317);
                                // Rule at src/isa/x64/lower.isle line 2365.
                                return Some(v1318);
                            }
                            I64 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1319 = constructor_do_bitrev64(ctx, I64, v382);
                                let v1320 = constructor_output_gpr(ctx, v1319);
                                // Rule at src/isa/x64/lower.isle line 2368.
                                return Some(v1320);
                            }
                            I128 => {
                                let v385 = C::put_in_regs(ctx, v381);
                                let v1201 = constructor_value_regs_get_gpr(ctx, v385, 0x1);
                                let v1321 = constructor_do_bitrev64(ctx, I64, v1201);
                                let v1322 = C::gpr_to_reg(ctx, v1321);
                                let v1323 = C::put_in_regs(ctx, v381);
                                let v1324 = constructor_value_regs_get_gpr(ctx, v1323, 0x0);
                                let v1325 = constructor_do_bitrev64(ctx, I64, v1324);
                                let v1326 = C::gpr_to_reg(ctx, v1325);
                                let v1327 = C::value_regs(ctx, v1322, v1326);
                                let v1328 = C::output(ctx, v1327);
                                // Rule at src/isa/x64/lower.isle line 2371.
                                return Some(v1328);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v382 = constructor_put_in_gpr(ctx, v381);
                            let v1187 = constructor_do_clz(ctx, v46, v46, v382);
                            let v1188 = constructor_output_gpr(ctx, v1187);
                            // Rule at src/isa/x64/lower.isle line 2132.
                            return Some(v1188);
                        }
                        let v1189 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1190) = v1189 {
                            let v1191 =
                                constructor_extend_to_gpr(ctx, v381, I64, &ExtendKind::Zero);
                            let v1192 = constructor_do_clz(ctx, I64, I64, v1191);
                            let v1194 = C::ty_bits(ctx, v1190);
                            let v1195 = C::u8_as_u32(ctx, v1194);
                            let v1196 = C::u32_sub(ctx, 0x40, v1195);
                            let v1197 = RegMemImm::Imm { simm32: v1196 };
                            let v1198 = &C::gpr_mem_imm_new(ctx, &v1197);
                            let v1199 = constructor_x64_sub(ctx, I64, v1192, v1198);
                            let v1200 = constructor_output_gpr(ctx, v1199);
                            // Rule at src/isa/x64/lower.isle line 2135.
                            return Some(v1200);
                        }
                        if v3 == I128 {
                            let v385 = C::put_in_regs(ctx, v381);
                            let v1201 = constructor_value_regs_get_gpr(ctx, v385, 0x1);
                            let v1202 = constructor_do_clz(ctx, I64, I64, v1201);
                            let v1203 = C::put_in_regs(ctx, v381);
                            let v1204 = constructor_value_regs_get_gpr(ctx, v1203, 0x0);
                            let v1205 = constructor_do_clz(ctx, I64, I64, v1204);
                            let v1206 = RegMemImm::Imm { simm32: 0x40 };
                            let v1207 = &C::gpr_mem_imm_new(ctx, &v1206);
                            let v1208 = constructor_x64_add(ctx, I64, v1205, v1207);
                            let v1210 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1202, 0x40);
                            let v1211 = &C::gpr_to_gpr_mem(ctx, v1202);
                            let v1212 = &constructor_cmove(ctx, I64, &CC::NZ, v1211, v1208);
                            let v1213 = constructor_with_flags_reg(ctx, v1210, v1212);
                            let v1214 = C::gpr_new(ctx, v1213);
                            let v1215 = C::gpr_to_reg(ctx, v1214);
                            let v1216 = constructor_imm(ctx, I64, 0x0);
                            let v1217 = C::value_regs(ctx, v1215, v1216);
                            let v1218 = C::output(ctx, v1217);
                            // Rule at src/isa/x64/lower.isle line 2141.
                            return Some(v1218);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v382 = constructor_put_in_gpr(ctx, v381);
                            let v1219 = constructor_do_ctz(ctx, v46, v46, v382);
                            let v1220 = constructor_output_gpr(ctx, v1219);
                            // Rule at src/isa/x64/lower.isle line 2172.
                            return Some(v1220);
                        }
                        let v1189 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1190) = v1189 {
                            let v1221 =
                                constructor_extend_to_gpr(ctx, v381, I32, &ExtendKind::Zero);
                            let v1194 = C::ty_bits(ctx, v1190);
                            let v1195 = C::u8_as_u32(ctx, v1194);
                            let v1222 = C::u32_shl(ctx, 0x1, v1195);
                            let v1223 = RegMemImm::Imm { simm32: v1222 };
                            let v1224 = &C::gpr_mem_imm_new(ctx, &v1223);
                            let v1225 = constructor_x64_or(ctx, I32, v1221, v1224);
                            let v1226 = constructor_do_ctz(ctx, I32, v1190, v1225);
                            let v1227 = constructor_output_gpr(ctx, v1226);
                            // Rule at src/isa/x64/lower.isle line 2175.
                            return Some(v1227);
                        }
                        if v3 == I128 {
                            let v385 = C::put_in_regs(ctx, v381);
                            let v386 = constructor_value_regs_get_gpr(ctx, v385, 0x0);
                            let v1228 = constructor_do_ctz(ctx, I64, I64, v386);
                            let v1203 = C::put_in_regs(ctx, v381);
                            let v1229 = constructor_value_regs_get_gpr(ctx, v1203, 0x1);
                            let v1230 = constructor_do_ctz(ctx, I64, I64, v1229);
                            let v1206 = RegMemImm::Imm { simm32: 0x40 };
                            let v1207 = &C::gpr_mem_imm_new(ctx, &v1206);
                            let v1231 = constructor_x64_add(ctx, I64, v1230, v1207);
                            let v1232 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1228, 0x40);
                            let v1233 = &C::gpr_to_gpr_mem(ctx, v1231);
                            let v1234 = &constructor_cmove(ctx, I64, &CC::Z, v1233, v1228);
                            let v1235 = constructor_with_flags_reg(ctx, v1232, v1234);
                            let v1236 = C::gpr_new(ctx, v1235);
                            let v1237 = C::gpr_to_reg(ctx, v1236);
                            let v1216 = constructor_imm(ctx, I64, 0x0);
                            let v1238 = C::value_regs(ctx, v1237, v1216);
                            let v1239 = C::output(ctx, v1238);
                            // Rule at src/isa/x64/lower.isle line 2180.
                            return Some(v1239);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1330 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v1331 = &C::imm8_reg_to_imm8_gpr(ctx, &v1330);
                                let v1332 = constructor_x64_rotl(ctx, I16, v382, v1331);
                                let v1333 = constructor_output_gpr(ctx, v1332);
                                // Rule at src/isa/x64/lower.isle line 2438.
                                return Some(v1333);
                            }
                            I32 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1334 = constructor_x64_bswap(ctx, I32, v382);
                                let v1335 = constructor_output_gpr(ctx, v1334);
                                // Rule at src/isa/x64/lower.isle line 2441.
                                return Some(v1335);
                            }
                            I64 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1336 = constructor_x64_bswap(ctx, I64, v382);
                                let v1337 = constructor_output_gpr(ctx, v1336);
                                // Rule at src/isa/x64/lower.isle line 2444.
                                return Some(v1337);
                            }
                            I128 => {
                                let v385 = C::put_in_regs(ctx, v381);
                                let v1201 = constructor_value_regs_get_gpr(ctx, v385, 0x1);
                                let v1338 = constructor_x64_bswap(ctx, I64, v1201);
                                let v1339 = C::gpr_to_reg(ctx, v1338);
                                let v1323 = C::put_in_regs(ctx, v381);
                                let v1324 = constructor_value_regs_get_gpr(ctx, v1323, 0x0);
                                let v1340 = constructor_x64_bswap(ctx, I64, v1324);
                                let v1341 = C::gpr_to_reg(ctx, v1340);
                                let v1342 = C::value_regs(ctx, v1339, v1341);
                                let v1343 = C::output(ctx, v1342);
                                // Rule at src/isa/x64/lower.isle line 2447.
                                return Some(v1343);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1240 = C::use_popcnt(ctx);
                        if v1240 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v45 = C::ty_32_or_64(ctx, v3);
                            if let Some(v46) = v45 {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1241 = constructor_x64_popcnt(ctx, v46, v382);
                                let v1242 = constructor_output_gpr(ctx, v1241);
                                // Rule at src/isa/x64/lower.isle line 2206.
                                return Some(v1242);
                            }
                            let v1189 = C::ty_8_or_16(ctx, v3);
                            if let Some(v1190) = v1189 {
                                let v1221 =
                                    constructor_extend_to_gpr(ctx, v381, I32, &ExtendKind::Zero);
                                let v1243 = constructor_x64_popcnt(ctx, I32, v1221);
                                let v1244 = constructor_output_gpr(ctx, v1243);
                                // Rule at src/isa/x64/lower.isle line 2210.
                                return Some(v1244);
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                if v1240 == true {
                                    let v385 = C::put_in_regs(ctx, v381);
                                    let v386 = constructor_value_regs_get_gpr(ctx, v385, 0x0);
                                    let v1245 = constructor_x64_popcnt(ctx, I64, v386);
                                    let v1203 = C::put_in_regs(ctx, v381);
                                    let v1229 = constructor_value_regs_get_gpr(ctx, v1203, 0x1);
                                    let v1246 = constructor_x64_popcnt(ctx, I64, v1229);
                                    let v1247 = &C::gpr_to_gpr_mem_imm(ctx, v1246);
                                    let v1248 = constructor_x64_add(ctx, I64, v1245, v1247);
                                    let v1249 = C::gpr_to_reg(ctx, v1248);
                                    let v1250 = constructor_imm(ctx, I64, 0x0);
                                    let v1251 = C::value_regs(ctx, v1249, v1250);
                                    let v1252 = C::output(ctx, v1251);
                                    // Rule at src/isa/x64/lower.isle line 2214.
                                    return Some(v1252);
                                }
                                let v385 = C::put_in_regs(ctx, v381);
                                let v386 = constructor_value_regs_get_gpr(ctx, v385, 0x0);
                                let v1257 = constructor_do_popcnt(ctx, I64, v386);
                                let v1203 = C::put_in_regs(ctx, v381);
                                let v1229 = constructor_value_regs_get_gpr(ctx, v1203, 0x1);
                                let v1258 = constructor_do_popcnt(ctx, I64, v1229);
                                let v1259 = &C::gpr_to_gpr_mem_imm(ctx, v1258);
                                let v1260 = constructor_x64_add(ctx, I64, v1257, v1259);
                                let v1261 = C::gpr_to_reg(ctx, v1260);
                                let v1250 = constructor_imm(ctx, I64, 0x0);
                                let v1262 = C::value_regs(ctx, v1261, v1250);
                                let v1263 = C::output(ctx, v1262);
                                // Rule at src/isa/x64/lower.isle line 2230.
                                return Some(v1263);
                            }
                            I8X16 => {
                                let v332 = C::use_avx512vl(ctx);
                                if v332 == true {
                                    let v1264 = C::use_avx512bitalg(ctx);
                                    if v1264 == true {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v1265 = constructor_x64_vpopcntb(ctx, v541);
                                        let v1266 = constructor_output_xmm(ctx, v1265);
                                        // Rule at src/isa/x64/lower.isle line 2303.
                                        return Some(v1266);
                                    }
                                }
                                let v540 = C::use_ssse3(ctx);
                                if v540 == true {
                                    let v1268 = C::emit_u128_le_const(
                                        ctx,
                                        0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F,
                                    );
                                    let v1269 = &constructor_const_to_xmm_mem(ctx, v1268);
                                    let v1270 = constructor_put_in_xmm(ctx, v381);
                                    let v1271 = constructor_sse_and(ctx, I8X16, v1270, v1269);
                                    let v1272 = constructor_put_in_xmm(ctx, v381);
                                    let v1274 = &C::xmi_imm(ctx, 0x4);
                                    let v1275 = constructor_x64_psrlw(ctx, v1272, v1274);
                                    let v1276 = constructor_sse_and(ctx, I8X16, v1275, v1269);
                                    let v1278 = C::emit_u128_le_const(
                                        ctx,
                                        0x4030302030202010302020102010100,
                                    );
                                    let v1279 = constructor_x64_xmm_load_const(ctx, I8X16, v1278);
                                    let v1280 = &C::xmm_to_xmm_mem(ctx, v1271);
                                    let v1281 = constructor_x64_pshufb(ctx, v1279, v1280);
                                    let v1282 = &C::xmm_to_xmm_mem(ctx, v1276);
                                    let v1283 = constructor_x64_pshufb(ctx, v1279, v1282);
                                    let v1284 = &C::xmm_to_xmm_mem(ctx, v1283);
                                    let v1285 = constructor_x64_paddb(ctx, v1281, v1284);
                                    let v1286 = constructor_output_xmm(ctx, v1285);
                                    // Rule at src/isa/x64/lower.isle line 2329.
                                    return Some(v1286);
                                }
                                let v1288 =
                                    C::emit_u128_le_const(ctx, 0x77777777777777777777777777777777);
                                let v1289 = &constructor_const_to_xmm_mem(ctx, v1288);
                                let v1270 = constructor_put_in_xmm(ctx, v381);
                                let v1290 = &C::xmi_imm(ctx, 0x1);
                                let v1291 = constructor_x64_psrlq(ctx, v1270, v1290);
                                let v1292 = constructor_x64_pand(ctx, v1291, v1289);
                                let v1293 = &C::xmm_to_xmm_mem(ctx, v1292);
                                let v1294 = constructor_x64_psubb(ctx, v1270, v1293);
                                let v1295 = &C::xmi_imm(ctx, 0x1);
                                let v1296 = constructor_x64_psrlq(ctx, v1292, v1295);
                                let v1297 = constructor_x64_pand(ctx, v1296, v1289);
                                let v1298 = &C::xmm_to_xmm_mem(ctx, v1297);
                                let v1299 = constructor_x64_psubb(ctx, v1294, v1298);
                                let v1300 = &C::xmi_imm(ctx, 0x1);
                                let v1301 = constructor_x64_psrlq(ctx, v1297, v1300);
                                let v1302 = constructor_x64_pand(ctx, v1301, v1289);
                                let v1303 = &C::xmm_to_xmm_mem(ctx, v1302);
                                let v1304 = constructor_x64_psubb(ctx, v1299, v1303);
                                let v1305 = &C::xmi_imm(ctx, 0x4);
                                let v1306 = constructor_x64_psrlw(ctx, v1304, v1305);
                                let v1307 = &C::xmm_to_xmm_mem(ctx, v1306);
                                let v1308 = constructor_x64_paddb(ctx, v1304, v1307);
                                let v1309 =
                                    C::emit_u128_le_const(ctx, 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F);
                                let v1310 = &constructor_const_to_xmm_mem(ctx, v1309);
                                let v1311 = constructor_x64_pand(ctx, v1308, v1310);
                                let v1312 = constructor_output_xmm(ctx, v1311);
                                // Rule at src/isa/x64/lower.isle line 2345.
                                return Some(v1312);
                            }
                            _ => {}
                        }
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v382 = constructor_put_in_gpr(ctx, v381);
                            let v1253 = constructor_do_popcnt(ctx, v46, v382);
                            let v1254 = constructor_output_gpr(ctx, v1253);
                            // Rule at src/isa/x64/lower.isle line 2220.
                            return Some(v1254);
                        }
                        let v1189 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1190) = v1189 {
                            let v1221 =
                                constructor_extend_to_gpr(ctx, v381, I32, &ExtendKind::Zero);
                            let v1255 = constructor_do_popcnt(ctx, I32, v1221);
                            let v1256 = constructor_output_gpr(ctx, v1255);
                            // Rule at src/isa/x64/lower.isle line 2225.
                            return Some(v1256);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1427 = constructor_xmm_zero(ctx, F32X4);
                                let v1428 = &C::put_in_xmm_mem(ctx, v381);
                                let v1429 = constructor_x64_sqrtss(ctx, v1427, v1428);
                                let v1430 = constructor_output_xmm(ctx, v1429);
                                // Rule at src/isa/x64/lower.isle line 2594.
                                return Some(v1430);
                            }
                            F64 => {
                                let v1432 = constructor_xmm_zero(ctx, F64X2);
                                let v1428 = &C::put_in_xmm_mem(ctx, v381);
                                let v1433 = constructor_x64_sqrtsd(ctx, v1432, v1428);
                                let v1434 = constructor_output_xmm(ctx, v1433);
                                // Rule at src/isa/x64/lower.isle line 2596.
                                return Some(v1434);
                            }
                            F32X4 => {
                                let v541 = &C::put_in_xmm_mem(ctx, v381);
                                let v1435 = constructor_x64_sqrtps(ctx, v541);
                                let v1436 = constructor_output_xmm(ctx, v1435);
                                // Rule at src/isa/x64/lower.isle line 2598.
                                return Some(v1436);
                            }
                            F64X2 => {
                                let v541 = &C::put_in_xmm_mem(ctx, v381);
                                let v1437 = constructor_x64_sqrtpd(ctx, v541);
                                let v1438 = constructor_output_xmm(ctx, v1437);
                                // Rule at src/isa/x64/lower.isle line 2600.
                                return Some(v1438);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v636 = constructor_imm(ctx, F32, 0x80000000);
                                let v637 = &constructor_reg_to_xmm_mem(ctx, v636);
                                let v638 = constructor_x64_xorps(ctx, v544, v637);
                                let v639 = constructor_output_xmm(ctx, v638);
                                // Rule at src/isa/x64/lower.isle line 1314.
                                return Some(v639);
                            }
                            F64 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v641 = constructor_imm(ctx, F64, 0x8000000000000000);
                                let v642 = &constructor_reg_to_xmm_mem(ctx, v641);
                                let v643 = constructor_x64_xorpd(ctx, v544, v642);
                                let v644 = constructor_output_xmm(ctx, v643);
                                // Rule at src/isa/x64/lower.isle line 1317.
                                return Some(v644);
                            }
                            F32X4 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v625 = constructor_vector_all_ones(ctx);
                                let v645 = &C::xmi_imm(ctx, 0x1F);
                                let v646 = constructor_x64_pslld(ctx, v625, v645);
                                let v647 = &C::xmm_to_xmm_mem(ctx, v646);
                                let v648 = constructor_x64_xorps(ctx, v544, v647);
                                let v649 = constructor_output_xmm(ctx, v648);
                                // Rule at src/isa/x64/lower.isle line 1320.
                                return Some(v649);
                            }
                            F64X2 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v625 = constructor_vector_all_ones(ctx);
                                let v650 = &C::xmi_imm(ctx, 0x3F);
                                let v651 = constructor_x64_psllq(ctx, v625, v650);
                                let v652 = &C::xmm_to_xmm_mem(ctx, v651);
                                let v653 = constructor_x64_xorpd(ctx, v544, v652);
                                let v654 = constructor_output_xmm(ctx, v653);
                                // Rule at src/isa/x64/lower.isle line 1324.
                                return Some(v654);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v616 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v617 = &constructor_reg_to_xmm_mem(ctx, v616);
                                let v618 = constructor_x64_andps(ctx, v544, v617);
                                let v619 = constructor_output_xmm(ctx, v618);
                                // Rule at src/isa/x64/lower.isle line 1296.
                                return Some(v619);
                            }
                            F64 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v621 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v622 = &constructor_reg_to_xmm_mem(ctx, v621);
                                let v623 = constructor_x64_andpd(ctx, v544, v622);
                                let v624 = constructor_output_xmm(ctx, v623);
                                // Rule at src/isa/x64/lower.isle line 1299.
                                return Some(v624);
                            }
                            F32X4 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v625 = constructor_vector_all_ones(ctx);
                                let v626 = &C::xmi_imm(ctx, 0x1);
                                let v627 = constructor_x64_psrld(ctx, v625, v626);
                                let v628 = &C::xmm_to_xmm_mem(ctx, v627);
                                let v629 = constructor_x64_andps(ctx, v544, v628);
                                let v630 = constructor_output_xmm(ctx, v629);
                                // Rule at src/isa/x64/lower.isle line 1303.
                                return Some(v630);
                            }
                            F64X2 => {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v625 = constructor_vector_all_ones(ctx);
                                let v626 = &C::xmi_imm(ctx, 0x1);
                                let v631 = constructor_x64_psrlq(ctx, v625, v626);
                                let v632 = &C::xmm_to_xmm_mem(ctx, v631);
                                let v633 = constructor_x64_andpd(ctx, v544, v632);
                                let v634 = constructor_output_xmm(ctx, v633);
                                // Rule at src/isa/x64/lower.isle line 1308.
                                return Some(v634);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v2293 = &C::put_in_reg_mem(ctx, v381);
                    let v655 = C::value_type(ctx, v381);
                    let v2295 = constructor_x64_round(ctx, v655, v2293, &RoundImm::RoundUp);
                    let v2296 = constructor_output_xmm(ctx, v2295);
                    // Rule at src/isa/x64/lower.isle line 4086.
                    return Some(v2296);
                }
                &Opcode::Floor => {
                    let v2293 = &C::put_in_reg_mem(ctx, v381);
                    let v655 = C::value_type(ctx, v381);
                    let v2298 = constructor_x64_round(ctx, v655, v2293, &RoundImm::RoundDown);
                    let v2299 = constructor_output_xmm(ctx, v2298);
                    // Rule at src/isa/x64/lower.isle line 4091.
                    return Some(v2299);
                }
                &Opcode::Trunc => {
                    let v2293 = &C::put_in_reg_mem(ctx, v381);
                    let v655 = C::value_type(ctx, v381);
                    let v2304 = constructor_x64_round(ctx, v655, v2293, &RoundImm::RoundZero);
                    let v2305 = constructor_output_xmm(ctx, v2304);
                    // Rule at src/isa/x64/lower.isle line 4101.
                    return Some(v2305);
                }
                &Opcode::Nearest => {
                    let v2293 = &C::put_in_reg_mem(ctx, v381);
                    let v655 = C::value_type(ctx, v381);
                    let v2301 = constructor_x64_round(ctx, v655, v2293, &RoundImm::RoundNearest);
                    let v2302 = constructor_output_xmm(ctx, v2301);
                    // Rule at src/isa/x64/lower.isle line 4096.
                    return Some(v2302);
                }
                &Opcode::IsNull => {
                    let v655 = C::value_type(ctx, v381);
                    if v655 == R64 {
                        let v382 = constructor_put_in_gpr(ctx, v381);
                        let v1345 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v382, 0x0);
                        let v1346 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1347 = constructor_with_flags(ctx, v1345, v1346);
                        let v1348 = C::output(ctx, v1347);
                        // Rule at src/isa/x64/lower.isle line 2455.
                        return Some(v1348);
                    }
                }
                &Opcode::IsInvalid => {
                    let v655 = C::value_type(ctx, v381);
                    if v655 == R64 {
                        let v382 = constructor_put_in_gpr(ctx, v381);
                        let v1350 =
                            &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v382, 0xFFFFFFFF);
                        let v1346 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1351 = constructor_with_flags(ctx, v1350, v1346);
                        let v1352 = C::output(ctx, v1351);
                        // Rule at src/isa/x64/lower.isle line 2463.
                        return Some(v1352);
                    }
                }
                &Opcode::ScalarToVector => {
                    let v2551 = &C::sinkable_load(ctx, v381);
                    if let Some(v2552) = v2551 {
                        let v655 = C::value_type(ctx, v381);
                        let v2558 = C::ty_64(ctx, v655);
                        if let Some(v2559) = v2558 {
                            let v2555 = &C::sink_load(ctx, v2552);
                            let v2560 = constructor_x64_movsd_load(ctx, v2555);
                            let v2561 = constructor_output_xmm(ctx, v2560);
                            // Rule at src/isa/x64/lower.isle line 4530.
                            return Some(v2561);
                        }
                        let v2553 = C::ty_32(ctx, v655);
                        if let Some(v2554) = v2553 {
                            let v2555 = &C::sink_load(ctx, v2552);
                            let v2556 = constructor_x64_movss_load(ctx, v2555);
                            let v2557 = constructor_output_xmm(ctx, v2556);
                            // Rule at src/isa/x64/lower.isle line 4528.
                            return Some(v2557);
                        }
                    }
                    let v655 = C::value_type(ctx, v381);
                    let v2005 = C::ty_scalar_float(ctx, v655);
                    if let Some(v2006) = v2005 {
                        let v1370 = constructor_output_value(ctx, v381);
                        // Rule at src/isa/x64/lower.isle line 4518.
                        return Some(v1370);
                    }
                    let v382 = constructor_put_in_gpr(ctx, v381);
                    let v2549 = constructor_bitcast_gpr_to_xmm(ctx, v655, v382);
                    let v2550 = constructor_output_xmm(ctx, v2549);
                    // Rule at src/isa/x64/lower.isle line 4523.
                    return Some(v2550);
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v385 = C::put_in_regs(ctx, v381);
                        let v3 = C::value_type(ctx, v2);
                        let v655 = C::value_type(ctx, v381);
                        let v656 = constructor_lower_bmask(ctx, v3, v655, v385);
                        let v657 = C::output(ctx, v656);
                        // Rule at src/isa/x64/lower.isle line 1369.
                        return Some(v657);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v385 = C::put_in_regs(ctx, v381);
                            let v386 = constructor_value_regs_get_gpr(ctx, v385, 0x0);
                            let v1371 = constructor_output_gpr(ctx, v386);
                            // Rule at src/isa/x64/lower.isle line 2513.
                            return Some(v1371);
                        }
                        let v655 = C::value_type(ctx, v381);
                        if v3 == v655 {
                            let v1370 = constructor_output_value(ctx, v381);
                            // Rule at src/isa/x64/lower.isle line 2507.
                            return Some(v1370);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v655 = C::value_type(ctx, v381);
                                    if v655 == I8X16 {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v2175 = constructor_x64_pmovsxbw(ctx, v541);
                                        let v2176 = constructor_output_xmm(ctx, v2175);
                                        // Rule at src/isa/x64/lower.isle line 3791.
                                        return Some(v2176);
                                    }
                                }
                            }
                            I32X4 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v655 = C::value_type(ctx, v381);
                                    if v655 == I16X8 {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v2177 = constructor_x64_pmovsxwd(ctx, v541);
                                        let v2178 = constructor_output_xmm(ctx, v2177);
                                        // Rule at src/isa/x64/lower.isle line 3794.
                                        return Some(v2178);
                                    }
                                }
                            }
                            I64X2 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v655 = C::value_type(ctx, v381);
                                    if v655 == I32X4 {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v2179 = constructor_x64_pmovsxdq(ctx, v541);
                                        let v2180 = constructor_output_xmm(ctx, v2179);
                                        // Rule at src/isa/x64/lower.isle line 3797.
                                        return Some(v2180);
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v544 = constructor_put_in_xmm(ctx, v381);
                        let v2181 = constructor_lower_swiden_low(ctx, v3, v544);
                        let v2182 = constructor_output_xmm(ctx, v2181);
                        // Rule at src/isa/x64/lower.isle line 3801.
                        return Some(v2182);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v655 = C::value_type(ctx, v381);
                                if v655 == I8X16 {
                                    let v456 = C::use_sse41(ctx);
                                    if v456 == true {
                                        let v540 = C::use_ssse3(ctx);
                                        if v540 == true {
                                            let v544 = constructor_put_in_xmm(ctx, v381);
                                            let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                                            let v2183 =
                                                constructor_x64_palignr(ctx, v544, v1441, 0x8);
                                            let v2184 = &C::xmm_to_xmm_mem(ctx, v2183);
                                            let v2185 = constructor_x64_pmovsxbw(ctx, v2184);
                                            let v2186 = constructor_output_xmm(ctx, v2185);
                                            // Rule at src/isa/x64/lower.isle line 3824.
                                            return Some(v2186);
                                        }
                                    }
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                                    let v2193 = constructor_x64_punpckhbw(ctx, v544, v1441);
                                    let v2194 = &C::xmi_imm(ctx, 0x8);
                                    let v2195 = constructor_x64_psraw(ctx, v2193, v2194);
                                    let v2196 = constructor_output_xmm(ctx, v2195);
                                    // Rule at src/isa/x64/lower.isle line 3840.
                                    return Some(v2196);
                                }
                            }
                            I32X4 => {
                                let v655 = C::value_type(ctx, v381);
                                if v655 == I16X8 {
                                    let v456 = C::use_sse41(ctx);
                                    if v456 == true {
                                        let v540 = C::use_ssse3(ctx);
                                        if v540 == true {
                                            let v544 = constructor_put_in_xmm(ctx, v381);
                                            let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                                            let v2183 =
                                                constructor_x64_palignr(ctx, v544, v1441, 0x8);
                                            let v2184 = &C::xmm_to_xmm_mem(ctx, v2183);
                                            let v2187 = constructor_x64_pmovsxwd(ctx, v2184);
                                            let v2188 = constructor_output_xmm(ctx, v2187);
                                            // Rule at src/isa/x64/lower.isle line 3829.
                                            return Some(v2188);
                                        }
                                    }
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                                    let v2197 = constructor_x64_punpckhwd(ctx, v544, v1441);
                                    let v1990 = &C::xmi_imm(ctx, 0x10);
                                    let v2198 = constructor_x64_psrad(ctx, v2197, v1990);
                                    let v2199 = constructor_output_xmm(ctx, v2198);
                                    // Rule at src/isa/x64/lower.isle line 3843.
                                    return Some(v2199);
                                }
                            }
                            I64X2 => {
                                let v655 = C::value_type(ctx, v381);
                                if v655 == I32X4 {
                                    let v456 = C::use_sse41(ctx);
                                    if v456 == true {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v2189 = constructor_x64_pshufd(ctx, v541, 0xEE);
                                        let v2190 = &C::xmm_to_xmm_mem(ctx, v2189);
                                        let v2191 = constructor_x64_pmovsxdq(ctx, v2190);
                                        let v2192 = constructor_output_xmm(ctx, v2191);
                                        // Rule at src/isa/x64/lower.isle line 3834.
                                        return Some(v2192);
                                    }
                                    let v541 = &C::put_in_xmm_mem(ctx, v381);
                                    let v2201 = constructor_x64_pshufd(ctx, v541, 0xE);
                                    let v2202 = constructor_xmm_zero(ctx, I32X4);
                                    let v2203 = &C::xmm_to_xmm_mem(ctx, v2201);
                                    let v2204 = constructor_x64_pcmpgtd(ctx, v2202, v2203);
                                    let v2205 = &C::xmm_to_xmm_mem(ctx, v2204);
                                    let v2206 = constructor_x64_punpckldq(ctx, v2201, v2205);
                                    let v2207 = constructor_output_xmm(ctx, v2206);
                                    // Rule at src/isa/x64/lower.isle line 3848.
                                    return Some(v2207);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v655 = C::value_type(ctx, v381);
                                    if v655 == I8X16 {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v2208 = constructor_x64_pmovzxbw(ctx, v541);
                                        let v2209 = constructor_output_xmm(ctx, v2208);
                                        // Rule at src/isa/x64/lower.isle line 3856.
                                        return Some(v2209);
                                    }
                                }
                            }
                            I32X4 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v655 = C::value_type(ctx, v381);
                                    if v655 == I16X8 {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v2210 = constructor_x64_pmovzxwd(ctx, v541);
                                        let v2211 = constructor_output_xmm(ctx, v2210);
                                        // Rule at src/isa/x64/lower.isle line 3859.
                                        return Some(v2211);
                                    }
                                }
                            }
                            I64X2 => {
                                let v456 = C::use_sse41(ctx);
                                if v456 == true {
                                    let v655 = C::value_type(ctx, v381);
                                    if v655 == I32X4 {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v2212 = constructor_x64_pmovzxdq(ctx, v541);
                                        let v2213 = constructor_output_xmm(ctx, v2212);
                                        // Rule at src/isa/x64/lower.isle line 3862.
                                        return Some(v2213);
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v544 = constructor_put_in_xmm(ctx, v381);
                        let v2214 = constructor_lower_uwiden_low(ctx, v3, v544);
                        let v2215 = constructor_output_xmm(ctx, v2214);
                        // Rule at src/isa/x64/lower.isle line 3866.
                        return Some(v2215);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v655 = C::value_type(ctx, v381);
                                if v655 == I8X16 {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v545 = constructor_xmm_zero(ctx, I8X16);
                                    let v2216 = &C::xmm_to_xmm_mem(ctx, v545);
                                    let v2217 = constructor_x64_punpckhbw(ctx, v544, v2216);
                                    let v2218 = constructor_output_xmm(ctx, v2217);
                                    // Rule at src/isa/x64/lower.isle line 3881.
                                    return Some(v2218);
                                }
                            }
                            I32X4 => {
                                let v655 = C::value_type(ctx, v381);
                                if v655 == I16X8 {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v545 = constructor_xmm_zero(ctx, I8X16);
                                    let v2216 = &C::xmm_to_xmm_mem(ctx, v545);
                                    let v2219 = constructor_x64_punpckhwd(ctx, v544, v2216);
                                    let v2220 = constructor_output_xmm(ctx, v2219);
                                    // Rule at src/isa/x64/lower.isle line 3883.
                                    return Some(v2220);
                                }
                            }
                            I64X2 => {
                                let v655 = C::value_type(ctx, v381);
                                if v655 == I32X4 {
                                    let v544 = constructor_put_in_xmm(ctx, v381);
                                    let v2029 = constructor_xmm_zero(ctx, F32X4);
                                    let v2030 = &C::xmm_to_xmm_mem(ctx, v2029);
                                    let v2221 = constructor_x64_unpckhps(ctx, v544, v2030);
                                    let v2222 = constructor_output_xmm(ctx, v2221);
                                    // Rule at src/isa/x64/lower.isle line 3885.
                                    return Some(v2222);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1191 =
                                    constructor_extend_to_gpr(ctx, v381, I64, &ExtendKind::Zero);
                                let v1357 = constructor_output_gpr(ctx, v1191);
                                // Rule at src/isa/x64/lower.isle line 2476.
                                return Some(v1357);
                            }
                            I128 => {
                                let v1191 =
                                    constructor_extend_to_gpr(ctx, v381, I64, &ExtendKind::Zero);
                                let v1353 = C::gpr_to_reg(ctx, v1191);
                                let v1354 = constructor_imm(ctx, I64, 0x0);
                                let v1355 = C::value_regs(ctx, v1353, v1354);
                                let v1356 = C::output(ctx, v1355);
                                // Rule at src/isa/x64/lower.isle line 2472.
                                return Some(v1356);
                            }
                            _ => {}
                        }
                        let v1358 = C::fits_in_32(ctx, v3);
                        if let Some(v1359) = v1358 {
                            let v1221 =
                                constructor_extend_to_gpr(ctx, v381, I32, &ExtendKind::Zero);
                            let v1360 = constructor_output_gpr(ctx, v1221);
                            // Rule at src/isa/x64/lower.isle line 2481.
                            return Some(v1360);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1361 =
                                    constructor_extend_to_gpr(ctx, v381, I64, &ExtendKind::Sign);
                                let v1367 = constructor_output_gpr(ctx, v1361);
                                // Rule at src/isa/x64/lower.isle line 2496.
                                return Some(v1367);
                            }
                            I128 => {
                                let v1361 =
                                    constructor_extend_to_gpr(ctx, v381, I64, &ExtendKind::Sign);
                                let v967 = Imm8Reg::Imm8 { imm: 0x3F };
                                let v968 = &C::imm8_reg_to_imm8_gpr(ctx, &v967);
                                let v1362 = constructor_x64_sar(ctx, I64, v1361, v968);
                                let v1363 = C::gpr_to_reg(ctx, v1361);
                                let v1364 = C::gpr_to_reg(ctx, v1362);
                                let v1365 = C::value_regs(ctx, v1363, v1364);
                                let v1366 = C::output(ctx, v1365);
                                // Rule at src/isa/x64/lower.isle line 2490.
                                return Some(v1366);
                            }
                            _ => {}
                        }
                        let v1358 = C::fits_in_32(ctx, v3);
                        if let Some(v1359) = v1358 {
                            let v1368 =
                                constructor_extend_to_gpr(ctx, v381, I32, &ExtendKind::Sign);
                            let v1369 = constructor_output_gpr(ctx, v1368);
                            // Rule at src/isa/x64/lower.isle line 2501.
                            return Some(v1369);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v1432 = constructor_xmm_zero(ctx, F64X2);
                            let v1428 = &C::put_in_xmm_mem(ctx, v381);
                            let v1439 = constructor_x64_cvtss2sd(ctx, v1432, v1428);
                            let v1440 = constructor_output_xmm(ctx, v1439);
                            // Rule at src/isa/x64/lower.isle line 2604.
                            return Some(v1440);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v1427 = constructor_xmm_zero(ctx, F32X4);
                            let v1428 = &C::put_in_xmm_mem(ctx, v381);
                            let v1444 = constructor_x64_cvtsd2ss(ctx, v1427, v1428);
                            let v1445 = constructor_output_xmm(ctx, v1444);
                            // Rule at src/isa/x64/lower.isle line 2612.
                            return Some(v1445);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v541 = &C::put_in_xmm_mem(ctx, v381);
                            let v1446 = constructor_x64_cvtpd2ps(ctx, v541);
                            let v1447 = constructor_output_xmm(ctx, v1446);
                            // Rule at src/isa/x64/lower.isle line 2616.
                            return Some(v1447);
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v544 = constructor_put_in_xmm(ctx, v381);
                            let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                            let v1442 = constructor_x64_cvtps2pd(ctx, v1441);
                            let v1443 = constructor_output_xmm(ctx, v1442);
                            // Rule at src/isa/x64/lower.isle line 2608.
                            return Some(v1443);
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v655 = C::value_type(ctx, v381);
                        let v2005 = C::ty_scalar_float(ctx, v655);
                        if let Some(v2006) = v2005 {
                            let v3 = C::value_type(ctx, v2);
                            let v2007 = constructor_cvt_float_to_uint_seq(ctx, v3, v381, false);
                            let v2008 = constructor_output_gpr(ctx, v2007);
                            // Rule at src/isa/x64/lower.isle line 3543.
                            return Some(v2008);
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v655 = C::value_type(ctx, v381);
                        let v2005 = C::ty_scalar_float(ctx, v655);
                        if let Some(v2006) = v2005 {
                            let v3 = C::value_type(ctx, v2);
                            let v2011 = constructor_cvt_float_to_sint_seq(ctx, v3, v381, false);
                            let v2012 = constructor_output_gpr(ctx, v2011);
                            // Rule at src/isa/x64/lower.isle line 3549.
                            return Some(v2012);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v655 = C::value_type(ctx, v381);
                            if v655 == F32X4 {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v2029 = constructor_xmm_zero(ctx, F32X4);
                                let v2030 = &C::xmm_to_xmm_mem(ctx, v2029);
                                let v2031 = constructor_x64_maxps(ctx, v544, v2030);
                                let v2032 = &C::xmm_to_xmm_mem(ctx, v2029);
                                let v2033 = constructor_x64_pcmpeqd(ctx, v2029, v2032);
                                let v2034 = &C::xmi_imm(ctx, 0x1);
                                let v2035 = constructor_x64_psrld(ctx, v2033, v2034);
                                let v2036 = &C::xmm_to_xmm_mem(ctx, v2035);
                                let v2037 = constructor_x64_cvtdq2ps(ctx, v2036);
                                let v2038 = &C::xmm_to_xmm_mem(ctx, v2031);
                                let v2039 = constructor_x64_cvttps2dq(ctx, v2038);
                                let v2040 = &C::xmm_to_xmm_mem(ctx, v2037);
                                let v2041 = constructor_x64_subps(ctx, v2031, v2040);
                                let v2042 = &C::xmm_to_xmm_mem(ctx, v2041);
                                let v2043 = constructor_x64_cmpps(
                                    ctx,
                                    v2037,
                                    v2042,
                                    &FcmpImm::LessThanOrEqual,
                                );
                                let v2044 = &C::xmm_to_xmm_mem(ctx, v2041);
                                let v2045 = constructor_x64_cvttps2dq(ctx, v2044);
                                let v2046 = &C::xmm_to_xmm_mem(ctx, v2043);
                                let v2047 = constructor_x64_pxor(ctx, v2045, v2046);
                                let v2048 = constructor_xmm_zero(ctx, I32X4);
                                let v2049 = constructor_lower_vec_smax(ctx, I32X4, v2047, v2048);
                                let v2050 = &C::xmm_to_xmm_mem(ctx, v2039);
                                let v2051 = constructor_x64_paddd(ctx, v2049, v2050);
                                let v2052 = constructor_output_xmm(ctx, v2051);
                                // Rule at src/isa/x64/lower.isle line 3627.
                                return Some(v2052);
                            }
                        }
                        let v655 = C::value_type(ctx, v381);
                        let v2005 = C::ty_scalar_float(ctx, v655);
                        if let Some(v2006) = v2005 {
                            let v2009 = constructor_cvt_float_to_uint_seq(ctx, v3, v381, true);
                            let v2010 = constructor_output_gpr(ctx, v2009);
                            // Rule at src/isa/x64/lower.isle line 3546.
                            return Some(v2010);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v655 = C::value_type(ctx, v381);
                            if v655 == F32X4 {
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v1441 = &C::xmm_to_xmm_mem(ctx, v544);
                                let v2015 =
                                    constructor_x64_cmpps(ctx, v544, v1441, &FcmpImm::Equal);
                                let v2016 = &C::xmm_to_xmm_mem(ctx, v2015);
                                let v2017 = constructor_x64_andps(ctx, v544, v2016);
                                let v2018 = &C::xmm_to_xmm_mem(ctx, v2017);
                                let v2019 = constructor_x64_pxor(ctx, v2015, v2018);
                                let v2020 = &C::xmm_to_xmm_mem(ctx, v2017);
                                let v2021 = constructor_x64_cvttps2dq(ctx, v2020);
                                let v2022 = &C::xmm_to_xmm_mem(ctx, v2019);
                                let v2023 = constructor_x64_pand(ctx, v2021, v2022);
                                let v2024 = &C::xmi_imm(ctx, 0x1F);
                                let v2025 = constructor_x64_psrad(ctx, v2023, v2024);
                                let v2026 = &C::xmm_to_xmm_mem(ctx, v2021);
                                let v2027 = constructor_x64_pxor(ctx, v2025, v2026);
                                let v2028 = constructor_output_xmm(ctx, v2027);
                                // Rule at src/isa/x64/lower.isle line 3556.
                                return Some(v2028);
                            }
                        }
                        let v655 = C::value_type(ctx, v381);
                        let v2005 = C::ty_scalar_float(ctx, v655);
                        if let Some(v2006) = v2005 {
                            let v2013 = constructor_cvt_float_to_sint_seq(ctx, v3, v381, true);
                            let v2014 = constructor_output_gpr(ctx, v2013);
                            // Rule at src/isa/x64/lower.isle line 3552.
                            return Some(v2014);
                        }
                    }
                }
                &Opcode::X86Cvtt2dq => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v655 = C::value_type(ctx, v381);
                            if v655 == F32X4 {
                                let v541 = &C::put_in_xmm_mem(ctx, v381);
                                let v2053 = constructor_x64_cvttps2dq(ctx, v541);
                                let v2054 = constructor_output_xmm(ctx, v2053);
                                // Rule at src/isa/x64/lower.isle line 3674.
                                return Some(v2054);
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v655 = C::value_type(ctx, v381);
                                let v1942 = C::fits_in_32(ctx, v655);
                                if let Some(v1943) = v1942 {
                                    let v1944 = C::ty_int(ctx, v1943);
                                    if let Some(v1945) = v1944 {
                                        let v1427 = constructor_xmm_zero(ctx, F32X4);
                                        let v1946 = constructor_extend_to_gpr(
                                            ctx,
                                            v381,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1947 = &C::gpr_to_gpr_mem(ctx, v1946);
                                        let v1948 =
                                            constructor_x64_cvtsi2ss(ctx, I64, v1427, v1947);
                                        let v1949 = constructor_output_xmm(ctx, v1948);
                                        // Rule at src/isa/x64/lower.isle line 3431.
                                        return Some(v1949);
                                    }
                                }
                            }
                            F64 => {
                                let v655 = C::value_type(ctx, v381);
                                let v1942 = C::fits_in_32(ctx, v655);
                                if let Some(v1943) = v1942 {
                                    let v1944 = C::ty_int(ctx, v1943);
                                    if let Some(v1945) = v1944 {
                                        let v1432 = constructor_xmm_zero(ctx, F64X2);
                                        let v1946 = constructor_extend_to_gpr(
                                            ctx,
                                            v381,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1947 = &C::gpr_to_gpr_mem(ctx, v1946);
                                        let v1950 =
                                            constructor_x64_cvtsi2sd(ctx, I64, v1432, v1947);
                                        let v1951 = constructor_output_xmm(ctx, v1950);
                                        // Rule at src/isa/x64/lower.isle line 3434.
                                        return Some(v1951);
                                    }
                                }
                            }
                            F32X4 => {
                                let v332 = C::use_avx512vl(ctx);
                                if v332 == true {
                                    let v333 = C::use_avx512f(ctx);
                                    if v333 == true {
                                        let v541 = &C::put_in_xmm_mem(ctx, v381);
                                        let v1985 = constructor_x64_vcvtudq2ps(ctx, v541);
                                        let v1986 = constructor_output_xmm(ctx, v1985);
                                        // Rule at src/isa/x64/lower.isle line 3491.
                                        return Some(v1986);
                                    }
                                }
                                let v544 = constructor_put_in_xmm(ctx, v381);
                                let v1988 = &C::xmi_imm(ctx, 0x10);
                                let v1989 = constructor_x64_pslld(ctx, v544, v1988);
                                let v1990 = &C::xmi_imm(ctx, 0x10);
                                let v1991 = constructor_x64_psrld(ctx, v1989, v1990);
                                let v1992 = &C::xmm_to_xmm_mem(ctx, v1991);
                                let v1993 = constructor_x64_psubd(ctx, v544, v1992);
                                let v1994 = &C::xmm_to_xmm_mem(ctx, v1991);
                                let v1995 = constructor_x64_cvtdq2ps(ctx, v1994);
                                let v1996 = &C::xmi_imm(ctx, 0x1);
                                let v1997 = constructor_x64_psrld(ctx, v1993, v1996);
                                let v1998 = &C::xmm_to_xmm_mem(ctx, v1997);
                                let v1999 = constructor_x64_cvtdq2ps(ctx, v1998);
                                let v2000 = &C::xmm_to_xmm_mem(ctx, v1999);
                                let v2001 = constructor_x64_addps(ctx, v1999, v2000);
                                let v2002 = &C::xmm_to_xmm_mem(ctx, v1995);
                                let v2003 = constructor_x64_addps(ctx, v2001, v2002);
                                let v2004 = constructor_output_xmm(ctx, v2003);
                                // Rule at src/isa/x64/lower.isle line 3519.
                                return Some(v2004);
                            }
                            F64X2 => {
                                let v1933 = C::def_inst(ctx, v381);
                                if let Some(v1934) = v1933 {
                                    let v1935 = &C::inst_data(ctx, v1934);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1936,
                                        arg: v1937,
                                    } = v1935
                                    {
                                        if let &Opcode::UwidenLow = v1936 {
                                            let v1938 = C::value_type(ctx, v1937);
                                            if v1938 == I32X4 {
                                                let v1977 =
                                                    C::emit_u128_le_const(ctx, 0x4330000043300000);
                                                let v1978 =
                                                    &constructor_const_to_xmm_mem(ctx, v1977);
                                                let v1979 = constructor_put_in_xmm(ctx, v1937);
                                                let v1980 =
                                                    constructor_x64_unpcklps(ctx, v1979, v1978);
                                                let v1981 = C::emit_u128_le_const(
                                                    ctx,
                                                    0x43300000000000004330000000000000,
                                                );
                                                let v1982 =
                                                    &constructor_const_to_xmm_mem(ctx, v1981);
                                                let v1983 =
                                                    constructor_x64_subpd(ctx, v1980, v1982);
                                                let v1984 = constructor_output_xmm(ctx, v1983);
                                                // Rule at src/isa/x64/lower.isle line 3483.
                                                return Some(v1984);
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v655 = C::value_type(ctx, v381);
                        match v655 {
                            I64 => {
                                let v382 = constructor_put_in_gpr(ctx, v381);
                                let v1952 = constructor_cvt_u64_to_float_seq(ctx, v3, v382);
                                let v1953 = constructor_output_xmm(ctx, v1952);
                                // Rule at src/isa/x64/lower.isle line 3437.
                                return Some(v1953);
                            }
                            I64X2 => {
                                if v3 == F64X2 {
                                    let v1955 =
                                        C::emit_u128_le_const(ctx, 0xFFFFFFFF00000000FFFFFFFF);
                                    let v1956 = &constructor_const_to_xmm_mem(ctx, v1955);
                                    let v1958 = C::emit_u128_le_const(
                                        ctx,
                                        0x43300000000000004330000000000000,
                                    );
                                    let v1959 = &constructor_const_to_xmm_mem(ctx, v1958);
                                    let v1961 = C::emit_u128_le_const(
                                        ctx,
                                        0x45300000000000004530000000000000,
                                    );
                                    let v1962 = &constructor_const_to_xmm_mem(ctx, v1961);
                                    let v1964 = C::emit_u128_le_const(
                                        ctx,
                                        0x45300000001000004530000000100000,
                                    );
                                    let v1965 = &constructor_const_to_xmm_mem(ctx, v1964);
                                    let v1966 = constructor_put_in_xmm(ctx, v381);
                                    let v1967 = constructor_x64_pand(ctx, v1966, v1956);
                                    let v1968 = constructor_x64_por(ctx, v1967, v1959);
                                    let v1969 = constructor_put_in_xmm(ctx, v381);
                                    let v489 = &C::xmi_imm(ctx, 0x20);
                                    let v1970 = constructor_x64_psrlq(ctx, v1969, v489);
                                    let v1971 = constructor_x64_por(ctx, v1970, v1962);
                                    let v1972 = constructor_x64_subpd(ctx, v1971, v1965);
                                    let v1973 = &C::xmm_to_xmm_mem(ctx, v1972);
                                    let v1974 = constructor_x64_addpd(ctx, v1968, v1973);
                                    let v1975 = constructor_output_xmm(ctx, v1974);
                                    // Rule at src/isa/x64/lower.isle line 3468.
                                    return Some(v1975);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v655 = C::value_type(ctx, v381);
                                match v655 {
                                    I8 => {
                                        let v1427 = constructor_xmm_zero(ctx, F32X4);
                                        let v1905 = constructor_extend_to_gpr(
                                            ctx,
                                            v381,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1906 = &C::gpr_to_gpr_mem(ctx, v1905);
                                        let v1907 =
                                            constructor_x64_cvtsi2ss(ctx, I32, v1427, v1906);
                                        let v1908 = constructor_output_xmm(ctx, v1907);
                                        // Rule at src/isa/x64/lower.isle line 3393.
                                        return Some(v1908);
                                    }
                                    I16 => {
                                        let v1427 = constructor_xmm_zero(ctx, F32X4);
                                        let v1905 = constructor_extend_to_gpr(
                                            ctx,
                                            v381,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1906 = &C::gpr_to_gpr_mem(ctx, v1905);
                                        let v1907 =
                                            constructor_x64_cvtsi2ss(ctx, I32, v1427, v1906);
                                        let v1908 = constructor_output_xmm(ctx, v1907);
                                        // Rule at src/isa/x64/lower.isle line 3396.
                                        return Some(v1908);
                                    }
                                    _ => {}
                                }
                                let v1909 = C::ty_int(ctx, v655);
                                if let Some(v1910) = v1909 {
                                    let v1911 = C::fits_in_64(ctx, v1910);
                                    if let Some(v1912) = v1911 {
                                        let v1427 = constructor_xmm_zero(ctx, F32X4);
                                        let v1913 = &constructor_put_in_gpr_mem(ctx, v381);
                                        let v1914 =
                                            constructor_x64_cvtsi2ss(ctx, v1912, v1427, v1913);
                                        let v1915 = constructor_output_xmm(ctx, v1914);
                                        // Rule at src/isa/x64/lower.isle line 3399.
                                        return Some(v1915);
                                    }
                                }
                            }
                            F64 => {
                                let v655 = C::value_type(ctx, v381);
                                match v655 {
                                    I8 => {
                                        let v1432 = constructor_xmm_zero(ctx, F64X2);
                                        let v1905 = constructor_extend_to_gpr(
                                            ctx,
                                            v381,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1906 = &C::gpr_to_gpr_mem(ctx, v1905);
                                        let v1916 =
                                            constructor_x64_cvtsi2sd(ctx, I32, v1432, v1906);
                                        let v1917 = constructor_output_xmm(ctx, v1916);
                                        // Rule at src/isa/x64/lower.isle line 3402.
                                        return Some(v1917);
                                    }
                                    I16 => {
                                        let v1432 = constructor_xmm_zero(ctx, F64X2);
                                        let v1905 = constructor_extend_to_gpr(
                                            ctx,
                                            v381,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1906 = &C::gpr_to_gpr_mem(ctx, v1905);
                                        let v1916 =
                                            constructor_x64_cvtsi2sd(ctx, I32, v1432, v1906);
                                        let v1917 = constructor_output_xmm(ctx, v1916);
                                        // Rule at src/isa/x64/lower.isle line 3405.
                                        return Some(v1917);
                                    }
                                    _ => {}
                                }
                                let v1909 = C::ty_int(ctx, v655);
                                if let Some(v1910) = v1909 {
                                    let v1911 = C::fits_in_64(ctx, v1910);
                                    if let Some(v1912) = v1911 {
                                        let v1432 = constructor_xmm_zero(ctx, F64X2);
                                        let v1913 = &constructor_put_in_gpr_mem(ctx, v381);
                                        let v1918 =
                                            constructor_x64_cvtsi2sd(ctx, v1912, v1432, v1913);
                                        let v1919 = constructor_output_xmm(ctx, v1918);
                                        // Rule at src/isa/x64/lower.isle line 3408.
                                        return Some(v1919);
                                    }
                                }
                            }
                            F64X2 => {
                                let v1933 = C::def_inst(ctx, v381);
                                if let Some(v1934) = v1933 {
                                    let v1935 = &C::inst_data(ctx, v1934);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1936,
                                        arg: v1937,
                                    } = v1935
                                    {
                                        if let &Opcode::SwidenLow = v1936 {
                                            let v1938 = C::value_type(ctx, v1937);
                                            if v1938 == I32X4 {
                                                let v1939 = &C::put_in_xmm_mem(ctx, v1937);
                                                let v1940 = constructor_x64_cvtdq2pd(ctx, v1939);
                                                let v1941 = constructor_output_xmm(ctx, v1940);
                                                // Rule at src/isa/x64/lower.isle line 3426.
                                                return Some(v1941);
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v655 = C::value_type(ctx, v381);
                    match v655 {
                        I32X4 => {
                            let v541 = &C::put_in_xmm_mem(ctx, v381);
                            let v1920 = constructor_x64_cvtdq2ps(ctx, v541);
                            let v1921 = constructor_output_xmm(ctx, v1920);
                            // Rule at src/isa/x64/lower.isle line 3411.
                            return Some(v1921);
                        }
                        I64X2 => {
                            let v544 = constructor_put_in_xmm(ctx, v381);
                            let v1922 = constructor_xmm_zero(ctx, F64X2);
                            let v1923 = constructor_x64_movq_to_gpr(ctx, v544);
                            let v1924 = &C::gpr_to_gpr_mem(ctx, v1923);
                            let v1925 = constructor_x64_cvtsi2sd(ctx, I64, v1922, v1924);
                            let v574 = &C::xmm_to_xmm_mem(ctx, v544);
                            let v1926 = constructor_x64_pshufd(ctx, v574, 0xEE);
                            let v1927 = constructor_x64_movq_to_gpr(ctx, v1926);
                            let v1928 = &C::gpr_to_gpr_mem(ctx, v1927);
                            let v1929 = constructor_x64_cvtsi2sd(ctx, I64, v1922, v1928);
                            let v1930 = &C::xmm_to_xmm_mem(ctx, v1929);
                            let v1931 = constructor_x64_unpcklpd(ctx, v1925, v1930);
                            let v1932 = constructor_output_xmm(ctx, v1931);
                            // Rule at src/isa/x64/lower.isle line 3417.
                            return Some(v1932);
                        }
                        _ => {}
                    }
                }
                &Opcode::Isplit => {
                    let v655 = C::value_type(ctx, v381);
                    if v655 == I128 {
                        let v385 = C::put_in_regs(ctx, v381);
                        let v2678 = C::value_regs_get(ctx, v385, 0x0);
                        let v2679 = C::value_regs_get(ctx, v385, 0x1);
                        let v2680 = C::value_reg(ctx, v2678);
                        let v2681 = C::value_reg(ctx, v2679);
                        let v2682 = C::output_pair(ctx, v2680, v2681);
                        // Rule at src/isa/x64/lower.isle line 4702.
                        return Some(v2682);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v2385,
            constant_handle: v2386,
        } => {
            if let &Opcode::Vconst = v2385 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v2390 = C::u128_from_constant(ctx, v2386);
                    if let Some(v2391) = v2390 {
                        if v2391 == 0x0 {
                            let v2392 = constructor_xmm_uninit_value(ctx);
                            let v2393 = &C::xmm_to_xmm_mem(ctx, v2392);
                            let v2394 = constructor_x64_pxor(ctx, v2392, v2393);
                            let v2395 = constructor_output_xmm(ctx, v2394);
                            // Rule at src/isa/x64/lower.isle line 4272.
                            return Some(v2395);
                        }
                    }
                    let v2387 = C::const_to_vconst(ctx, v2386);
                    let v3 = C::value_type(ctx, v2);
                    let v2388 = constructor_x64_xmm_load_const(ctx, v3, v2387);
                    let v2389 = constructor_output_xmm(ctx, v2388);
                    // Rule at src/isa/x64/lower.isle line 4267.
                    return Some(v2389);
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1801,
            global_value: v1802,
        } => {
            match v1801 {
                &Opcode::SymbolValue => {
                    let v1803 = C::symbol_value_data(ctx, v1802);
                    if let Some(v1804) = v1803 {
                        let v1808 = constructor_load_ext_name(ctx, v1804.0, v1804.2, v1804.1);
                        let v1809 = constructor_output_reg(ctx, v1808);
                        // Rule at src/isa/x64/lower.isle line 3223.
                        return Some(v1809);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1803 = C::symbol_value_data(ctx, v1802);
                        if let Some(v1804) = v1803 {
                            let v3 = C::value_type(ctx, v2);
                            let v2683 = &C::tls_model(ctx, v3);
                            match v2683 {
                                &TlsModel::ElfGd => {
                                    let v2684 = constructor_elf_tls_get_addr(ctx, v1804.0);
                                    let v2685 = constructor_output_gpr(ctx, v2684);
                                    // Rule at src/isa/x64/lower.isle line 4710.
                                    return Some(v2685);
                                }
                                &TlsModel::Macho => {
                                    let v2686 = constructor_macho_tls_get_addr(ctx, v1804.0);
                                    let v2687 = constructor_output_gpr(ctx, v2686);
                                    // Rule at src/isa/x64/lower.isle line 4713.
                                    return Some(v2687);
                                }
                                &TlsModel::Coff => {
                                    let v2688 = constructor_coff_tls_get_addr(ctx, v1804.0);
                                    let v2689 = constructor_output_gpr(ctx, v2688);
                                    // Rule at src/isa/x64/lower.isle line 4716.
                                    return Some(v2689);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v18,
            imm: v19,
        } => {
            if let &Opcode::F32const = v18 {
                let v20 = C::u32_from_ieee32(ctx, v19);
                let v22 = C::u32_as_u64(ctx, v20);
                let v23 = constructor_imm(ctx, F32, v22);
                let v24 = constructor_output_reg(ctx, v23);
                // Rule at src/isa/x64/lower.isle line 27.
                return Some(v24);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v25,
            imm: v26,
        } => {
            if let &Opcode::F64const = v25 {
                let v27 = C::u64_from_ieee64(ctx, v26);
                let v29 = constructor_imm(ctx, F64, v27);
                let v30 = constructor_output_reg(ctx, v29);
                // Rule at src/isa/x64/lower.isle line 32.
                return Some(v30);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } => {
            if let &Opcode::Iconst = v7 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v13 = constructor_imm(ctx, I64, v9);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v16 = C::value_regs(ctx, v13, v15);
                        let v17 = C::output(ctx, v16);
                        // Rule at src/isa/x64/lower.isle line 20.
                        return Some(v17);
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v10 = constructor_imm(ctx, v5, v9);
                        let v11 = constructor_output_reg(ctx, v10);
                        // Rule at src/isa/x64/lower.isle line 15.
                        return Some(v11);
                    }
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v55,
            arg: v56,
            table: v57,
        } => {
            if let &Opcode::BrTable = v55 {
                let v59 = C::jump_table_targets(ctx, arg1);
                if let Some(v60) = v59 {
                    let v58 = C::value_type(ctx, v56);
                    let v63 = &C::raw_operand_size_of_type(ctx, v58);
                    let v64 = C::jump_table_size(ctx, &v60.1);
                    let v65 = C::u32_as_u64(ctx, v64);
                    let v66 = constructor_imm(ctx, v58, v65);
                    let v69 = constructor_extend_to_gpr(ctx, v56, I64, &ExtendKind::Zero);
                    let v70 = &constructor_reg_to_gpr_mem_imm(ctx, v66);
                    let v71 = &constructor_x64_cmp(ctx, v63, v69, v70);
                    let v73 = &C::gpr_to_gpr_mem(ctx, v69);
                    let v74 = C::gpr_new(ctx, v66);
                    let v75 = &constructor_cmove(ctx, v58, &CC::B, v73, v74);
                    let v76 = constructor_with_flags_reg(ctx, v71, v75);
                    let v77 = C::gpr_new(ctx, v76);
                    let v78 = &constructor_jmp_table_seq(ctx, v58, v77, v60.0, &v60.1);
                    let v79 = constructor_emit_side_effect(ctx, v78);
                    // Rule at src/isa/x64/lower.isle line 3350.
                    return Some(v79);
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v9,
            arg: v10,
            blocks: ref v11,
        } => {
            if let &Opcode::Brif = v9 {
                let v26 = C::two_targets(ctx, arg1);
                if let Some(v27) = v26 {
                    let v12 = C::maybe_uextend(ctx, v10);
                    if let Some(v13) = v12 {
                        let v14 = C::def_inst(ctx, v13);
                        if let Some(v15) = v14 {
                            let v16 = &C::inst_data(ctx, v15);
                            match v16 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v33,
                                    args: ref v34,
                                    cond: ref v35,
                                } => {
                                    if let &Opcode::Fcmp = v33 {
                                        let v36 = C::unpack_value_array_2(ctx, v34);
                                        let v39 = &constructor_emit_fcmp(ctx, v35, v36.0, v36.1);
                                        let v40 =
                                            &constructor_jmp_cond_fcmp(ctx, v39, v27.0, v27.1);
                                        let v41 = constructor_emit_side_effect(ctx, v40);
                                        // Rule at src/isa/x64/lower.isle line 3313.
                                        return Some(v41);
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v17,
                                    args: ref v18,
                                    cond: ref v19,
                                } => {
                                    if let &Opcode::Icmp = v17 {
                                        let v20 = C::unpack_value_array_2(ctx, v18);
                                        let v30 = &constructor_emit_cmp(ctx, v19, v20.0, v20.1);
                                        let v31 =
                                            &constructor_jmp_cond_icmp(ctx, v30, v27.0, v27.1);
                                        let v32 = constructor_emit_side_effect(ctx, v31);
                                        // Rule at src/isa/x64/lower.isle line 3310.
                                        return Some(v32);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v42 = C::value_type(ctx, v10);
                    if v42 == I128 {
                        let v44 = C::put_in_regs(ctx, v10);
                        let v45 = &constructor_cmp_zero_i128(ctx, &CC::Z, v44);
                        let v46 = &constructor_jmp_cond_icmp(ctx, v45, v27.0, v27.1);
                        let v47 = constructor_emit_side_effect(ctx, v46);
                        // Rule at src/isa/x64/lower.isle line 3316.
                        return Some(v47);
                    }
                    let v48 = C::ty_int_bool_or_ref(ctx, v42);
                    if let Some(v49) = v48 {
                        let v50 = &constructor_cmp_zero_int_bool_ref(ctx, v10);
                        let v52 = &constructor_jmp_cond(ctx, &CC::NZ, v27.0, v27.1);
                        let v53 = &constructor_with_flags_side_effect(ctx, v50, v52);
                        let v54 = constructor_emit_side_effect(ctx, v53);
                        // Rule at src/isa/x64/lower.isle line 3320.
                        return Some(v54);
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jmp_known(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    // Rule at src/isa/x64/lower.isle line 3305.
                    return Some(v8);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term construct_overflow_op.
pub fn constructor_construct_overflow_op<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &ProducesFlags,
) -> InstOutput {
    let v2 = &constructor_x64_setcc_paired(ctx, arg0);
    let v3 = constructor_with_flags(ctx, arg1, v2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v6 = C::value_reg(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = C::value_reg(ctx, v8);
    let v10 = C::output_pair(ctx, v6, v9);
    // Rule at src/isa/x64/lower.isle line 104.
    return v10;
}

// Generated as internal constructor for term construct_overflow_op_alu.
pub fn constructor_construct_overflow_op_alu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &AluRmiROpcode,
    arg3: Gpr,
    arg4: &GprMemImm,
) -> InstOutput {
    let v5 = &constructor_x64_alurmi_with_flags_paired(ctx, arg2, arg0, arg3, arg4);
    let v6 = constructor_construct_overflow_op(ctx, arg1, v5);
    // Rule at src/isa/x64/lower.isle line 111.
    return v6;
}

// Generated as internal constructor for term construct_overflow_op_alu_128.
pub fn constructor_construct_overflow_op_alu_128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &AluRmiROpcode,
    arg2: &AluRmiROpcode,
    arg3: Value,
    arg4: Value,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg3);
    let v7 = constructor_value_regs_get_gpr(ctx, v5, 0x0);
    let v9 = constructor_value_regs_get_gpr(ctx, v5, 0x1);
    let v10 = C::put_in_regs(ctx, arg4);
    let v11 = constructor_value_regs_get_gpr(ctx, v10, 0x0);
    let v12 = constructor_value_regs_get_gpr(ctx, v10, 0x1);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
    let v15 = &constructor_x64_alurmi_with_flags_paired(ctx, arg1, I64, v7, v14);
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, v12);
    let v17 = &constructor_x64_alurmi_with_flags_chained(ctx, arg2, I64, v9, v16);
    let v18 = &constructor_x64_setcc_paired(ctx, arg0);
    let v19 = &constructor_with_flags_chained(ctx, v15, v17, v18);
    let v20 = constructor_multi_reg_to_pair_and_single(ctx, v19);
    // Rule at src/isa/x64/lower.isle line 119.
    return v20;
}

// Generated as internal constructor for term sse_and.
pub fn constructor_sse_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 295.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 296.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 293.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 294.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pand(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 297.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and", "src/isa/x64/lower.isle line 292"
    )
}

// Generated as internal constructor for term and_i128.
pub fn constructor_and_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_and(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_and(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 306.
    return v13;
}

// Generated as internal constructor for term sse_and_not.
pub fn constructor_sse_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v3 = constructor_x64_andnps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 324.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andnpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 325.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pandn(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 326.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and_not", "src/isa/x64/lower.isle line 323"
    )
}

// Generated as internal constructor for term val_minus_one.
pub fn constructor_val_minus_one<C: Context>(ctx: &mut C, arg0: Value) -> Option<Value> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::Binary {
            opcode: ref v4,
            args: ref v5,
        } = v3
        {
            match v4 {
                &Opcode::Iadd => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v17 = C::i64_from_iconst(ctx, v6.0);
                    if let Some(v18) = v17 {
                        if v18 == -0x1 {
                            // Rule at src/isa/x64/lower.isle line 355.
                            return Some(v6.1);
                        }
                    }
                    let v15 = C::i64_from_iconst(ctx, v6.1);
                    if let Some(v16) = v15 {
                        if v16 == -0x1 {
                            // Rule at src/isa/x64/lower.isle line 354.
                            return Some(v6.0);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v9 = C::def_inst(ctx, v6.1);
                    if let Some(v10) = v9 {
                        let v11 = &C::inst_data(ctx, v10);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v12,
                            imm: v13,
                        } = v11
                        {
                            if let &Opcode::Iconst = v12 {
                                let v14 = C::u64_from_imm64(ctx, v13);
                                if v14 == 0x1 {
                                    // Rule at src/isa/x64/lower.isle line 353.
                                    return Some(v6.0);
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    None
}

// Generated as internal constructor for term sse_or.
pub fn constructor_sse_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 419.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 420.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 417.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 418.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_por(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 421.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_or", "src/isa/x64/lower.isle line 416"
    )
}

// Generated as internal constructor for term or_i128.
pub fn constructor_or_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: ValueRegs) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_or(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_or(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 430.
    return v13;
}

// Generated as internal constructor for term shl_i128.
pub fn constructor_shl_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shl(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shl(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shr(ctx, I64, v3, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v10);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v8);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v20);
    let v39 = &C::gpr_to_gpr_mem(ctx, v32);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v8);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 504.
    return v42;
}

// Generated as internal constructor for term ishl_i8x16_mask.
pub fn constructor_ishl_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ishl_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0x0,
                base: v6,
                index: v10,
                shift: 0x0,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src/isa/x64/lower.isle line 578.
            return v15.clone();
        }
        &RegMemImm::Mem { addr: ref v16 } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg { reg: v18 };
            let v20 = &constructor_ishl_i8x16_mask(ctx, &v19);
            // Rule at src/isa/x64/lower.isle line 589.
            return v20.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ishl_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 569.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ishl_i8x16_mask", "src/isa/x64/lower.isle line 563"
    )
}

// Generated as internal constructor for term shr_i128.
pub fn constructor_shr_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shr(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v8);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v32);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v10);
    let v39 = &C::gpr_to_gpr_mem(ctx, v10);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v20);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 614.
    return v42;
}

// Generated as internal constructor for term ushr_i8x16_mask.
pub fn constructor_ushr_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ushr_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0x0,
                base: v6,
                index: v10,
                shift: 0x0,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src/isa/x64/lower.isle line 683.
            return v15.clone();
        }
        &RegMemImm::Mem { addr: ref v16 } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg { reg: v18 };
            let v20 = &constructor_ushr_i8x16_mask(ctx, &v19);
            // Rule at src/isa/x64/lower.isle line 695.
            return v20.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ushr_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 674.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ushr_i8x16_mask", "src/isa/x64/lower.isle line 668"
    )
}

// Generated as internal constructor for term mask_xmm_shift.
pub fn constructor_mask_xmm_shift<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> RegMemImm {
    let v11 = C::def_inst(ctx, arg1);
    if let Some(v12) = v11 {
        let v13 = &C::inst_data(ctx, v12);
        if let &InstructionData::UnaryImm {
            opcode: ref v14,
            imm: v15,
        } = v13
        {
            if let &Opcode::Iconst = v14 {
                let v16 = C::shift_amount_masked(ctx, arg0, v15);
                let v17 = C::u8_as_u32(ctx, v16);
                let v18 = RegMemImm::Imm { simm32: v17 };
                // Rule at src/isa/x64/lower.isle line 712.
                return v18;
            }
        }
    }
    let v3 = constructor_put_in_gpr(ctx, arg1);
    let v4 = C::shift_mask(ctx, arg0);
    let v5 = C::u8_as_u32(ctx, v4);
    let v6 = RegMemImm::Imm { simm32: v5 };
    let v7 = &C::gpr_mem_imm_new(ctx, &v6);
    let v8 = constructor_x64_and(ctx, I64, v3, v7);
    let v9 = C::gpr_to_reg(ctx, v8);
    let v10 = &C::reg_to_reg_mem_imm(ctx, v9);
    // Rule at src/isa/x64/lower.isle line 710.
    return v10.clone();
}

// Generated as internal constructor for term sar_i128.
pub fn constructor_sar_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_sar(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v20 = RegMemImm::Imm { simm32: 0x7F };
    let v21 = &C::gpr_mem_imm_new(ctx, &v20);
    let v22 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v21);
    let v25 = constructor_imm(ctx, I64, 0x0);
    let v26 = &C::reg_to_gpr_mem(ctx, v25);
    let v27 = &constructor_cmove(ctx, I64, &CC::Z, v26, v17);
    let v28 = constructor_with_flags_reg(ctx, v22, v27);
    let v29 = C::gpr_new(ctx, v28);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
    let v31 = constructor_x64_or(ctx, I64, v8, v30);
    let v33 = &C::imm8_to_imm8_gpr(ctx, 0x3F);
    let v34 = constructor_x64_sar(ctx, I64, v5, v33);
    let v36 = RegMemImm::Imm { simm32: 0x40 };
    let v37 = &C::gpr_mem_imm_new(ctx, &v36);
    let v38 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v37);
    let v39 = &C::gpr_to_gpr_mem(ctx, v31);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v10);
    let v41 = &C::gpr_to_gpr_mem(ctx, v10);
    let v42 = &constructor_cmove(ctx, I64, &CC::Z, v41, v34);
    let v43 = &constructor_consumes_flags_concat(ctx, v40, v42);
    let v44 = constructor_with_flags(ctx, v38, v43);
    // Rule at src/isa/x64/lower.isle line 726.
    return v44;
}

// Generated as internal constructor for term sshr_i8x16_bigger_shift.
pub fn constructor_sshr_i8x16_bigger_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMemImm,
) -> XmmMemImm {
    match arg1 {
        &RegMemImm::Reg { reg: v7 } => {
            let v8 = C::gpr_new(ctx, v7);
            let v9 = RegMemImm::Imm { simm32: 0x8 };
            let v10 = &C::gpr_mem_imm_new(ctx, &v9);
            let v11 = constructor_x64_add(ctx, arg0, v8, v10);
            let v12 = C::gpr_to_reg(ctx, v11);
            let v13 = RegMemImm::Reg { reg: v12 };
            let v14 = &constructor_mov_rmi_to_xmm(ctx, &v13);
            // Rule at src/isa/x64/lower.isle line 794.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_imm(ctx, arg0, 0x8);
            let v18 = C::gpr_new(ctx, v17);
            let v19 = &C::gpr_mem_imm_new(ctx, arg1);
            let v20 = constructor_x64_add(ctx, arg0, v18, v19);
            let v21 = C::gpr_to_reg(ctx, v20);
            let v22 = RegMemImm::Reg { reg: v21 };
            let v23 = &constructor_mov_rmi_to_xmm(ctx, &v22);
            // Rule at src/isa/x64/lower.isle line 798.
            return v23.clone();
        }
        &RegMemImm::Imm { simm32: v2 } => {
            let v4 = C::u32_add(ctx, v2, 0x8);
            let v5 = RegMemImm::Imm { simm32: v4 };
            let v6 = &C::xmm_mem_imm_new(ctx, &v5);
            // Rule at src/isa/x64/lower.isle line 792.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sshr_i8x16_bigger_shift", "src/isa/x64/lower.isle line 791"
    )
}

// Generated as internal constructor for term lower_i64x2_sshr_imm.
pub fn constructor_lower_i64x2_sshr_imm<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u32) -> Xmm {
    let v2 = C::u32_as_u64(ctx, arg1);
    let v4 = C::u64_lt(ctx, v2, 0x20);
    if v4 == true {
        let v5 = &C::xmi_imm(ctx, arg1);
        let v6 = constructor_x64_psrad(ctx, arg0, v5);
        let v7 = &C::xmm_to_xmm_mem(ctx, v6);
        let v9 = constructor_x64_pshufd(ctx, v7, 0xED);
        let v10 = &C::xmi_imm(ctx, arg1);
        let v11 = constructor_x64_psrlq(ctx, arg0, v10);
        let v12 = &C::xmm_to_xmm_mem(ctx, v11);
        let v14 = constructor_x64_pshufd(ctx, v12, 0xE8);
        let v15 = &C::xmm_to_xmm_mem(ctx, v9);
        let v16 = constructor_x64_punpckldq(ctx, v14, v15);
        // Rule at src/isa/x64/lower.isle line 837.
        return v16;
    }
    if arg1 == 0x20 {
        let v17 = &C::xmm_to_xmm_mem(ctx, arg0);
        let v18 = constructor_x64_pshufd(ctx, v17, 0xED);
        let v20 = &C::xmi_imm(ctx, 0x1F);
        let v21 = constructor_x64_psrad(ctx, arg0, v20);
        let v22 = &C::xmm_to_xmm_mem(ctx, v21);
        let v23 = constructor_x64_pshufd(ctx, v22, 0xED);
        let v24 = &C::xmm_to_xmm_mem(ctx, v23);
        let v25 = constructor_x64_punpckldq(ctx, v18, v24);
        // Rule at src/isa/x64/lower.isle line 848.
        return v25;
    }
    let v26 = C::u64_lt(ctx, 0x20, v2);
    if v26 == true {
        let v27 = &C::xmi_imm(ctx, 0x1F);
        let v28 = constructor_x64_psrad(ctx, arg0, v27);
        let v29 = &C::xmm_to_xmm_mem(ctx, v28);
        let v30 = constructor_x64_pshufd(ctx, v29, 0xED);
        let v32 = C::u32_sub(ctx, arg1, 0x20);
        let v33 = &C::xmi_imm(ctx, v32);
        let v34 = constructor_x64_psrad(ctx, arg0, v33);
        let v35 = &C::xmm_to_xmm_mem(ctx, v34);
        let v36 = constructor_x64_pshufd(ctx, v35, 0xED);
        let v37 = &C::xmm_to_xmm_mem(ctx, v30);
        let v38 = constructor_x64_punpckldq(ctx, v36, v37);
        // Rule at src/isa/x64/lower.isle line 859.
        return v38;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_i64x2_sshr_imm", "src/isa/x64/lower.isle line 832"
    )
}

// Generated as internal constructor for term lower_i64x2_sshr_gpr.
pub fn constructor_lower_i64x2_sshr_gpr<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Gpr) -> Xmm {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v3 = constructor_x64_movq_to_xmm(ctx, v2);
    let v5 = constructor_flip_high_bit_mask(ctx, I64X2);
    let v6 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v7 = constructor_x64_psrlq(ctx, v5, v6);
    let v8 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v9 = constructor_x64_psrlq(ctx, arg0, v8);
    let v10 = &C::xmm_to_xmm_mem(ctx, v9);
    let v11 = constructor_x64_pxor(ctx, v7, v10);
    let v12 = &C::xmm_to_xmm_mem(ctx, v7);
    let v13 = constructor_x64_psubq(ctx, v11, v12);
    // Rule at src/isa/x64/lower.isle line 874.
    return v13;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v23 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
        let v25 = C::gpr_to_reg(ctx, v24);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::value_regs(ctx, v25, v26);
        // Rule at src/isa/x64/lower.isle line 1361.
        return v27;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v16 = constructor_value_regs_get_gpr(ctx, arg2, 0x1);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v16);
            let v19 = constructor_x64_or(ctx, I64, v8, v18);
            let v20 = C::gpr_to_reg(ctx, v19);
            let v21 = C::value_reg(ctx, v20);
            let v22 = constructor_lower_bmask(ctx, v2, I64, v21);
            // Rule at src/isa/x64/lower.isle line 1353.
            return v22;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v9 = &constructor_x64_neg_paired(ctx, v5, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v8);
            let v11 = &constructor_x64_sbb_paired(ctx, v2, v8, v10);
            let v12 = constructor_with_flags(ctx, v9, v11);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src/isa/x64/lower.isle line 1342.
            return v15;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/x64/lower.isle line 1330"
    )
}

// Generated as internal constructor for term i128_not.
pub fn constructor_i128_not<C: Context>(ctx: &mut C, arg0: Value) -> ValueRegs {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = constructor_value_regs_get_gpr(ctx, v1, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, v1, 0x1);
    let v7 = constructor_x64_not(ctx, I64, v3);
    let v8 = constructor_x64_not(ctx, I64, v5);
    let v9 = constructor_value_gprs(ctx, v7, v8);
    // Rule at src/isa/x64/lower.isle line 1384.
    return v9;
}

// Generated as internal constructor for term all_ones_or_all_zeros.
pub fn constructor_all_ones_or_all_zeros<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v16,
                args: ref v17,
                cond: ref v18,
            } => {
                if let &Opcode::Fcmp = v16 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1430.
                        return Some(true);
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1429.
                        return Some(true);
                    }
                }
            }
            &InstructionData::LoadNoOffset {
                opcode: ref v22,
                arg: v23,
                flags: v24,
            } => {
                if let &Opcode::Bitcast = v22 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v25 = C::def_inst(ctx, v23);
                        if let Some(v26) = v25 {
                            let v27 = &C::inst_data(ctx, v26);
                            if let &InstructionData::FloatCompare {
                                opcode: ref v28,
                                args: ref v29,
                                cond: ref v30,
                            } = v27
                            {
                                if let &Opcode::Fcmp = v28 {
                                    // Rule at src/isa/x64/lower.isle line 1431.
                                    return Some(true);
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v34,
                constant_handle: v35,
            } => {
                if let &Opcode::Vconst = v34 {
                    let v36 = C::vconst_all_ones_or_all_zeros(ctx, v35);
                    if let Some(v37) = v36 {
                        // Rule at src/isa/x64/lower.isle line 1432.
                        return Some(true);
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term insert_i8x16_lane_pshufd_imm.
pub fn constructor_insert_i8x16_lane_pshufd_imm<C: Context>(ctx: &mut C, arg0: u8) -> u8 {
    match arg0 {
        0x0 => {
            // Rule at src/isa/x64/lower.isle line 1531.
            return 0x54;
        }
        0x1 => {
            // Rule at src/isa/x64/lower.isle line 1532.
            return 0x51;
        }
        0x2 => {
            // Rule at src/isa/x64/lower.isle line 1533.
            return 0x45;
        }
        0x3 => {
            // Rule at src/isa/x64/lower.isle line 1534.
            return 0x15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_i8x16_lane_pshufd_imm", "src/isa/x64/lower.isle line 1530"
    )
}

// Generated as internal constructor for term f32x4_insertlane.
pub fn constructor_f32x4_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: u8,
) -> Xmm {
    let v3 = C::use_sse41(ctx);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
        let v5 = C::sse_insertps_lane_imm(ctx, arg2);
        let v6 = constructor_x64_insertps(ctx, arg0, v4, v5);
        // Rule at src/isa/x64/lower.isle line 1600.
        return v6;
    }
    match arg2 {
        0x0 => {
            let v7 = constructor_x64_movss_regmove(ctx, arg0, arg1);
            // Rule at src/isa/x64/lower.isle line 1609.
            return v7;
        }
        0x1 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v9 = constructor_x64_movlhps(ctx, arg1, v8);
            let v10 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v12 = constructor_x64_shufps(ctx, v9, v10, 0xE2);
            // Rule at src/isa/x64/lower.isle line 1615.
            return v12;
        }
        0x2 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v14 = constructor_x64_shufps(ctx, arg1, v8, 0x30);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v17 = constructor_x64_shufps(ctx, arg0, v15, 0x84);
            // Rule at src/isa/x64/lower.isle line 1622.
            return v17;
        }
        0x3 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v19 = constructor_x64_shufps(ctx, arg1, v8, 0xE4);
            let v20 = &C::xmm_to_xmm_mem(ctx, v19);
            let v22 = constructor_x64_shufps(ctx, arg0, v20, 0x24);
            // Rule at src/isa/x64/lower.isle line 1629.
            return v22;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "f32x4_insertlane", "src/isa/x64/lower.isle line 1597"
    )
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::put_in_reg(ctx, arg2);
        let v8 = C::put_in_reg(ctx, arg3);
        let v9 = C::gpr_new(ctx, v8);
        let v10 = &constructor_reg_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_cmp(ctx, v6, v9, v10);
        let v12 = &C::reg_to_gpr_mem(ctx, v8);
        let v13 = C::gpr_new(ctx, v7);
        let v14 = &constructor_cmove(ctx, v2, arg1, v12, v13);
        let v15 = constructor_with_flags_reg(ctx, v11, v14);
        let v16 = C::value_reg(ctx, v15);
        // Rule at src/isa/x64/lower.isle line 1654.
        return v16;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/x64/lower.isle line 1653"
    )
}

// Generated as internal constructor for term has_pmins.
pub fn constructor_has_pmins<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/x64/lower.isle line 1680.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1681.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1682.
    return v3;
}

// Generated as internal constructor for term has_pmaxs.
pub fn constructor_has_pmaxs<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/x64/lower.isle line 1685.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1686.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1687.
    return v3;
}

// Generated as internal constructor for term has_pmaxu.
pub fn constructor_has_pmaxu<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/x64/lower.isle line 1690.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1691.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1692.
    return v3;
}

// Generated as internal constructor for term has_pminu.
pub fn constructor_has_pminu<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/x64/lower.isle line 1695.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1696.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1697.
    return v3;
}

// Generated as internal constructor for term lower_vec_smax.
pub fn constructor_lower_vec_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v3 = constructor_has_pmaxs(ctx, arg0);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
        let v5 = constructor_x64_pmaxs(ctx, arg0, arg1, v4);
        // Rule at src/isa/x64/lower.isle line 1705.
        return v5;
    }
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v6 = constructor_x64_pcmpgt(ctx, arg0, arg1, v4);
    let v7 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v8 = constructor_x64_pand(ctx, v6, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v10 = constructor_x64_pandn(ctx, v6, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v10);
    let v12 = constructor_x64_por(ctx, v8, v11);
    // Rule at src/isa/x64/lower.isle line 1709.
    return v12;
}

// Generated as internal constructor for term flip_high_bit_mask.
pub fn constructor_flip_high_bit_mask<C: Context>(ctx: &mut C, arg0: Type) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
            let v3 = &constructor_const_to_xmm_mem(ctx, v2);
            let v4 = constructor_x64_movdqu_load(ctx, v3);
            // Rule at src/isa/x64/lower.isle line 1764.
            return v4;
        }
        I32X4 => {
            let v6 = C::emit_u128_le_const(ctx, 0x80000000800000008000000080000000);
            let v7 = &constructor_const_to_xmm_mem(ctx, v6);
            let v8 = constructor_x64_movdqu_load(ctx, v7);
            // Rule at src/isa/x64/lower.isle line 1766.
            return v8;
        }
        I64X2 => {
            let v10 = C::emit_u128_le_const(ctx, 0x80000000000000008000000000000000);
            let v11 = &constructor_const_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            // Rule at src/isa/x64/lower.isle line 1768.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flip_high_bit_mask", "src/isa/x64/lower.isle line 1763"
    )
}

// Generated as internal constructor for term lower_select_fcmp.
pub fn constructor_lower_select_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    match arg1 {
        &FcmpCondResult::Condition {
            producer: ref v2,
            cc: ref v3,
        } => {
            let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
            let v7 = constructor_with_flags(ctx, v2, v6);
            let v8 = C::output(ctx, v7);
            // Rule at src/isa/x64/lower.isle line 2087.
            return v8;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v9,
            cc1: ref v10,
            cc2: ref v11,
        } => {
            let v12 = &constructor_cmove_or_from_values(ctx, arg0, v10, v11, arg2, arg3);
            let v13 = constructor_with_flags(ctx, v9, v12);
            let v14 = C::output(ctx, v13);
            // Rule at src/isa/x64/lower.isle line 2089.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select_fcmp", "src/isa/x64/lower.isle line 2086"
    )
}

// Generated as internal constructor for term lower_select_icmp.
pub fn constructor_lower_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    if let &IcmpCondResult::Condition {
        producer: ref v2,
        cc: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags(ctx, v2, v6);
        let v8 = C::output(ctx, v7);
        // Rule at src/isa/x64/lower.isle line 2115.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select_icmp", "src/isa/x64/lower.isle line 2114"
    )
}

// Generated as internal constructor for term do_clz.
pub fn constructor_do_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v3 = C::use_lzcnt(ctx);
    if v3 == true {
        let v4 = constructor_x64_lzcnt(ctx, arg0, arg2);
        // Rule at src/isa/x64/lower.isle line 2161.
        return v4;
    }
    let v7 = constructor_imm_i64(ctx, I64, -0x1);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsr_or_else(ctx, arg0, arg2, v8);
    let v10 = C::gpr_to_reg(ctx, v9);
    let v11 = C::ty_bits_u64(ctx, arg1);
    let v13 = C::u64_sub(ctx, v11, 0x1);
    let v14 = constructor_imm(ctx, arg0, v13);
    let v15 = C::gpr_new(ctx, v14);
    let v16 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v17 = constructor_x64_sub(ctx, arg0, v15, v16);
    // Rule at src/isa/x64/lower.isle line 2165.
    return v17;
}

// Generated as internal constructor for term do_ctz.
pub fn constructor_do_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v3 = C::use_bmi1(ctx);
    if v3 == true {
        let v4 = constructor_x64_tzcnt(ctx, arg0, arg2);
        // Rule at src/isa/x64/lower.isle line 2197.
        return v4;
    }
    let v6 = C::ty_bits_u64(ctx, arg1);
    let v7 = constructor_imm(ctx, I64, v6);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsf_or_else(ctx, arg0, arg2, v8);
    // Rule at src/isa/x64/lower.isle line 2201.
    return v9;
}

// Generated as internal constructor for term do_popcnt.
pub fn constructor_do_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    match arg0 {
        I32 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v47 = constructor_x64_shr(ctx, I32, arg1, v5);
            let v49 = constructor_imm(ctx, I32, 0x77777777);
            let v50 = C::gpr_new(ctx, v49);
            let v51 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v52 = constructor_x64_and(ctx, I32, v47, v51);
            let v53 = &C::gpr_to_gpr_mem_imm(ctx, v52);
            let v54 = constructor_x64_sub(ctx, I32, arg1, v53);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v55 = constructor_x64_shr(ctx, I32, v52, v14);
            let v56 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v57 = constructor_x64_and(ctx, I32, v55, v56);
            let v58 = &C::gpr_to_gpr_mem_imm(ctx, v57);
            let v59 = constructor_x64_sub(ctx, I32, v54, v58);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v60 = constructor_x64_shr(ctx, I32, v57, v20);
            let v61 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v62 = constructor_x64_and(ctx, I32, v60, v61);
            let v63 = &C::gpr_to_gpr_mem_imm(ctx, v62);
            let v64 = constructor_x64_sub(ctx, I32, v59, v63);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v65 = constructor_x64_shr(ctx, I32, v64, v28);
            let v66 = &C::gpr_to_gpr_mem_imm(ctx, v64);
            let v67 = constructor_x64_add(ctx, I32, v65, v66);
            let v69 = RegMemImm::Imm { simm32: 0xF0F0F0F };
            let v70 = &C::gpr_mem_imm_new(ctx, &v69);
            let v71 = constructor_x64_and(ctx, I32, v67, v70);
            let v72 = &C::gpr_to_gpr_mem(ctx, v71);
            let v74 = constructor_x64_imul_imm(ctx, I32, v72, 0x1010101);
            let v76 = Imm8Reg::Imm8 { imm: 0x18 };
            let v77 = &C::imm8_reg_to_imm8_gpr(ctx, &v76);
            let v78 = constructor_x64_shr(ctx, I32, v74, v77);
            // Rule at src/isa/x64/lower.isle line 2283.
            return v78;
        }
        I64 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v6 = constructor_x64_shr(ctx, I64, arg1, v5);
            let v8 = constructor_imm(ctx, I64, 0x7777777777777777);
            let v9 = C::gpr_new(ctx, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v11 = constructor_x64_and(ctx, I64, v6, v10);
            let v12 = &C::gpr_to_gpr_mem_imm(ctx, v11);
            let v13 = constructor_x64_sub(ctx, I64, arg1, v12);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v15 = constructor_x64_shr(ctx, I64, v11, v14);
            let v16 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v17 = constructor_x64_and(ctx, I64, v15, v16);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v17);
            let v19 = constructor_x64_sub(ctx, I64, v13, v18);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v21 = constructor_x64_shr(ctx, I64, v17, v20);
            let v22 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v23 = constructor_x64_and(ctx, I64, v21, v22);
            let v24 = &C::gpr_to_gpr_mem_imm(ctx, v23);
            let v25 = constructor_x64_sub(ctx, I64, v19, v24);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v29 = constructor_x64_shr(ctx, I64, v25, v28);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v25);
            let v31 = constructor_x64_add(ctx, I64, v29, v30);
            let v33 = constructor_imm(ctx, I64, 0xF0F0F0F0F0F0F0F);
            let v34 = C::gpr_new(ctx, v33);
            let v35 = &C::gpr_to_gpr_mem_imm(ctx, v34);
            let v36 = constructor_x64_and(ctx, I64, v31, v35);
            let v38 = constructor_imm(ctx, I64, 0x101010101010101);
            let v39 = C::gpr_new(ctx, v38);
            let v40 = &C::gpr_to_gpr_mem(ctx, v39);
            let v41 = constructor_x64_imul(ctx, I64, v36, v40);
            let v43 = Imm8Reg::Imm8 { imm: 0x38 };
            let v44 = &C::imm8_reg_to_imm8_gpr(ctx, &v43);
            let v45 = constructor_x64_shr(ctx, I64, v41, v44);
            // Rule at src/isa/x64/lower.isle line 2240.
            return v45;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_popcnt", "src/isa/x64/lower.isle line 2239"
    )
}

// Generated as internal constructor for term do_bitrev8.
pub fn constructor_do_bitrev8<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::ty_mask(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, 0x5555555555555555);
    let v5 = constructor_imm(ctx, arg0, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_and(ctx, arg0, arg1, v7);
    let v10 = Imm8Reg::Imm8 { imm: 0x1 };
    let v11 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v12 = constructor_x64_shr(ctx, arg0, arg1, v11);
    let v13 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v14 = constructor_x64_and(ctx, arg0, v12, v13);
    let v15 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v16 = constructor_x64_shl(ctx, arg0, v8, v15);
    let v17 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v18 = constructor_x64_or(ctx, arg0, v16, v17);
    let v20 = C::u64_and(ctx, v2, 0x3333333333333333);
    let v21 = constructor_imm(ctx, arg0, v20);
    let v22 = C::gpr_new(ctx, v21);
    let v23 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v24 = constructor_x64_and(ctx, arg0, v18, v23);
    let v26 = Imm8Reg::Imm8 { imm: 0x2 };
    let v27 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v28 = constructor_x64_shr(ctx, arg0, v18, v27);
    let v29 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v30 = constructor_x64_and(ctx, arg0, v28, v29);
    let v31 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v32 = constructor_x64_shl(ctx, arg0, v24, v31);
    let v33 = &C::gpr_to_gpr_mem_imm(ctx, v30);
    let v34 = constructor_x64_or(ctx, arg0, v32, v33);
    let v36 = C::u64_and(ctx, v2, 0xF0F0F0F0F0F0F0F);
    let v37 = constructor_imm(ctx, arg0, v36);
    let v38 = C::gpr_new(ctx, v37);
    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v40 = constructor_x64_and(ctx, arg0, v34, v39);
    let v42 = Imm8Reg::Imm8 { imm: 0x4 };
    let v43 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v44 = constructor_x64_shr(ctx, arg0, v34, v43);
    let v45 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v46 = constructor_x64_and(ctx, arg0, v44, v45);
    let v47 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v48 = constructor_x64_shl(ctx, arg0, v40, v47);
    let v49 = &C::gpr_to_gpr_mem_imm(ctx, v46);
    let v50 = constructor_x64_or(ctx, arg0, v48, v49);
    // Rule at src/isa/x64/lower.isle line 2377.
    return v50;
}

// Generated as internal constructor for term do_bitrev16.
pub fn constructor_do_bitrev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev8(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFF00FF00FF00FF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x8 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2400.
    return v19;
}

// Generated as internal constructor for term do_bitrev32.
pub fn constructor_do_bitrev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev16(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFFFF0000FFFF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x10 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2412.
    return v19;
}

// Generated as internal constructor for term do_bitrev64.
pub fn constructor_do_bitrev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    if arg0 == I64 {
        let v2 = constructor_do_bitrev32(ctx, arg0, arg1);
        let v4 = constructor_imm(ctx, arg0, 0xFFFFFFFF);
        let v5 = C::gpr_new(ctx, v4);
        let v6 = &C::gpr_to_gpr_mem_imm(ctx, v5);
        let v7 = constructor_x64_and(ctx, arg0, v2, v6);
        let v9 = Imm8Reg::Imm8 { imm: 0x20 };
        let v10 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v11 = constructor_x64_shr(ctx, arg0, v2, v10);
        let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v13 = constructor_x64_shl(ctx, arg0, v7, v12);
        let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
        let v15 = constructor_x64_or(ctx, arg0, v13, v14);
        // Rule at src/isa/x64/lower.isle line 2424.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_bitrev64", "src/isa/x64/lower.isle line 2423"
    )
}

// Generated as internal constructor for term fmadd.
pub fn constructor_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2858.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2857.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2853.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2852.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2847.
    return v7;
}

// Generated as internal constructor for term fnmadd.
pub fn constructor_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2866.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2865.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2862.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2861.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2860.
    return v7;
}

// Generated as internal constructor for term cmp_zero_i128.
pub fn constructor_cmp_zero_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: ValueRegs,
) -> IcmpCondResult {
    let v1 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
        let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
        let v10 = &C::gpr_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Or, I64, v5, v10);
        let v12 = &C::cc_invert(ctx, v2);
        let v13 = &constructor_icmp_cond_result(ctx, v11, v12);
        // Rule at src/isa/x64/lower.isle line 3334.
        return v13.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_zero_i128", "src/isa/x64/lower.isle line 3333"
    )
}

// Generated as internal constructor for term cmp_zero_int_bool_ref.
pub fn constructor_cmp_zero_int_bool_ref<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::raw_operand_size_of_type(ctx, v1);
    let v3 = constructor_put_in_gpr(ctx, arg0);
    let v4 = &C::gpr_to_gpr_mem_imm(ctx, v3);
    let v5 = &constructor_x64_test(ctx, v2, v3, v4);
    // Rule at src/isa/x64/lower.isle line 3343.
    return v5.clone();
}

// Generated as internal constructor for term lower_swiden_low.
pub fn constructor_lower_swiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v3 = constructor_x64_punpcklbw(ctx, arg1, v2);
            let v5 = &C::xmi_imm(ctx, 0x8);
            let v6 = constructor_x64_psraw(ctx, v3, v5);
            // Rule at src/isa/x64/lower.isle line 3808.
            return v6;
        }
        I32X4 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v7 = constructor_x64_punpcklwd(ctx, arg1, v2);
            let v9 = &C::xmi_imm(ctx, 0x10);
            let v10 = constructor_x64_psrad(ctx, v7, v9);
            // Rule at src/isa/x64/lower.isle line 3810.
            return v10;
        }
        I64X2 => {
            let v12 = constructor_xmm_zero(ctx, I32X4);
            let v13 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v14 = constructor_x64_pcmpgtd(ctx, v12, v13);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_punpckldq(ctx, arg1, v15);
            // Rule at src/isa/x64/lower.isle line 3816.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_swiden_low", "src/isa/x64/lower.isle line 3803"
    )
}

// Generated as internal constructor for term lower_uwiden_low.
pub fn constructor_lower_uwiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Xmm {
    match arg0 {
        I16X8 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v5 = constructor_x64_punpcklbw(ctx, arg1, v4);
            // Rule at src/isa/x64/lower.isle line 3871.
            return v5;
        }
        I32X4 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v6 = constructor_x64_punpcklwd(ctx, arg1, v4);
            // Rule at src/isa/x64/lower.isle line 3872.
            return v6;
        }
        I64X2 => {
            let v8 = constructor_xmm_zero(ctx, F32X4);
            let v9 = &C::xmm_to_xmm_mem(ctx, v8);
            let v10 = constructor_x64_unpcklps(ctx, arg1, v9);
            // Rule at src/isa/x64/lower.isle line 3873.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uwiden_low", "src/isa/x64/lower.isle line 3870"
    )
}

// Generated as internal constructor for term unarrow_i32x4_lanes_to_low_u16_lanes.
pub fn constructor_unarrow_i32x4_lanes_to_low_u16_lanes<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v2 = constructor_xmm_zero(ctx, I32X4);
    let v3 = &C::xmm_to_xmm_mem(ctx, v2);
    let v4 = constructor_x64_pcmpgtd(ctx, arg0, v3);
    let v5 = &C::xmm_to_xmm_mem(ctx, v4);
    let v6 = constructor_x64_pand(ctx, arg0, v5);
    let v8 = C::emit_u128_le_const(ctx, 0xFFFF0000FFFF0000FFFF0000FFFF);
    let v9 = &constructor_const_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_movdqu_load(ctx, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v6);
    let v12 = constructor_x64_pcmpgtd(ctx, v10, v11);
    let v13 = &C::xmm_to_xmm_mem(ctx, v12);
    let v14 = constructor_x64_pand(ctx, v6, v13);
    let v15 = &C::xmm_to_xmm_mem(ctx, v10);
    let v16 = constructor_x64_pandn(ctx, v12, v15);
    let v17 = &C::xmm_to_xmm_mem(ctx, v16);
    let v18 = constructor_x64_por(ctx, v14, v17);
    let v19 = &C::xmm_to_xmm_mem(ctx, v18);
    let v21 = constructor_x64_pshuflw(ctx, v19, 0x8);
    let v22 = &C::xmm_to_xmm_mem(ctx, v21);
    let v23 = constructor_x64_pshufhw(ctx, v22, 0x8);
    let v24 = &C::xmm_to_xmm_mem(ctx, v23);
    let v25 = constructor_x64_pshufd(ctx, v24, 0x8);
    // Rule at src/isa/x64/lower.isle line 3953.
    return v25;
}

// Generated as internal constructor for term x64_round.
pub fn constructor_x64_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMem,
    arg2: &RoundImm,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v5 = constructor_x64_roundss(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4037.
                return v5;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                // Rule at src/isa/x64/lower.isle line 4050.
                return v13;
            }
        }
        F64 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v6 = constructor_x64_roundsd(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4040.
                return v6;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                // Rule at src/isa/x64/lower.isle line 4051.
                return v17;
            }
        }
        F32X4 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v7 = constructor_x64_roundps(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4043.
                return v7;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v20 = constructor_x64_pshufd(ctx, v18, 0x1);
                let v21 = C::xmm_to_reg(ctx, v20);
                let v22 = C::libcall_1(ctx, v11, v21);
                let v23 = C::xmm_new(ctx, v22);
                let v24 = constructor_f32x4_insertlane(ctx, v13, v23, 0x1);
                let v25 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v27 = constructor_x64_pshufd(ctx, v25, 0x2);
                let v28 = C::xmm_to_reg(ctx, v27);
                let v29 = C::libcall_1(ctx, v11, v28);
                let v30 = C::xmm_new(ctx, v29);
                let v31 = constructor_f32x4_insertlane(ctx, v24, v30, 0x2);
                let v32 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v34 = constructor_x64_pshufd(ctx, v32, 0x3);
                let v35 = C::xmm_to_reg(ctx, v34);
                let v36 = C::libcall_1(ctx, v11, v35);
                let v37 = C::xmm_new(ctx, v36);
                let v38 = constructor_f32x4_insertlane(ctx, v31, v37, 0x3);
                // Rule at src/isa/x64/lower.isle line 4052.
                return v38;
            }
        }
        F64X2 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v8 = constructor_x64_roundpd(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4046.
                return v8;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v40 = constructor_x64_pshufd(ctx, v18, 0xE);
                let v41 = C::xmm_to_reg(ctx, v40);
                let v42 = C::libcall_1(ctx, v15, v41);
                let v43 = C::xmm_new(ctx, v42);
                let v44 = &C::xmm_to_xmm_mem(ctx, v43);
                let v45 = constructor_x64_movlhps(ctx, v17, v44);
                // Rule at src/isa/x64/lower.isle line 4064.
                return v45;
            }
        }
        _ => {}
    }
    if let &RegMem::Mem { addr: ref v46 } = arg1 {
        let v48 = constructor_x64_load(ctx, arg0, v46, &ExtKind::ZeroExtend);
        let v49 = RegMem::Reg { reg: v48 };
        let v50 = constructor_x64_round(ctx, arg0, &v49, arg2);
        // Rule at src/isa/x64/lower.isle line 4071.
        return v50;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_round", "src/isa/x64/lower.isle line 4036"
    )
}

// Generated as internal constructor for term round_libcall.
pub fn constructor_round_libcall<C: Context>(ctx: &mut C, arg0: Type, arg1: &RoundImm) -> LibCall {
    match arg0 {
        F32 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src/isa/x64/lower.isle line 4079.
                    return LibCall::NearestF32;
                }
                &RoundImm::RoundDown => {
                    // Rule at src/isa/x64/lower.isle line 4077.
                    return LibCall::FloorF32;
                }
                &RoundImm::RoundUp => {
                    // Rule at src/isa/x64/lower.isle line 4075.
                    return LibCall::CeilF32;
                }
                &RoundImm::RoundZero => {
                    // Rule at src/isa/x64/lower.isle line 4081.
                    return LibCall::TruncF32;
                }
                _ => {}
            }
        }
        F64 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src/isa/x64/lower.isle line 4080.
                    return LibCall::NearestF64;
                }
                &RoundImm::RoundDown => {
                    // Rule at src/isa/x64/lower.isle line 4078.
                    return LibCall::FloorF64;
                }
                &RoundImm::RoundUp => {
                    // Rule at src/isa/x64/lower.isle line 4076.
                    return LibCall::CeilF64;
                }
                &RoundImm::RoundZero => {
                    // Rule at src/isa/x64/lower.isle line 4082.
                    return LibCall::TruncF64;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "round_libcall", "src/isa/x64/lower.isle line 4074"
    )
}

// Generated as internal constructor for term nonzero_sdiv_divisor.
pub fn constructor_nonzero_sdiv_divisor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Reg {
    let v2 = C::def_inst(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = &C::inst_data(ctx, v3);
        if let &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } = v4
        {
            if let &Opcode::Iconst = v5 {
                let v7 = C::safe_divisor_from_imm64(ctx, arg0, v6);
                if let Some(v8) = v7 {
                    let v9 = constructor_imm(ctx, arg0, v8);
                    // Rule at src/isa/x64/lower.isle line 4162.
                    return v9;
                }
            }
        }
    }
    let v10 = C::put_in_reg(ctx, arg1);
    let v11 = &C::raw_operand_size_of_type(ctx, arg0);
    let v12 = C::gpr_new(ctx, v10);
    let v13 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v14 = &constructor_x64_test(ctx, v11, v12, v13);
    let v17 = &constructor_trap_if(ctx, &CC::Z, &TrapCode::IntegerDivisionByZero);
    let v18 = &constructor_with_flags_side_effect(ctx, v14, v17);
    let v19 = constructor_side_effect(ctx, v18);
    // Rule at src/isa/x64/lower.isle line 4165.
    return v10;
}

// Generated as internal constructor for term lower_pshufb.
pub fn constructor_lower_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &RegMem) -> Xmm {
    let v2 = C::use_ssse3(ctx);
    if v2 == true {
        let v3 = &C::reg_mem_to_xmm_mem(ctx, arg1);
        let v4 = constructor_x64_pshufb(ctx, arg0, v3);
        // Rule at src/isa/x64/lower.isle line 4447.
        return v4;
    }
    match arg1 {
        &RegMem::Reg { reg: v5 } => {
            let v7 = C::xmm_to_reg(ctx, arg0);
            let v8 = C::libcall_2(ctx, &LibCall::X86Pshufb, v7, v5);
            let v9 = C::xmm_new(ctx, v8);
            // Rule at src/isa/x64/lower.isle line 4450.
            return v9;
        }
        &RegMem::Mem { addr: ref v10 } => {
            let v11 = &constructor_synthetic_amode_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            let v13 = C::xmm_to_reg(ctx, v12);
            let v14 = &constructor_xmm_to_reg_mem(ctx, v13);
            let v15 = &C::xmm_mem_to_reg_mem(ctx, v14);
            let v16 = constructor_lower_pshufb(ctx, arg0, v15);
            // Rule at src/isa/x64/lower.isle line 4452.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_pshufb", "src/isa/x64/lower.isle line 4446"
    )
}
